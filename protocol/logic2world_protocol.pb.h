// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logic2world_protocol.proto

#ifndef PROTOBUF_logic2world_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_logic2world_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "logic2world_msg_type.pb.h"
#include "msg_info_def.pb.h"
#include "msg_info_def_ex.pb.h"
#include "msg_type_def.pb.h"
#include "pump_type.pb.h"
// @@protoc_insertion_point(includes)

namespace logic2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
void protobuf_AssignDesc_logic2world_5fprotocol_2eproto();
void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto();

class packetl2w_game_ready;
class packetw2l_player_login;
class packetl2w_player_login_result;
class packetw2l_player_logout;
class packetl2w_player_logout_result;
class packetw2l_change_player_property;
class packetl2w_player_property_stat;
class packetw2l_accept_gift;
class packetl2w_game_broadcast;
class packetl2w_player_quest_change;
class packetl2w_player_star_change;
class packagel2w_p_game_status_change;

// ===================================================================

class packetl2w_game_ready : public ::google::protobuf::Message {
 public:
  packetl2w_game_ready();
  virtual ~packetl2w_game_ready();

  packetl2w_game_ready(const packetl2w_game_ready& from);

  inline packetl2w_game_ready& operator=(const packetl2w_game_ready& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2w_game_ready& default_instance();

  void Swap(packetl2w_game_ready* other);

  // implements Message ----------------------------------------------

  packetl2w_game_ready* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2w_game_ready& from);
  void MergeFrom(const packetl2w_game_ready& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_ready];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::logic2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::logic2world_protocols::e_server_msg_type value);

  // optional fixed32 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional fixed32 game_ver = 3;
  inline bool has_game_ver() const;
  inline void clear_game_ver();
  static const int kGameVerFieldNumber = 3;
  inline ::google::protobuf::uint32 game_ver() const;
  inline void set_game_ver(::google::protobuf::uint32 value);

  // optional fixed32 room_id = 4;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  inline ::google::protobuf::uint32 room_id() const;
  inline void set_room_id(::google::protobuf::uint32 value);

  // optional fixed32 roomChildID = 5;
  inline bool has_roomchildid() const;
  inline void clear_roomchildid();
  static const int kRoomChildIDFieldNumber = 5;
  inline ::google::protobuf::uint32 roomchildid() const;
  inline void set_roomchildid(::google::protobuf::uint32 value);

  // optional fixed32 maxPlayerNum = 6 [default = 200];
  inline bool has_maxplayernum() const;
  inline void clear_maxplayernum();
  static const int kMaxPlayerNumFieldNumber = 6;
  inline ::google::protobuf::uint32 maxplayernum() const;
  inline void set_maxplayernum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:logic2world_protocols.packetl2w_game_ready)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_game_ver();
  inline void clear_has_game_ver();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_roomchildid();
  inline void clear_has_roomchildid();
  inline void set_has_maxplayernum();
  inline void clear_has_maxplayernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::uint32 game_ver_;
  ::google::protobuf::uint32 room_id_;
  ::google::protobuf::uint32 roomchildid_;
  ::google::protobuf::uint32 maxplayernum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2w_game_ready* default_instance_;
};
// -------------------------------------------------------------------

class packetw2l_player_login : public ::google::protobuf::Message {
 public:
  packetw2l_player_login();
  virtual ~packetw2l_player_login();

  packetw2l_player_login(const packetw2l_player_login& from);

  inline packetw2l_player_login& operator=(const packetw2l_player_login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2l_player_login& default_instance();

  void Swap(packetw2l_player_login* other);

  // implements Message ----------------------------------------------

  packetw2l_player_login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2l_player_login& from);
  void MergeFrom(const packetw2l_player_login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_login];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::logic2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::logic2world_protocols::e_server_msg_type value);

  // optional fixed32 sessionid = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // optional .msg_info_def.msg_account_info account_info = 3;
  inline bool has_account_info() const;
  inline void clear_account_info();
  static const int kAccountInfoFieldNumber = 3;
  inline const ::msg_info_def::msg_account_info& account_info() const;
  inline ::msg_info_def::msg_account_info* mutable_account_info();
  inline ::msg_info_def::msg_account_info* release_account_info();
  inline void set_allocated_account_info(::msg_info_def::msg_account_info* account_info);

  // optional .msg_info_def_ex.msg_account_info_ex account_info_ex = 4;
  inline bool has_account_info_ex() const;
  inline void clear_account_info_ex();
  static const int kAccountInfoExFieldNumber = 4;
  inline const ::msg_info_def_ex::msg_account_info_ex& account_info_ex() const;
  inline ::msg_info_def_ex::msg_account_info_ex* mutable_account_info_ex();
  inline ::msg_info_def_ex::msg_account_info_ex* release_account_info_ex();
  inline void set_allocated_account_info_ex(::msg_info_def_ex::msg_account_info_ex* account_info_ex);

  // @@protoc_insertion_point(class_scope:logic2world_protocols.packetw2l_player_login)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_account_info();
  inline void clear_has_account_info();
  inline void set_has_account_info_ex();
  inline void clear_has_account_info_ex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::uint32 sessionid_;
  ::msg_info_def::msg_account_info* account_info_;
  ::msg_info_def_ex::msg_account_info_ex* account_info_ex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2l_player_login* default_instance_;
};
// -------------------------------------------------------------------

class packetl2w_player_login_result : public ::google::protobuf::Message {
 public:
  packetl2w_player_login_result();
  virtual ~packetl2w_player_login_result();

  packetl2w_player_login_result(const packetl2w_player_login_result& from);

  inline packetl2w_player_login_result& operator=(const packetl2w_player_login_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2w_player_login_result& default_instance();

  void Swap(packetl2w_player_login_result* other);

  // implements Message ----------------------------------------------

  packetl2w_player_login_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2w_player_login_result& from);
  void MergeFrom(const packetl2w_player_login_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_login_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::logic2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::logic2world_protocols::e_server_msg_type value);

  // optional fixed32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // optional .msg_type_def.e_msg_result_def result = 3 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:logic2world_protocols.packetl2w_player_login_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::uint32 playerid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2w_player_login_result* default_instance_;
};
// -------------------------------------------------------------------

class packetw2l_player_logout : public ::google::protobuf::Message {
 public:
  packetw2l_player_logout();
  virtual ~packetw2l_player_logout();

  packetw2l_player_logout(const packetw2l_player_logout& from);

  inline packetw2l_player_logout& operator=(const packetw2l_player_logout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2l_player_logout& default_instance();

  void Swap(packetw2l_player_logout* other);

  // implements Message ----------------------------------------------

  packetw2l_player_logout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2l_player_logout& from);
  void MergeFrom(const packetw2l_player_logout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_logout];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::logic2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::logic2world_protocols::e_server_msg_type value);

  // optional fixed32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:logic2world_protocols.packetw2l_player_logout)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2l_player_logout* default_instance_;
};
// -------------------------------------------------------------------

class packetl2w_player_logout_result : public ::google::protobuf::Message {
 public:
  packetl2w_player_logout_result();
  virtual ~packetl2w_player_logout_result();

  packetl2w_player_logout_result(const packetl2w_player_logout_result& from);

  inline packetl2w_player_logout_result& operator=(const packetl2w_player_logout_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2w_player_logout_result& default_instance();

  void Swap(packetl2w_player_logout_result* other);

  // implements Message ----------------------------------------------

  packetl2w_player_logout_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2w_player_logout_result& from);
  void MergeFrom(const packetl2w_player_logout_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_logout_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::logic2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::logic2world_protocols::e_server_msg_type value);

  // optional fixed32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:logic2world_protocols.packetl2w_player_logout_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2w_player_logout_result* default_instance_;
};
// -------------------------------------------------------------------

class packetw2l_change_player_property : public ::google::protobuf::Message {
 public:
  packetw2l_change_player_property();
  virtual ~packetw2l_change_player_property();

  packetw2l_change_player_property(const packetw2l_change_player_property& from);

  inline packetw2l_change_player_property& operator=(const packetw2l_change_player_property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2l_change_player_property& default_instance();

  void Swap(packetw2l_change_player_property* other);

  // implements Message ----------------------------------------------

  packetw2l_change_player_property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2l_change_player_property& from);
  void MergeFrom(const packetw2l_change_player_property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_change_player_property];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::logic2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::logic2world_protocols::e_server_msg_type value);

  // optional fixed32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // optional .msg_info_def.msg_account_info change_info = 3;
  inline bool has_change_info() const;
  inline void clear_change_info();
  static const int kChangeInfoFieldNumber = 3;
  inline const ::msg_info_def::msg_account_info& change_info() const;
  inline ::msg_info_def::msg_account_info* mutable_change_info();
  inline ::msg_info_def::msg_account_info* release_change_info();
  inline void set_allocated_change_info(::msg_info_def::msg_account_info* change_info);

  // optional .msg_info_def_ex.msg_account_info_ex change_info_ex = 4;
  inline bool has_change_info_ex() const;
  inline void clear_change_info_ex();
  static const int kChangeInfoExFieldNumber = 4;
  inline const ::msg_info_def_ex::msg_account_info_ex& change_info_ex() const;
  inline ::msg_info_def_ex::msg_account_info_ex* mutable_change_info_ex();
  inline ::msg_info_def_ex::msg_account_info_ex* release_change_info_ex();
  inline void set_allocated_change_info_ex(::msg_info_def_ex::msg_account_info_ex* change_info_ex);

  // @@protoc_insertion_point(class_scope:logic2world_protocols.packetw2l_change_player_property)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_change_info();
  inline void clear_has_change_info();
  inline void set_has_change_info_ex();
  inline void clear_has_change_info_ex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::uint32 playerid_;
  ::msg_info_def::msg_account_info* change_info_;
  ::msg_info_def_ex::msg_account_info_ex* change_info_ex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2l_change_player_property* default_instance_;
};
// -------------------------------------------------------------------

class packetl2w_player_property_stat : public ::google::protobuf::Message {
 public:
  packetl2w_player_property_stat();
  virtual ~packetl2w_player_property_stat();

  packetl2w_player_property_stat(const packetl2w_player_property_stat& from);

  inline packetl2w_player_property_stat& operator=(const packetl2w_player_property_stat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2w_player_property_stat& default_instance();

  void Swap(packetl2w_player_property_stat* other);

  // implements Message ----------------------------------------------

  packetl2w_player_property_stat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2w_player_property_stat& from);
  void MergeFrom(const packetl2w_player_property_stat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_property_stat];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::logic2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::logic2world_protocols::e_server_msg_type value);

  // optional fixed32 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // optional fixed32 gameId = 3;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIdFieldNumber = 3;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // optional .msg_type_def.e_item_type_def attrType = 4;
  inline bool has_attrtype() const;
  inline void clear_attrtype();
  static const int kAttrTypeFieldNumber = 4;
  inline ::msg_type_def::e_item_type_def attrtype() const;
  inline void set_attrtype(::msg_type_def::e_item_type_def value);

  // optional int32 addValue = 5;
  inline bool has_addvalue() const;
  inline void clear_addvalue();
  static const int kAddValueFieldNumber = 5;
  inline ::google::protobuf::int32 addvalue() const;
  inline void set_addvalue(::google::protobuf::int32 value);

  // optional .PropertyReasonType reason = 6;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 6;
  inline ::PropertyReasonType reason() const;
  inline void set_reason(::PropertyReasonType value);

  // optional string param = 7;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 7;
  inline const ::std::string& param() const;
  inline void set_param(const ::std::string& value);
  inline void set_param(const char* value);
  inline void set_param(const char* value, size_t size);
  inline ::std::string* mutable_param();
  inline ::std::string* release_param();
  inline void set_allocated_param(::std::string* param);

  // @@protoc_insertion_point(class_scope:logic2world_protocols.packetl2w_player_property_stat)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_attrtype();
  inline void clear_has_attrtype();
  inline void set_has_addvalue();
  inline void clear_has_addvalue();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 gameid_;
  int attrtype_;
  ::google::protobuf::int32 addvalue_;
  int reason_;
  ::std::string* param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2w_player_property_stat* default_instance_;
};
// -------------------------------------------------------------------

class packetw2l_accept_gift : public ::google::protobuf::Message {
 public:
  packetw2l_accept_gift();
  virtual ~packetw2l_accept_gift();

  packetw2l_accept_gift(const packetw2l_accept_gift& from);

  inline packetw2l_accept_gift& operator=(const packetw2l_accept_gift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2l_accept_gift& default_instance();

  void Swap(packetw2l_accept_gift* other);

  // implements Message ----------------------------------------------

  packetw2l_accept_gift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2l_accept_gift& from);
  void MergeFrom(const packetw2l_accept_gift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_accept_gift];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::logic2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::logic2world_protocols::e_server_msg_type value);

  // optional int32 senderId = 2;
  inline bool has_senderid() const;
  inline void clear_senderid();
  static const int kSenderIdFieldNumber = 2;
  inline ::google::protobuf::int32 senderid() const;
  inline void set_senderid(::google::protobuf::int32 value);

  // optional int32 receiverId = 3;
  inline bool has_receiverid() const;
  inline void clear_receiverid();
  static const int kReceiverIdFieldNumber = 3;
  inline ::google::protobuf::int32 receiverid() const;
  inline void set_receiverid(::google::protobuf::int32 value);

  // optional int32 giftId = 4;
  inline bool has_giftid() const;
  inline void clear_giftid();
  static const int kGiftIdFieldNumber = 4;
  inline ::google::protobuf::int32 giftid() const;
  inline void set_giftid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:logic2world_protocols.packetw2l_accept_gift)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_senderid();
  inline void clear_has_senderid();
  inline void set_has_receiverid();
  inline void clear_has_receiverid();
  inline void set_has_giftid();
  inline void clear_has_giftid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::int32 senderid_;
  ::google::protobuf::int32 receiverid_;
  ::google::protobuf::int32 giftid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2l_accept_gift* default_instance_;
};
// -------------------------------------------------------------------

class packetl2w_game_broadcast : public ::google::protobuf::Message {
 public:
  packetl2w_game_broadcast();
  virtual ~packetl2w_game_broadcast();

  packetl2w_game_broadcast(const packetl2w_game_broadcast& from);

  inline packetl2w_game_broadcast& operator=(const packetl2w_game_broadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2w_game_broadcast& default_instance();

  void Swap(packetl2w_game_broadcast* other);

  // implements Message ----------------------------------------------

  packetl2w_game_broadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2w_game_broadcast& from);
  void MergeFrom(const packetl2w_game_broadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_broadcast];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::logic2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::logic2world_protocols::e_server_msg_type value);

  // optional string game_msg = 2;
  inline bool has_game_msg() const;
  inline void clear_game_msg();
  static const int kGameMsgFieldNumber = 2;
  inline const ::std::string& game_msg() const;
  inline void set_game_msg(const ::std::string& value);
  inline void set_game_msg(const char* value);
  inline void set_game_msg(const char* value, size_t size);
  inline ::std::string* mutable_game_msg();
  inline ::std::string* release_game_msg();
  inline void set_allocated_game_msg(::std::string* game_msg);

  // @@protoc_insertion_point(class_scope:logic2world_protocols.packetl2w_game_broadcast)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_game_msg();
  inline void clear_has_game_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* game_msg_;
  int packet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2w_game_broadcast* default_instance_;
};
// -------------------------------------------------------------------

class packetl2w_player_quest_change : public ::google::protobuf::Message {
 public:
  packetl2w_player_quest_change();
  virtual ~packetl2w_player_quest_change();

  packetl2w_player_quest_change(const packetl2w_player_quest_change& from);

  inline packetl2w_player_quest_change& operator=(const packetl2w_player_quest_change& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2w_player_quest_change& default_instance();

  void Swap(packetl2w_player_quest_change* other);

  // implements Message ----------------------------------------------

  packetl2w_player_quest_change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2w_player_quest_change& from);
  void MergeFrom(const packetl2w_player_quest_change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_quest_change];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::logic2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::logic2world_protocols::e_server_msg_type value);

  // optional fixed32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // optional fixed32 quest_id = 3;
  inline bool has_quest_id() const;
  inline void clear_quest_id();
  static const int kQuestIdFieldNumber = 3;
  inline ::google::protobuf::uint32 quest_id() const;
  inline void set_quest_id(::google::protobuf::uint32 value);

  // optional fixed32 q_count = 4 [default = 1];
  inline bool has_q_count() const;
  inline void clear_q_count();
  static const int kQCountFieldNumber = 4;
  inline ::google::protobuf::uint32 q_count() const;
  inline void set_q_count(::google::protobuf::uint32 value);

  // optional fixed32 ex_param = 5 [default = 0];
  inline bool has_ex_param() const;
  inline void clear_ex_param();
  static const int kExParamFieldNumber = 5;
  inline ::google::protobuf::uint32 ex_param() const;
  inline void set_ex_param(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:logic2world_protocols.packetl2w_player_quest_change)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_quest_id();
  inline void clear_has_quest_id();
  inline void set_has_q_count();
  inline void clear_has_q_count();
  inline void set_has_ex_param();
  inline void clear_has_ex_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::uint32 quest_id_;
  ::google::protobuf::uint32 q_count_;
  ::google::protobuf::uint32 ex_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2w_player_quest_change* default_instance_;
};
// -------------------------------------------------------------------

class packetl2w_player_star_change : public ::google::protobuf::Message {
 public:
  packetl2w_player_star_change();
  virtual ~packetl2w_player_star_change();

  packetl2w_player_star_change(const packetl2w_player_star_change& from);

  inline packetl2w_player_star_change& operator=(const packetl2w_player_star_change& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2w_player_star_change& default_instance();

  void Swap(packetl2w_player_star_change* other);

  // implements Message ----------------------------------------------

  packetl2w_player_star_change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2w_player_star_change& from);
  void MergeFrom(const packetl2w_player_star_change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_star_change];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::logic2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::logic2world_protocols::e_server_msg_type value);

  // optional fixed32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // optional fixed32 addstar = 3 [default = 0];
  inline bool has_addstar() const;
  inline void clear_addstar();
  static const int kAddstarFieldNumber = 3;
  inline ::google::protobuf::uint32 addstar() const;
  inline void set_addstar(::google::protobuf::uint32 value);

  // optional fixed32 addaward = 4 [default = 0];
  inline bool has_addaward() const;
  inline void clear_addaward();
  static const int kAddawardFieldNumber = 4;
  inline ::google::protobuf::uint32 addaward() const;
  inline void set_addaward(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:logic2world_protocols.packetl2w_player_star_change)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_addstar();
  inline void clear_has_addstar();
  inline void set_has_addaward();
  inline void clear_has_addaward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::uint32 addstar_;
  ::google::protobuf::uint32 addaward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2w_player_star_change* default_instance_;
};
// -------------------------------------------------------------------

class packagel2w_p_game_status_change : public ::google::protobuf::Message {
 public:
  packagel2w_p_game_status_change();
  virtual ~packagel2w_p_game_status_change();

  packagel2w_p_game_status_change(const packagel2w_p_game_status_change& from);

  inline packagel2w_p_game_status_change& operator=(const packagel2w_p_game_status_change& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packagel2w_p_game_status_change& default_instance();

  void Swap(packagel2w_p_game_status_change* other);

  // implements Message ----------------------------------------------

  packagel2w_p_game_status_change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packagel2w_p_game_status_change& from);
  void MergeFrom(const packagel2w_p_game_status_change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_msg_12w_p_game_status_change];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::logic2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::logic2world_protocols::e_server_msg_type value);

  // optional fixed32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // optional fixed32 game_id = 3;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 3;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional fixed32 room_id = 4;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  inline ::google::protobuf::uint32 room_id() const;
  inline void set_room_id(::google::protobuf::uint32 value);

  // optional fixed32 table_id = 5;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 5;
  inline ::google::protobuf::uint32 table_id() const;
  inline void set_table_id(::google::protobuf::uint32 value);

  // optional fixed32 chair_id = 6;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 6;
  inline ::google::protobuf::uint32 chair_id() const;
  inline void set_chair_id(::google::protobuf::uint32 value);

  // optional fixed32 user_status = 7;
  inline bool has_user_status() const;
  inline void clear_user_status();
  static const int kUserStatusFieldNumber = 7;
  inline ::google::protobuf::uint32 user_status() const;
  inline void set_user_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:logic2world_protocols.packagel2w_p_game_status_change)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_user_status();
  inline void clear_has_user_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int packet_id_;
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::uint32 room_id_;
  ::google::protobuf::uint32 table_id_;
  ::google::protobuf::uint32 chair_id_;
  ::google::protobuf::uint32 user_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_logic2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packagel2w_p_game_status_change* default_instance_;
};
// ===================================================================


// ===================================================================

// packetl2w_game_ready

// optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_ready];
inline bool packetl2w_game_ready::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2w_game_ready::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2w_game_ready::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2w_game_ready::clear_packet_id() {
  packet_id_ = 20001;
  clear_has_packet_id();
}
inline ::logic2world_protocols::e_server_msg_type packetl2w_game_ready::packet_id() const {
  return static_cast< ::logic2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2w_game_ready::set_packet_id(::logic2world_protocols::e_server_msg_type value) {
  assert(::logic2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional fixed32 game_id = 2;
inline bool packetl2w_game_ready::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2w_game_ready::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2w_game_ready::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2w_game_ready::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 packetl2w_game_ready::game_id() const {
  return game_id_;
}
inline void packetl2w_game_ready::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional fixed32 game_ver = 3;
inline bool packetl2w_game_ready::has_game_ver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2w_game_ready::set_has_game_ver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2w_game_ready::clear_has_game_ver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2w_game_ready::clear_game_ver() {
  game_ver_ = 0u;
  clear_has_game_ver();
}
inline ::google::protobuf::uint32 packetl2w_game_ready::game_ver() const {
  return game_ver_;
}
inline void packetl2w_game_ready::set_game_ver(::google::protobuf::uint32 value) {
  set_has_game_ver();
  game_ver_ = value;
}

// optional fixed32 room_id = 4;
inline bool packetl2w_game_ready::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2w_game_ready::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2w_game_ready::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2w_game_ready::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
inline ::google::protobuf::uint32 packetl2w_game_ready::room_id() const {
  return room_id_;
}
inline void packetl2w_game_ready::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional fixed32 roomChildID = 5;
inline bool packetl2w_game_ready::has_roomchildid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2w_game_ready::set_has_roomchildid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2w_game_ready::clear_has_roomchildid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2w_game_ready::clear_roomchildid() {
  roomchildid_ = 0u;
  clear_has_roomchildid();
}
inline ::google::protobuf::uint32 packetl2w_game_ready::roomchildid() const {
  return roomchildid_;
}
inline void packetl2w_game_ready::set_roomchildid(::google::protobuf::uint32 value) {
  set_has_roomchildid();
  roomchildid_ = value;
}

// optional fixed32 maxPlayerNum = 6 [default = 200];
inline bool packetl2w_game_ready::has_maxplayernum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2w_game_ready::set_has_maxplayernum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2w_game_ready::clear_has_maxplayernum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2w_game_ready::clear_maxplayernum() {
  maxplayernum_ = 200u;
  clear_has_maxplayernum();
}
inline ::google::protobuf::uint32 packetl2w_game_ready::maxplayernum() const {
  return maxplayernum_;
}
inline void packetl2w_game_ready::set_maxplayernum(::google::protobuf::uint32 value) {
  set_has_maxplayernum();
  maxplayernum_ = value;
}

// -------------------------------------------------------------------

// packetw2l_player_login

// optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_login];
inline bool packetw2l_player_login::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2l_player_login::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2l_player_login::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2l_player_login::clear_packet_id() {
  packet_id_ = 20002;
  clear_has_packet_id();
}
inline ::logic2world_protocols::e_server_msg_type packetw2l_player_login::packet_id() const {
  return static_cast< ::logic2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2l_player_login::set_packet_id(::logic2world_protocols::e_server_msg_type value) {
  assert(::logic2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional fixed32 sessionid = 2;
inline bool packetw2l_player_login::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2l_player_login::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2l_player_login::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2l_player_login::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 packetw2l_player_login::sessionid() const {
  return sessionid_;
}
inline void packetw2l_player_login::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
}

// optional .msg_info_def.msg_account_info account_info = 3;
inline bool packetw2l_player_login::has_account_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2l_player_login::set_has_account_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2l_player_login::clear_has_account_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2l_player_login::clear_account_info() {
  if (account_info_ != NULL) account_info_->::msg_info_def::msg_account_info::Clear();
  clear_has_account_info();
}
inline const ::msg_info_def::msg_account_info& packetw2l_player_login::account_info() const {
  return account_info_ != NULL ? *account_info_ : *default_instance_->account_info_;
}
inline ::msg_info_def::msg_account_info* packetw2l_player_login::mutable_account_info() {
  set_has_account_info();
  if (account_info_ == NULL) account_info_ = new ::msg_info_def::msg_account_info;
  return account_info_;
}
inline ::msg_info_def::msg_account_info* packetw2l_player_login::release_account_info() {
  clear_has_account_info();
  ::msg_info_def::msg_account_info* temp = account_info_;
  account_info_ = NULL;
  return temp;
}
inline void packetw2l_player_login::set_allocated_account_info(::msg_info_def::msg_account_info* account_info) {
  delete account_info_;
  account_info_ = account_info;
  if (account_info) {
    set_has_account_info();
  } else {
    clear_has_account_info();
  }
}

// optional .msg_info_def_ex.msg_account_info_ex account_info_ex = 4;
inline bool packetw2l_player_login::has_account_info_ex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2l_player_login::set_has_account_info_ex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2l_player_login::clear_has_account_info_ex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2l_player_login::clear_account_info_ex() {
  if (account_info_ex_ != NULL) account_info_ex_->::msg_info_def_ex::msg_account_info_ex::Clear();
  clear_has_account_info_ex();
}
inline const ::msg_info_def_ex::msg_account_info_ex& packetw2l_player_login::account_info_ex() const {
  return account_info_ex_ != NULL ? *account_info_ex_ : *default_instance_->account_info_ex_;
}
inline ::msg_info_def_ex::msg_account_info_ex* packetw2l_player_login::mutable_account_info_ex() {
  set_has_account_info_ex();
  if (account_info_ex_ == NULL) account_info_ex_ = new ::msg_info_def_ex::msg_account_info_ex;
  return account_info_ex_;
}
inline ::msg_info_def_ex::msg_account_info_ex* packetw2l_player_login::release_account_info_ex() {
  clear_has_account_info_ex();
  ::msg_info_def_ex::msg_account_info_ex* temp = account_info_ex_;
  account_info_ex_ = NULL;
  return temp;
}
inline void packetw2l_player_login::set_allocated_account_info_ex(::msg_info_def_ex::msg_account_info_ex* account_info_ex) {
  delete account_info_ex_;
  account_info_ex_ = account_info_ex;
  if (account_info_ex) {
    set_has_account_info_ex();
  } else {
    clear_has_account_info_ex();
  }
}

// -------------------------------------------------------------------

// packetl2w_player_login_result

// optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_login_result];
inline bool packetl2w_player_login_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2w_player_login_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2w_player_login_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2w_player_login_result::clear_packet_id() {
  packet_id_ = 20005;
  clear_has_packet_id();
}
inline ::logic2world_protocols::e_server_msg_type packetl2w_player_login_result::packet_id() const {
  return static_cast< ::logic2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2w_player_login_result::set_packet_id(::logic2world_protocols::e_server_msg_type value) {
  assert(::logic2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional fixed32 playerid = 2;
inline bool packetl2w_player_login_result::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2w_player_login_result::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2w_player_login_result::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2w_player_login_result::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 packetl2w_player_login_result::playerid() const {
  return playerid_;
}
inline void packetl2w_player_login_result::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional .msg_type_def.e_msg_result_def result = 3 [default = e_rmt_fail];
inline bool packetl2w_player_login_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2w_player_login_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2w_player_login_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2w_player_login_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2w_player_login_result::result() const {
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2w_player_login_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// packetw2l_player_logout

// optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_logout];
inline bool packetw2l_player_logout::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2l_player_logout::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2l_player_logout::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2l_player_logout::clear_packet_id() {
  packet_id_ = 20003;
  clear_has_packet_id();
}
inline ::logic2world_protocols::e_server_msg_type packetw2l_player_logout::packet_id() const {
  return static_cast< ::logic2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2l_player_logout::set_packet_id(::logic2world_protocols::e_server_msg_type value) {
  assert(::logic2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional fixed32 playerid = 2;
inline bool packetw2l_player_logout::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2l_player_logout::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2l_player_logout::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2l_player_logout::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 packetw2l_player_logout::playerid() const {
  return playerid_;
}
inline void packetw2l_player_logout::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// packetl2w_player_logout_result

// optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_logout_result];
inline bool packetl2w_player_logout_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2w_player_logout_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2w_player_logout_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2w_player_logout_result::clear_packet_id() {
  packet_id_ = 20006;
  clear_has_packet_id();
}
inline ::logic2world_protocols::e_server_msg_type packetl2w_player_logout_result::packet_id() const {
  return static_cast< ::logic2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2w_player_logout_result::set_packet_id(::logic2world_protocols::e_server_msg_type value) {
  assert(::logic2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional fixed32 playerid = 2;
inline bool packetl2w_player_logout_result::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2w_player_logout_result::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2w_player_logout_result::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2w_player_logout_result::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 packetl2w_player_logout_result::playerid() const {
  return playerid_;
}
inline void packetl2w_player_logout_result::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// packetw2l_change_player_property

// optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_change_player_property];
inline bool packetw2l_change_player_property::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2l_change_player_property::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2l_change_player_property::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2l_change_player_property::clear_packet_id() {
  packet_id_ = 20004;
  clear_has_packet_id();
}
inline ::logic2world_protocols::e_server_msg_type packetw2l_change_player_property::packet_id() const {
  return static_cast< ::logic2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2l_change_player_property::set_packet_id(::logic2world_protocols::e_server_msg_type value) {
  assert(::logic2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional fixed32 playerid = 2;
inline bool packetw2l_change_player_property::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2l_change_player_property::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2l_change_player_property::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2l_change_player_property::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 packetw2l_change_player_property::playerid() const {
  return playerid_;
}
inline void packetw2l_change_player_property::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional .msg_info_def.msg_account_info change_info = 3;
inline bool packetw2l_change_player_property::has_change_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2l_change_player_property::set_has_change_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2l_change_player_property::clear_has_change_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2l_change_player_property::clear_change_info() {
  if (change_info_ != NULL) change_info_->::msg_info_def::msg_account_info::Clear();
  clear_has_change_info();
}
inline const ::msg_info_def::msg_account_info& packetw2l_change_player_property::change_info() const {
  return change_info_ != NULL ? *change_info_ : *default_instance_->change_info_;
}
inline ::msg_info_def::msg_account_info* packetw2l_change_player_property::mutable_change_info() {
  set_has_change_info();
  if (change_info_ == NULL) change_info_ = new ::msg_info_def::msg_account_info;
  return change_info_;
}
inline ::msg_info_def::msg_account_info* packetw2l_change_player_property::release_change_info() {
  clear_has_change_info();
  ::msg_info_def::msg_account_info* temp = change_info_;
  change_info_ = NULL;
  return temp;
}
inline void packetw2l_change_player_property::set_allocated_change_info(::msg_info_def::msg_account_info* change_info) {
  delete change_info_;
  change_info_ = change_info;
  if (change_info) {
    set_has_change_info();
  } else {
    clear_has_change_info();
  }
}

// optional .msg_info_def_ex.msg_account_info_ex change_info_ex = 4;
inline bool packetw2l_change_player_property::has_change_info_ex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2l_change_player_property::set_has_change_info_ex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2l_change_player_property::clear_has_change_info_ex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2l_change_player_property::clear_change_info_ex() {
  if (change_info_ex_ != NULL) change_info_ex_->::msg_info_def_ex::msg_account_info_ex::Clear();
  clear_has_change_info_ex();
}
inline const ::msg_info_def_ex::msg_account_info_ex& packetw2l_change_player_property::change_info_ex() const {
  return change_info_ex_ != NULL ? *change_info_ex_ : *default_instance_->change_info_ex_;
}
inline ::msg_info_def_ex::msg_account_info_ex* packetw2l_change_player_property::mutable_change_info_ex() {
  set_has_change_info_ex();
  if (change_info_ex_ == NULL) change_info_ex_ = new ::msg_info_def_ex::msg_account_info_ex;
  return change_info_ex_;
}
inline ::msg_info_def_ex::msg_account_info_ex* packetw2l_change_player_property::release_change_info_ex() {
  clear_has_change_info_ex();
  ::msg_info_def_ex::msg_account_info_ex* temp = change_info_ex_;
  change_info_ex_ = NULL;
  return temp;
}
inline void packetw2l_change_player_property::set_allocated_change_info_ex(::msg_info_def_ex::msg_account_info_ex* change_info_ex) {
  delete change_info_ex_;
  change_info_ex_ = change_info_ex;
  if (change_info_ex) {
    set_has_change_info_ex();
  } else {
    clear_has_change_info_ex();
  }
}

// -------------------------------------------------------------------

// packetl2w_player_property_stat

// optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_property_stat];
inline bool packetl2w_player_property_stat::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2w_player_property_stat::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2w_player_property_stat::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2w_player_property_stat::clear_packet_id() {
  packet_id_ = 20009;
  clear_has_packet_id();
}
inline ::logic2world_protocols::e_server_msg_type packetl2w_player_property_stat::packet_id() const {
  return static_cast< ::logic2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2w_player_property_stat::set_packet_id(::logic2world_protocols::e_server_msg_type value) {
  assert(::logic2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional fixed32 playerId = 2;
inline bool packetl2w_player_property_stat::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2w_player_property_stat::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2w_player_property_stat::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2w_player_property_stat::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 packetl2w_player_property_stat::playerid() const {
  return playerid_;
}
inline void packetl2w_player_property_stat::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional fixed32 gameId = 3;
inline bool packetl2w_player_property_stat::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2w_player_property_stat::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2w_player_property_stat::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2w_player_property_stat::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 packetl2w_player_property_stat::gameid() const {
  return gameid_;
}
inline void packetl2w_player_property_stat::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional .msg_type_def.e_item_type_def attrType = 4;
inline bool packetl2w_player_property_stat::has_attrtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2w_player_property_stat::set_has_attrtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2w_player_property_stat::clear_has_attrtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2w_player_property_stat::clear_attrtype() {
  attrtype_ = 1;
  clear_has_attrtype();
}
inline ::msg_type_def::e_item_type_def packetl2w_player_property_stat::attrtype() const {
  return static_cast< ::msg_type_def::e_item_type_def >(attrtype_);
}
inline void packetl2w_player_property_stat::set_attrtype(::msg_type_def::e_item_type_def value) {
  assert(::msg_type_def::e_item_type_def_IsValid(value));
  set_has_attrtype();
  attrtype_ = value;
}

// optional int32 addValue = 5;
inline bool packetl2w_player_property_stat::has_addvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2w_player_property_stat::set_has_addvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2w_player_property_stat::clear_has_addvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2w_player_property_stat::clear_addvalue() {
  addvalue_ = 0;
  clear_has_addvalue();
}
inline ::google::protobuf::int32 packetl2w_player_property_stat::addvalue() const {
  return addvalue_;
}
inline void packetl2w_player_property_stat::set_addvalue(::google::protobuf::int32 value) {
  set_has_addvalue();
  addvalue_ = value;
}

// optional .PropertyReasonType reason = 6;
inline bool packetl2w_player_property_stat::has_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2w_player_property_stat::set_has_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2w_player_property_stat::clear_has_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2w_player_property_stat::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ::PropertyReasonType packetl2w_player_property_stat::reason() const {
  return static_cast< ::PropertyReasonType >(reason_);
}
inline void packetl2w_player_property_stat::set_reason(::PropertyReasonType value) {
  assert(::PropertyReasonType_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// optional string param = 7;
inline bool packetl2w_player_property_stat::has_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2w_player_property_stat::set_has_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2w_player_property_stat::clear_has_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2w_player_property_stat::clear_param() {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    param_->clear();
  }
  clear_has_param();
}
inline const ::std::string& packetl2w_player_property_stat::param() const {
  return *param_;
}
inline void packetl2w_player_property_stat::set_param(const ::std::string& value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void packetl2w_player_property_stat::set_param(const char* value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void packetl2w_player_property_stat::set_param(const char* value, size_t size) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetl2w_player_property_stat::mutable_param() {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  return param_;
}
inline ::std::string* packetl2w_player_property_stat::release_param() {
  clear_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param_;
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetl2w_player_property_stat::set_allocated_param(::std::string* param) {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (param) {
    set_has_param();
    param_ = param;
  } else {
    clear_has_param();
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetw2l_accept_gift

// optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_accept_gift];
inline bool packetw2l_accept_gift::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2l_accept_gift::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2l_accept_gift::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2l_accept_gift::clear_packet_id() {
  packet_id_ = 20010;
  clear_has_packet_id();
}
inline ::logic2world_protocols::e_server_msg_type packetw2l_accept_gift::packet_id() const {
  return static_cast< ::logic2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2l_accept_gift::set_packet_id(::logic2world_protocols::e_server_msg_type value) {
  assert(::logic2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional int32 senderId = 2;
inline bool packetw2l_accept_gift::has_senderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2l_accept_gift::set_has_senderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2l_accept_gift::clear_has_senderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2l_accept_gift::clear_senderid() {
  senderid_ = 0;
  clear_has_senderid();
}
inline ::google::protobuf::int32 packetw2l_accept_gift::senderid() const {
  return senderid_;
}
inline void packetw2l_accept_gift::set_senderid(::google::protobuf::int32 value) {
  set_has_senderid();
  senderid_ = value;
}

// optional int32 receiverId = 3;
inline bool packetw2l_accept_gift::has_receiverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2l_accept_gift::set_has_receiverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2l_accept_gift::clear_has_receiverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2l_accept_gift::clear_receiverid() {
  receiverid_ = 0;
  clear_has_receiverid();
}
inline ::google::protobuf::int32 packetw2l_accept_gift::receiverid() const {
  return receiverid_;
}
inline void packetw2l_accept_gift::set_receiverid(::google::protobuf::int32 value) {
  set_has_receiverid();
  receiverid_ = value;
}

// optional int32 giftId = 4;
inline bool packetw2l_accept_gift::has_giftid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2l_accept_gift::set_has_giftid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2l_accept_gift::clear_has_giftid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2l_accept_gift::clear_giftid() {
  giftid_ = 0;
  clear_has_giftid();
}
inline ::google::protobuf::int32 packetw2l_accept_gift::giftid() const {
  return giftid_;
}
inline void packetw2l_accept_gift::set_giftid(::google::protobuf::int32 value) {
  set_has_giftid();
  giftid_ = value;
}

// -------------------------------------------------------------------

// packetl2w_game_broadcast

// optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_broadcast];
inline bool packetl2w_game_broadcast::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2w_game_broadcast::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2w_game_broadcast::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2w_game_broadcast::clear_packet_id() {
  packet_id_ = 20011;
  clear_has_packet_id();
}
inline ::logic2world_protocols::e_server_msg_type packetl2w_game_broadcast::packet_id() const {
  return static_cast< ::logic2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2w_game_broadcast::set_packet_id(::logic2world_protocols::e_server_msg_type value) {
  assert(::logic2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional string game_msg = 2;
inline bool packetl2w_game_broadcast::has_game_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2w_game_broadcast::set_has_game_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2w_game_broadcast::clear_has_game_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2w_game_broadcast::clear_game_msg() {
  if (game_msg_ != &::google::protobuf::internal::kEmptyString) {
    game_msg_->clear();
  }
  clear_has_game_msg();
}
inline const ::std::string& packetl2w_game_broadcast::game_msg() const {
  return *game_msg_;
}
inline void packetl2w_game_broadcast::set_game_msg(const ::std::string& value) {
  set_has_game_msg();
  if (game_msg_ == &::google::protobuf::internal::kEmptyString) {
    game_msg_ = new ::std::string;
  }
  game_msg_->assign(value);
}
inline void packetl2w_game_broadcast::set_game_msg(const char* value) {
  set_has_game_msg();
  if (game_msg_ == &::google::protobuf::internal::kEmptyString) {
    game_msg_ = new ::std::string;
  }
  game_msg_->assign(value);
}
inline void packetl2w_game_broadcast::set_game_msg(const char* value, size_t size) {
  set_has_game_msg();
  if (game_msg_ == &::google::protobuf::internal::kEmptyString) {
    game_msg_ = new ::std::string;
  }
  game_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* packetl2w_game_broadcast::mutable_game_msg() {
  set_has_game_msg();
  if (game_msg_ == &::google::protobuf::internal::kEmptyString) {
    game_msg_ = new ::std::string;
  }
  return game_msg_;
}
inline ::std::string* packetl2w_game_broadcast::release_game_msg() {
  clear_has_game_msg();
  if (game_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_msg_;
    game_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void packetl2w_game_broadcast::set_allocated_game_msg(::std::string* game_msg) {
  if (game_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete game_msg_;
  }
  if (game_msg) {
    set_has_game_msg();
    game_msg_ = game_msg;
  } else {
    clear_has_game_msg();
    game_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// packetl2w_player_quest_change

// optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_quest_change];
inline bool packetl2w_player_quest_change::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2w_player_quest_change::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2w_player_quest_change::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2w_player_quest_change::clear_packet_id() {
  packet_id_ = 20013;
  clear_has_packet_id();
}
inline ::logic2world_protocols::e_server_msg_type packetl2w_player_quest_change::packet_id() const {
  return static_cast< ::logic2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2w_player_quest_change::set_packet_id(::logic2world_protocols::e_server_msg_type value) {
  assert(::logic2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional fixed32 player_id = 2;
inline bool packetl2w_player_quest_change::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2w_player_quest_change::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2w_player_quest_change::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2w_player_quest_change::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 packetl2w_player_quest_change::player_id() const {
  return player_id_;
}
inline void packetl2w_player_quest_change::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional fixed32 quest_id = 3;
inline bool packetl2w_player_quest_change::has_quest_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2w_player_quest_change::set_has_quest_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2w_player_quest_change::clear_has_quest_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2w_player_quest_change::clear_quest_id() {
  quest_id_ = 0u;
  clear_has_quest_id();
}
inline ::google::protobuf::uint32 packetl2w_player_quest_change::quest_id() const {
  return quest_id_;
}
inline void packetl2w_player_quest_change::set_quest_id(::google::protobuf::uint32 value) {
  set_has_quest_id();
  quest_id_ = value;
}

// optional fixed32 q_count = 4 [default = 1];
inline bool packetl2w_player_quest_change::has_q_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2w_player_quest_change::set_has_q_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2w_player_quest_change::clear_has_q_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2w_player_quest_change::clear_q_count() {
  q_count_ = 1u;
  clear_has_q_count();
}
inline ::google::protobuf::uint32 packetl2w_player_quest_change::q_count() const {
  return q_count_;
}
inline void packetl2w_player_quest_change::set_q_count(::google::protobuf::uint32 value) {
  set_has_q_count();
  q_count_ = value;
}

// optional fixed32 ex_param = 5 [default = 0];
inline bool packetl2w_player_quest_change::has_ex_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2w_player_quest_change::set_has_ex_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2w_player_quest_change::clear_has_ex_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2w_player_quest_change::clear_ex_param() {
  ex_param_ = 0u;
  clear_has_ex_param();
}
inline ::google::protobuf::uint32 packetl2w_player_quest_change::ex_param() const {
  return ex_param_;
}
inline void packetl2w_player_quest_change::set_ex_param(::google::protobuf::uint32 value) {
  set_has_ex_param();
  ex_param_ = value;
}

// -------------------------------------------------------------------

// packetl2w_player_star_change

// optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_star_change];
inline bool packetl2w_player_star_change::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2w_player_star_change::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2w_player_star_change::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2w_player_star_change::clear_packet_id() {
  packet_id_ = 20014;
  clear_has_packet_id();
}
inline ::logic2world_protocols::e_server_msg_type packetl2w_player_star_change::packet_id() const {
  return static_cast< ::logic2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2w_player_star_change::set_packet_id(::logic2world_protocols::e_server_msg_type value) {
  assert(::logic2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional fixed32 player_id = 2;
inline bool packetl2w_player_star_change::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2w_player_star_change::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2w_player_star_change::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2w_player_star_change::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 packetl2w_player_star_change::player_id() const {
  return player_id_;
}
inline void packetl2w_player_star_change::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional fixed32 addstar = 3 [default = 0];
inline bool packetl2w_player_star_change::has_addstar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2w_player_star_change::set_has_addstar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2w_player_star_change::clear_has_addstar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2w_player_star_change::clear_addstar() {
  addstar_ = 0u;
  clear_has_addstar();
}
inline ::google::protobuf::uint32 packetl2w_player_star_change::addstar() const {
  return addstar_;
}
inline void packetl2w_player_star_change::set_addstar(::google::protobuf::uint32 value) {
  set_has_addstar();
  addstar_ = value;
}

// optional fixed32 addaward = 4 [default = 0];
inline bool packetl2w_player_star_change::has_addaward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2w_player_star_change::set_has_addaward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2w_player_star_change::clear_has_addaward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2w_player_star_change::clear_addaward() {
  addaward_ = 0u;
  clear_has_addaward();
}
inline ::google::protobuf::uint32 packetl2w_player_star_change::addaward() const {
  return addaward_;
}
inline void packetl2w_player_star_change::set_addaward(::google::protobuf::uint32 value) {
  set_has_addaward();
  addaward_ = value;
}

// -------------------------------------------------------------------

// packagel2w_p_game_status_change

// optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_msg_12w_p_game_status_change];
inline bool packagel2w_p_game_status_change::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packagel2w_p_game_status_change::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packagel2w_p_game_status_change::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packagel2w_p_game_status_change::clear_packet_id() {
  packet_id_ = 20015;
  clear_has_packet_id();
}
inline ::logic2world_protocols::e_server_msg_type packagel2w_p_game_status_change::packet_id() const {
  return static_cast< ::logic2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packagel2w_p_game_status_change::set_packet_id(::logic2world_protocols::e_server_msg_type value) {
  assert(::logic2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
}

// optional fixed32 player_id = 2;
inline bool packagel2w_p_game_status_change::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packagel2w_p_game_status_change::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packagel2w_p_game_status_change::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packagel2w_p_game_status_change::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 packagel2w_p_game_status_change::player_id() const {
  return player_id_;
}
inline void packagel2w_p_game_status_change::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional fixed32 game_id = 3;
inline bool packagel2w_p_game_status_change::has_game_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packagel2w_p_game_status_change::set_has_game_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packagel2w_p_game_status_change::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packagel2w_p_game_status_change::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 packagel2w_p_game_status_change::game_id() const {
  return game_id_;
}
inline void packagel2w_p_game_status_change::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional fixed32 room_id = 4;
inline bool packagel2w_p_game_status_change::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packagel2w_p_game_status_change::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packagel2w_p_game_status_change::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packagel2w_p_game_status_change::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
inline ::google::protobuf::uint32 packagel2w_p_game_status_change::room_id() const {
  return room_id_;
}
inline void packagel2w_p_game_status_change::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional fixed32 table_id = 5;
inline bool packagel2w_p_game_status_change::has_table_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packagel2w_p_game_status_change::set_has_table_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packagel2w_p_game_status_change::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packagel2w_p_game_status_change::clear_table_id() {
  table_id_ = 0u;
  clear_has_table_id();
}
inline ::google::protobuf::uint32 packagel2w_p_game_status_change::table_id() const {
  return table_id_;
}
inline void packagel2w_p_game_status_change::set_table_id(::google::protobuf::uint32 value) {
  set_has_table_id();
  table_id_ = value;
}

// optional fixed32 chair_id = 6;
inline bool packagel2w_p_game_status_change::has_chair_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packagel2w_p_game_status_change::set_has_chair_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packagel2w_p_game_status_change::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packagel2w_p_game_status_change::clear_chair_id() {
  chair_id_ = 0u;
  clear_has_chair_id();
}
inline ::google::protobuf::uint32 packagel2w_p_game_status_change::chair_id() const {
  return chair_id_;
}
inline void packagel2w_p_game_status_change::set_chair_id(::google::protobuf::uint32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional fixed32 user_status = 7;
inline bool packagel2w_p_game_status_change::has_user_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packagel2w_p_game_status_change::set_has_user_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packagel2w_p_game_status_change::clear_has_user_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packagel2w_p_game_status_change::clear_user_status() {
  user_status_ = 0u;
  clear_has_user_status();
}
inline ::google::protobuf::uint32 packagel2w_p_game_status_change::user_status() const {
  return user_status_;
}
inline void packagel2w_p_game_status_change::set_user_status(::google::protobuf::uint32 value) {
  set_has_user_status();
  user_status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace logic2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logic2world_5fprotocol_2eproto__INCLUDED
