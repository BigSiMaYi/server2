// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logic2logsvr_msg_type.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "logic2logsvr_msg_type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace logic2logsvr {

namespace {

const ::google::protobuf::Descriptor* PlayerFlags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerFlags_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoZJH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoZJH_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZJHGameLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZJHGameLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishBulletInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishBulletInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishFireInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishFireInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishHitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishHitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoFish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoFish_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishGameLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishGameLog_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_logic2logsvr_5fmsg_5ftype_2eproto() {
  protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "logic2logsvr_msg_type.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerFlags_descriptor_ = file->message_type(0);
  static const int PlayerFlags_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, winp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, flagss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, opcoeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, flagsmoneylit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, curmoneyget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, gmopflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, sendcoincnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, recvcoincnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, rechargecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, withdrawcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, flagsy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, flagsx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, safebag_),
  };
  PlayerFlags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerFlags_descriptor_,
      PlayerFlags::default_instance_,
      PlayerFlags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerFlags));
  OptInfo_descriptor_ = file->message_type(1);
  static const int OptInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptInfo, vargold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptInfo, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptInfo, cardout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptInfo, curgamestage_),
  };
  OptInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OptInfo_descriptor_,
      OptInfo::default_instance_,
      OptInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OptInfo));
  PlayerInfoZJH_descriptor_ = file->message_type(2);
  static const int PlayerInfoZJH_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, goldbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, goldend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, cardhand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, optarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, pflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, isrobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, vargold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, vartime_),
  };
  PlayerInfoZJH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfoZJH_descriptor_,
      PlayerInfoZJH::default_instance_,
      PlayerInfoZJH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoZJH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfoZJH));
  GameInfo_descriptor_ = file->message_type(3);
  static const int GameInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, seatid_),
  };
  GameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameInfo_descriptor_,
      GameInfo::default_instance_,
      GameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameInfo));
  ZJHGameLog_descriptor_ = file->message_type(4);
  static const int ZJHGameLog_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZJHGameLog, gameroundindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZJHGameLog, pinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZJHGameLog, ginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZJHGameLog, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZJHGameLog, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZJHGameLog, vartime_),
  };
  ZJHGameLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZJHGameLog_descriptor_,
      ZJHGameLog::default_instance_,
      ZJHGameLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZJHGameLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZJHGameLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZJHGameLog));
  FishBulletInfo_descriptor_ = file->message_type(5);
  static const int FishBulletInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishBulletInfo, bulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishBulletInfo, bullettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishBulletInfo, bulletrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishBulletInfo, bulletlefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishBulletInfo, bullethitcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishBulletInfo, firetime_),
  };
  FishBulletInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishBulletInfo_descriptor_,
      FishBulletInfo::default_instance_,
      FishBulletInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishBulletInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishBulletInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishBulletInfo));
  FishFireInfo_descriptor_ = file->message_type(6);
  static const int FishFireInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishFireInfo, goldfirebefore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishFireInfo, goldfireafter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishFireInfo, fbullettinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishFireInfo, commission_),
  };
  FishFireInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishFireInfo_descriptor_,
      FishFireInfo::default_instance_,
      FishFireInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishFireInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishFireInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishFireInfo));
  FishHitInfo_descriptor_ = file->message_type(7);
  static const int FishHitInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, turretpowertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, ishited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, fishprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, natureprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, deadfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, deadfishmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, fishhitbinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, hittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, lockfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, turretrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, fishidindex_),
  };
  FishHitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishHitInfo_descriptor_,
      FishHitInfo::default_instance_,
      FishHitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishHitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishHitInfo));
  PlayerInfoFish_descriptor_ = file->message_type(8);
  static const int PlayerInfoFish_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoFish, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoFish, goldbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoFish, goldend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoFish, pflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoFish, luckvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoFish, isrobot_),
  };
  PlayerInfoFish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfoFish_descriptor_,
      PlayerInfoFish::default_instance_,
      PlayerInfoFish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoFish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoFish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfoFish));
  FishGameLog_descriptor_ = file->message_type(9);
  static const int FishGameLog_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGameLog, gameroundindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGameLog, pinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGameLog, ginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGameLog, fireinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGameLog, hitinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGameLog, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGameLog, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGameLog, vartime_),
  };
  FishGameLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishGameLog_descriptor_,
      FishGameLog::default_instance_,
      FishGameLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGameLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishGameLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishGameLog));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_logic2logsvr_5fmsg_5ftype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerFlags_descriptor_, &PlayerFlags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OptInfo_descriptor_, &OptInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfoZJH_descriptor_, &PlayerInfoZJH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameInfo_descriptor_, &GameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZJHGameLog_descriptor_, &ZJHGameLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishBulletInfo_descriptor_, &FishBulletInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishFireInfo_descriptor_, &FishFireInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishHitInfo_descriptor_, &FishHitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfoFish_descriptor_, &PlayerInfoFish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishGameLog_descriptor_, &FishGameLog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_logic2logsvr_5fmsg_5ftype_2eproto() {
  delete PlayerFlags::default_instance_;
  delete PlayerFlags_reflection_;
  delete OptInfo::default_instance_;
  delete OptInfo_reflection_;
  delete PlayerInfoZJH::default_instance_;
  delete PlayerInfoZJH_reflection_;
  delete GameInfo::default_instance_;
  delete GameInfo_reflection_;
  delete ZJHGameLog::default_instance_;
  delete ZJHGameLog_reflection_;
  delete FishBulletInfo::default_instance_;
  delete FishBulletInfo_reflection_;
  delete FishFireInfo::default_instance_;
  delete FishFireInfo_reflection_;
  delete FishHitInfo::default_instance_;
  delete FishHitInfo_reflection_;
  delete PlayerInfoFish::default_instance_;
  delete PlayerInfoFish_reflection_;
  delete FishGameLog::default_instance_;
  delete FishGameLog_reflection_;
}

void protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033logic2logsvr_msg_type.proto\022\014logic2log"
    "svr\"\217\002\n\013PlayerFlags\022\r\n\005Flags\030\001 \001(\005\022\014\n\004Wi"
    "nP\030\002 \001(\002\022\016\n\006FlagsS\030\003 \001(\010\022\017\n\007opCoeff\030\004 \001("
    "\002\022\025\n\rflagsMoneyLit\030\005 \001(\003\022\023\n\013CurMoneyGet\030"
    "\006 \001(\003\022\021\n\tGmOpFlags\030\007 \001(\005\022\023\n\013SendCoinCnt\030"
    "\010 \001(\003\022\023\n\013RecvCoinCnt\030\t \001(\003\022\023\n\013RechargeCn"
    "t\030\n \001(\003\022\023\n\013WithDrawCnt\030\013 \001(\003\022\016\n\006FlagsY\030\014"
    " \001(\005\022\016\n\006FlagsX\030\r \001(\003\022\017\n\007SafeBag\030\016 \001(\003\"N\n"
    "\007OptInfo\022\017\n\007VarGold\030\001 \001(\005\022\013\n\003Opt\030\002 \001(\005\022\017"
    "\n\007CardOut\030\003 \001(\014\022\024\n\014CurGameStage\030\004 \001(\005\"\241\002"
    "\n\rPlayerInfoZJH\022\013\n\003PID\030\001 \001(\005\022\021\n\tGoldBegi"
    "n\030\002 \001(\005\022\017\n\007GoldEnd\030\003 \001(\005\022\022\n\nCommission\030\004"
    " \001(\005\022\020\n\010CardHand\030\005 \001(\014\022\'\n\010OptArray\030\006 \003(\013"
    "2\025.logic2logsvr.OptInfo\022\016\n\006SeatID\030\007 \001(\005\022"
    ")\n\006PFlags\030\010 \001(\0132\031.logic2logsvr.PlayerFla"
    "gs\022\017\n\007IsRobot\030\t \001(\010\022\017\n\007VarGold\030\n \001(\005\022\021\n\t"
    "BeginTime\030\013 \001(\003\022\017\n\007EndTime\030\014 \001(\003\022\017\n\007VarT"
    "ime\030\r \001(\003\"K\n\010GameInfo\022\016\n\006GameID\030\001 \001(\005\022\016\n"
    "\006RoomID\030\002 \001(\005\022\017\n\007TableID\030\003 \001(\005\022\016\n\006SeatID"
    "\030\004 \001(\005\"\254\001\n\nZJHGameLog\022\026\n\016GameRoundIndex\030"
    "\001 \001(\t\022*\n\005PInfo\030\002 \003(\0132\033.logic2logsvr.Play"
    "erInfoZJH\022%\n\005GInfo\030\003 \001(\0132\026.logic2logsvr."
    "GameInfo\022\021\n\tBeginTime\030\004 \001(\003\022\017\n\007EndTime\030\005"
    " \001(\003\022\017\n\007VarTime\030\006 \001(\003\"\212\001\n\016FishBulletInfo"
    "\022\020\n\010BulletID\030\001 \001(\005\022\022\n\nBulletType\030\002 \001(\005\022\022"
    "\n\nBulletRate\030\003 \001(\005\022\026\n\016BulletLeftTime\030\004 \001"
    "(\001\022\024\n\014BulletHitCnt\030\005 \001(\005\022\020\n\010FireTime\030\006 \001"
    "(\003\"\205\001\n\014FishFireInfo\022\026\n\016GoldFireBefore\030\001 "
    "\001(\003\022\025\n\rGoldFireAfter\030\002 \001(\003\0222\n\014FBullettIn"
    "fo\030\003 \001(\0132\034.logic2logsvr.FishBulletInfo\022\022"
    "\n\nCommission\030\004 \001(\005\"\232\002\n\013FishHitInfo\022\027\n\017Tu"
    "rretPowerType\030\001 \001(\005\022\016\n\006FishID\030\002 \001(\005\022\017\n\007I"
    "sHited\030\003 \001(\005\022\020\n\010FishProb\030\004 \001(\005\022\022\n\nNature"
    "Prob\030\005 \001(\005\022\022\n\nDeadFishID\030\006 \003(\005\022\025\n\rDeadFi"
    "shMoney\030\007 \001(\003\0222\n\014FishHitBInfo\030\010 \001(\0132\034.lo"
    "gic2logsvr.FishBulletInfo\022\017\n\007HitTime\030\t \001"
    "(\003\022\022\n\nLockFishID\030\n \001(\005\022\022\n\nTurretRate\030\013 \001"
    "(\005\022\023\n\013FishIDIndex\030\014 \001(\005\"\220\001\n\016PlayerInfoFi"
    "sh\022\013\n\003PID\030\001 \001(\005\022\021\n\tGoldBegin\030\002 \001(\003\022\017\n\007Go"
    "ldEnd\030\003 \001(\003\022)\n\006PFlags\030\004 \001(\0132\031.logic2logs"
    "vr.PlayerFlags\022\021\n\tLuckValue\030\005 \001(\005\022\017\n\007IsR"
    "obot\030\006 \001(\010\"\210\002\n\013FishGameLog\022\026\n\016GameRoundI"
    "ndex\030\001 \001(\t\022+\n\005PInfo\030\002 \001(\0132\034.logic2logsvr"
    ".PlayerInfoFish\022%\n\005GInfo\030\003 \001(\0132\026.logic2l"
    "ogsvr.GameInfo\022,\n\010FireInfo\030\004 \003(\0132\032.logic"
    "2logsvr.FishFireInfo\022*\n\007HitInfo\030\005 \003(\0132\031."
    "logic2logsvr.FishHitInfo\022\021\n\tBeginTime\030\006 "
    "\001(\003\022\017\n\007EndTime\030\007 \001(\003\022\017\n\007VarTime\030\010 \001(\003", 1917);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "logic2logsvr_msg_type.proto", &protobuf_RegisterTypes);
  PlayerFlags::default_instance_ = new PlayerFlags();
  OptInfo::default_instance_ = new OptInfo();
  PlayerInfoZJH::default_instance_ = new PlayerInfoZJH();
  GameInfo::default_instance_ = new GameInfo();
  ZJHGameLog::default_instance_ = new ZJHGameLog();
  FishBulletInfo::default_instance_ = new FishBulletInfo();
  FishFireInfo::default_instance_ = new FishFireInfo();
  FishHitInfo::default_instance_ = new FishHitInfo();
  PlayerInfoFish::default_instance_ = new PlayerInfoFish();
  FishGameLog::default_instance_ = new FishGameLog();
  PlayerFlags::default_instance_->InitAsDefaultInstance();
  OptInfo::default_instance_->InitAsDefaultInstance();
  PlayerInfoZJH::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  ZJHGameLog::default_instance_->InitAsDefaultInstance();
  FishBulletInfo::default_instance_->InitAsDefaultInstance();
  FishFireInfo::default_instance_->InitAsDefaultInstance();
  FishHitInfo::default_instance_->InitAsDefaultInstance();
  PlayerInfoFish::default_instance_->InitAsDefaultInstance();
  FishGameLog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_logic2logsvr_5fmsg_5ftype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_logic2logsvr_5fmsg_5ftype_2eproto {
  StaticDescriptorInitializer_logic2logsvr_5fmsg_5ftype_2eproto() {
    protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  }
} static_descriptor_initializer_logic2logsvr_5fmsg_5ftype_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerFlags::kFlagsFieldNumber;
const int PlayerFlags::kWinPFieldNumber;
const int PlayerFlags::kFlagsSFieldNumber;
const int PlayerFlags::kOpCoeffFieldNumber;
const int PlayerFlags::kFlagsMoneyLitFieldNumber;
const int PlayerFlags::kCurMoneyGetFieldNumber;
const int PlayerFlags::kGmOpFlagsFieldNumber;
const int PlayerFlags::kSendCoinCntFieldNumber;
const int PlayerFlags::kRecvCoinCntFieldNumber;
const int PlayerFlags::kRechargeCntFieldNumber;
const int PlayerFlags::kWithDrawCntFieldNumber;
const int PlayerFlags::kFlagsYFieldNumber;
const int PlayerFlags::kFlagsXFieldNumber;
const int PlayerFlags::kSafeBagFieldNumber;
#endif  // !_MSC_VER

PlayerFlags::PlayerFlags()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerFlags::InitAsDefaultInstance() {
}

PlayerFlags::PlayerFlags(const PlayerFlags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerFlags::SharedCtor() {
  _cached_size_ = 0;
  flags_ = 0;
  winp_ = 0;
  flagss_ = false;
  opcoeff_ = 0;
  flagsmoneylit_ = GOOGLE_LONGLONG(0);
  curmoneyget_ = GOOGLE_LONGLONG(0);
  gmopflags_ = 0;
  sendcoincnt_ = GOOGLE_LONGLONG(0);
  recvcoincnt_ = GOOGLE_LONGLONG(0);
  rechargecnt_ = GOOGLE_LONGLONG(0);
  withdrawcnt_ = GOOGLE_LONGLONG(0);
  flagsy_ = 0;
  flagsx_ = GOOGLE_LONGLONG(0);
  safebag_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerFlags::~PlayerFlags() {
  SharedDtor();
}

void PlayerFlags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerFlags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerFlags_descriptor_;
}

const PlayerFlags& PlayerFlags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

PlayerFlags* PlayerFlags::default_instance_ = NULL;

PlayerFlags* PlayerFlags::New() const {
  return new PlayerFlags;
}

void PlayerFlags::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flags_ = 0;
    winp_ = 0;
    flagss_ = false;
    opcoeff_ = 0;
    flagsmoneylit_ = GOOGLE_LONGLONG(0);
    curmoneyget_ = GOOGLE_LONGLONG(0);
    gmopflags_ = 0;
    sendcoincnt_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    recvcoincnt_ = GOOGLE_LONGLONG(0);
    rechargecnt_ = GOOGLE_LONGLONG(0);
    withdrawcnt_ = GOOGLE_LONGLONG(0);
    flagsy_ = 0;
    flagsx_ = GOOGLE_LONGLONG(0);
    safebag_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Flags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_WinP;
        break;
      }

      // optional float WinP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_WinP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winp_)));
          set_has_winp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FlagsS;
        break;
      }

      // optional bool FlagsS = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FlagsS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flagss_)));
          set_has_flagss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_opCoeff;
        break;
      }

      // optional float opCoeff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_opCoeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opcoeff_)));
          set_has_opcoeff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flagsMoneyLit;
        break;
      }

      // optional int64 flagsMoneyLit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flagsMoneyLit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flagsmoneylit_)));
          set_has_flagsmoneylit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CurMoneyGet;
        break;
      }

      // optional int64 CurMoneyGet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurMoneyGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curmoneyget_)));
          set_has_curmoneyget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_GmOpFlags;
        break;
      }

      // optional int32 GmOpFlags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GmOpFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gmopflags_)));
          set_has_gmopflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_SendCoinCnt;
        break;
      }

      // optional int64 SendCoinCnt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SendCoinCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendcoincnt_)));
          set_has_sendcoincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_RecvCoinCnt;
        break;
      }

      // optional int64 RecvCoinCnt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RecvCoinCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recvcoincnt_)));
          set_has_recvcoincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_RechargeCnt;
        break;
      }

      // optional int64 RechargeCnt = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RechargeCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rechargecnt_)));
          set_has_rechargecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_WithDrawCnt;
        break;
      }

      // optional int64 WithDrawCnt = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WithDrawCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &withdrawcnt_)));
          set_has_withdrawcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_FlagsY;
        break;
      }

      // optional int32 FlagsY = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FlagsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flagsy_)));
          set_has_flagsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_FlagsX;
        break;
      }

      // optional int64 FlagsX = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FlagsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flagsx_)));
          set_has_flagsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_SafeBag;
        break;
      }

      // optional int64 SafeBag = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SafeBag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &safebag_)));
          set_has_safebag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Flags = 1;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flags(), output);
  }

  // optional float WinP = 2;
  if (has_winp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->winp(), output);
  }

  // optional bool FlagsS = 3;
  if (has_flagss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flagss(), output);
  }

  // optional float opCoeff = 4;
  if (has_opcoeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->opcoeff(), output);
  }

  // optional int64 flagsMoneyLit = 5;
  if (has_flagsmoneylit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->flagsmoneylit(), output);
  }

  // optional int64 CurMoneyGet = 6;
  if (has_curmoneyget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->curmoneyget(), output);
  }

  // optional int32 GmOpFlags = 7;
  if (has_gmopflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gmopflags(), output);
  }

  // optional int64 SendCoinCnt = 8;
  if (has_sendcoincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->sendcoincnt(), output);
  }

  // optional int64 RecvCoinCnt = 9;
  if (has_recvcoincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->recvcoincnt(), output);
  }

  // optional int64 RechargeCnt = 10;
  if (has_rechargecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->rechargecnt(), output);
  }

  // optional int64 WithDrawCnt = 11;
  if (has_withdrawcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->withdrawcnt(), output);
  }

  // optional int32 FlagsY = 12;
  if (has_flagsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->flagsy(), output);
  }

  // optional int64 FlagsX = 13;
  if (has_flagsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->flagsx(), output);
  }

  // optional int64 SafeBag = 14;
  if (has_safebag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->safebag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerFlags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Flags = 1;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flags(), target);
  }

  // optional float WinP = 2;
  if (has_winp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->winp(), target);
  }

  // optional bool FlagsS = 3;
  if (has_flagss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flagss(), target);
  }

  // optional float opCoeff = 4;
  if (has_opcoeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->opcoeff(), target);
  }

  // optional int64 flagsMoneyLit = 5;
  if (has_flagsmoneylit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->flagsmoneylit(), target);
  }

  // optional int64 CurMoneyGet = 6;
  if (has_curmoneyget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->curmoneyget(), target);
  }

  // optional int32 GmOpFlags = 7;
  if (has_gmopflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gmopflags(), target);
  }

  // optional int64 SendCoinCnt = 8;
  if (has_sendcoincnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->sendcoincnt(), target);
  }

  // optional int64 RecvCoinCnt = 9;
  if (has_recvcoincnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->recvcoincnt(), target);
  }

  // optional int64 RechargeCnt = 10;
  if (has_rechargecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->rechargecnt(), target);
  }

  // optional int64 WithDrawCnt = 11;
  if (has_withdrawcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->withdrawcnt(), target);
  }

  // optional int32 FlagsY = 12;
  if (has_flagsy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->flagsy(), target);
  }

  // optional int64 FlagsX = 13;
  if (has_flagsx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->flagsx(), target);
  }

  // optional int64 SafeBag = 14;
  if (has_safebag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->safebag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerFlags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Flags = 1;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional float WinP = 2;
    if (has_winp()) {
      total_size += 1 + 4;
    }

    // optional bool FlagsS = 3;
    if (has_flagss()) {
      total_size += 1 + 1;
    }

    // optional float opCoeff = 4;
    if (has_opcoeff()) {
      total_size += 1 + 4;
    }

    // optional int64 flagsMoneyLit = 5;
    if (has_flagsmoneylit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->flagsmoneylit());
    }

    // optional int64 CurMoneyGet = 6;
    if (has_curmoneyget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curmoneyget());
    }

    // optional int32 GmOpFlags = 7;
    if (has_gmopflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gmopflags());
    }

    // optional int64 SendCoinCnt = 8;
    if (has_sendcoincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendcoincnt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 RecvCoinCnt = 9;
    if (has_recvcoincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recvcoincnt());
    }

    // optional int64 RechargeCnt = 10;
    if (has_rechargecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rechargecnt());
    }

    // optional int64 WithDrawCnt = 11;
    if (has_withdrawcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->withdrawcnt());
    }

    // optional int32 FlagsY = 12;
    if (has_flagsy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flagsy());
    }

    // optional int64 FlagsX = 13;
    if (has_flagsx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->flagsx());
    }

    // optional int64 SafeBag = 14;
    if (has_safebag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->safebag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerFlags::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerFlags* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerFlags*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerFlags::MergeFrom(const PlayerFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_winp()) {
      set_winp(from.winp());
    }
    if (from.has_flagss()) {
      set_flagss(from.flagss());
    }
    if (from.has_opcoeff()) {
      set_opcoeff(from.opcoeff());
    }
    if (from.has_flagsmoneylit()) {
      set_flagsmoneylit(from.flagsmoneylit());
    }
    if (from.has_curmoneyget()) {
      set_curmoneyget(from.curmoneyget());
    }
    if (from.has_gmopflags()) {
      set_gmopflags(from.gmopflags());
    }
    if (from.has_sendcoincnt()) {
      set_sendcoincnt(from.sendcoincnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_recvcoincnt()) {
      set_recvcoincnt(from.recvcoincnt());
    }
    if (from.has_rechargecnt()) {
      set_rechargecnt(from.rechargecnt());
    }
    if (from.has_withdrawcnt()) {
      set_withdrawcnt(from.withdrawcnt());
    }
    if (from.has_flagsy()) {
      set_flagsy(from.flagsy());
    }
    if (from.has_flagsx()) {
      set_flagsx(from.flagsx());
    }
    if (from.has_safebag()) {
      set_safebag(from.safebag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerFlags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFlags::CopyFrom(const PlayerFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFlags::IsInitialized() const {

  return true;
}

void PlayerFlags::Swap(PlayerFlags* other) {
  if (other != this) {
    std::swap(flags_, other->flags_);
    std::swap(winp_, other->winp_);
    std::swap(flagss_, other->flagss_);
    std::swap(opcoeff_, other->opcoeff_);
    std::swap(flagsmoneylit_, other->flagsmoneylit_);
    std::swap(curmoneyget_, other->curmoneyget_);
    std::swap(gmopflags_, other->gmopflags_);
    std::swap(sendcoincnt_, other->sendcoincnt_);
    std::swap(recvcoincnt_, other->recvcoincnt_);
    std::swap(rechargecnt_, other->rechargecnt_);
    std::swap(withdrawcnt_, other->withdrawcnt_);
    std::swap(flagsy_, other->flagsy_);
    std::swap(flagsx_, other->flagsx_);
    std::swap(safebag_, other->safebag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerFlags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerFlags_descriptor_;
  metadata.reflection = PlayerFlags_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OptInfo::kVarGoldFieldNumber;
const int OptInfo::kOptFieldNumber;
const int OptInfo::kCardOutFieldNumber;
const int OptInfo::kCurGameStageFieldNumber;
#endif  // !_MSC_VER

OptInfo::OptInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OptInfo::InitAsDefaultInstance() {
}

OptInfo::OptInfo(const OptInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OptInfo::SharedCtor() {
  _cached_size_ = 0;
  vargold_ = 0;
  opt_ = 0;
  cardout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  curgamestage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptInfo::~OptInfo() {
  SharedDtor();
}

void OptInfo::SharedDtor() {
  if (cardout_ != &::google::protobuf::internal::kEmptyString) {
    delete cardout_;
  }
  if (this != default_instance_) {
  }
}

void OptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptInfo_descriptor_;
}

const OptInfo& OptInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

OptInfo* OptInfo::default_instance_ = NULL;

OptInfo* OptInfo::New() const {
  return new OptInfo;
}

void OptInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vargold_ = 0;
    opt_ = 0;
    if (has_cardout()) {
      if (cardout_ != &::google::protobuf::internal::kEmptyString) {
        cardout_->clear();
      }
    }
    curgamestage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 VarGold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vargold_)));
          set_has_vargold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Opt;
        break;
      }

      // optional int32 Opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CardOut;
        break;
      }

      // optional bytes CardOut = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardOut:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cardout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CurGameStage;
        break;
      }

      // optional int32 CurGameStage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurGameStage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curgamestage_)));
          set_has_curgamestage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 VarGold = 1;
  if (has_vargold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vargold(), output);
  }

  // optional int32 Opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt(), output);
  }

  // optional bytes CardOut = 3;
  if (has_cardout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->cardout(), output);
  }

  // optional int32 CurGameStage = 4;
  if (has_curgamestage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curgamestage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OptInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 VarGold = 1;
  if (has_vargold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vargold(), target);
  }

  // optional int32 Opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt(), target);
  }

  // optional bytes CardOut = 3;
  if (has_cardout()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cardout(), target);
  }

  // optional int32 CurGameStage = 4;
  if (has_curgamestage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curgamestage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OptInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 VarGold = 1;
    if (has_vargold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vargold());
    }

    // optional int32 Opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional bytes CardOut = 3;
    if (has_cardout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cardout());
    }

    // optional int32 CurGameStage = 4;
    if (has_curgamestage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curgamestage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OptInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OptInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OptInfo::MergeFrom(const OptInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vargold()) {
      set_vargold(from.vargold());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_cardout()) {
      set_cardout(from.cardout());
    }
    if (from.has_curgamestage()) {
      set_curgamestage(from.curgamestage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OptInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptInfo::CopyFrom(const OptInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptInfo::IsInitialized() const {

  return true;
}

void OptInfo::Swap(OptInfo* other) {
  if (other != this) {
    std::swap(vargold_, other->vargold_);
    std::swap(opt_, other->opt_);
    std::swap(cardout_, other->cardout_);
    std::swap(curgamestage_, other->curgamestage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OptInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptInfo_descriptor_;
  metadata.reflection = OptInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfoZJH::kPIDFieldNumber;
const int PlayerInfoZJH::kGoldBeginFieldNumber;
const int PlayerInfoZJH::kGoldEndFieldNumber;
const int PlayerInfoZJH::kCommissionFieldNumber;
const int PlayerInfoZJH::kCardHandFieldNumber;
const int PlayerInfoZJH::kOptArrayFieldNumber;
const int PlayerInfoZJH::kSeatIDFieldNumber;
const int PlayerInfoZJH::kPFlagsFieldNumber;
const int PlayerInfoZJH::kIsRobotFieldNumber;
const int PlayerInfoZJH::kVarGoldFieldNumber;
const int PlayerInfoZJH::kBeginTimeFieldNumber;
const int PlayerInfoZJH::kEndTimeFieldNumber;
const int PlayerInfoZJH::kVarTimeFieldNumber;
#endif  // !_MSC_VER

PlayerInfoZJH::PlayerInfoZJH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfoZJH::InitAsDefaultInstance() {
  pflags_ = const_cast< ::logic2logsvr::PlayerFlags*>(&::logic2logsvr::PlayerFlags::default_instance());
}

PlayerInfoZJH::PlayerInfoZJH(const PlayerInfoZJH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfoZJH::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  goldbegin_ = 0;
  goldend_ = 0;
  commission_ = 0;
  cardhand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seatid_ = 0;
  pflags_ = NULL;
  isrobot_ = false;
  vargold_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  vartime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoZJH::~PlayerInfoZJH() {
  SharedDtor();
}

void PlayerInfoZJH::SharedDtor() {
  if (cardhand_ != &::google::protobuf::internal::kEmptyString) {
    delete cardhand_;
  }
  if (this != default_instance_) {
    delete pflags_;
  }
}

void PlayerInfoZJH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoZJH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoZJH_descriptor_;
}

const PlayerInfoZJH& PlayerInfoZJH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

PlayerInfoZJH* PlayerInfoZJH::default_instance_ = NULL;

PlayerInfoZJH* PlayerInfoZJH::New() const {
  return new PlayerInfoZJH;
}

void PlayerInfoZJH::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0;
    goldbegin_ = 0;
    goldend_ = 0;
    commission_ = 0;
    if (has_cardhand()) {
      if (cardhand_ != &::google::protobuf::internal::kEmptyString) {
        cardhand_->clear();
      }
    }
    seatid_ = 0;
    if (has_pflags()) {
      if (pflags_ != NULL) pflags_->::logic2logsvr::PlayerFlags::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isrobot_ = false;
    vargold_ = 0;
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    vartime_ = GOOGLE_LONGLONG(0);
  }
  optarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfoZJH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GoldBegin;
        break;
      }

      // optional int32 GoldBegin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoldBegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldbegin_)));
          set_has_goldbegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GoldEnd;
        break;
      }

      // optional int32 GoldEnd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoldEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldend_)));
          set_has_goldend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Commission;
        break;
      }

      // optional int32 Commission = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commission_)));
          set_has_commission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CardHand;
        break;
      }

      // optional bytes CardHand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardHand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cardhand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_OptArray;
        break;
      }

      // repeated .logic2logsvr.OptInfo OptArray = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OptArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_optarray()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_OptArray;
        if (input->ExpectTag(56)) goto parse_SeatID;
        break;
      }

      // optional int32 SeatID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SeatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_PFlags;
        break;
      }

      // optional .logic2logsvr.PlayerFlags PFlags = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PFlags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pflags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsRobot;
        break;
      }

      // optional bool IsRobot = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_VarGold;
        break;
      }

      // optional int32 VarGold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VarGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vargold_)));
          set_has_vargold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_BeginTime;
        break;
      }

      // optional int64 BeginTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_EndTime;
        break;
      }

      // optional int64 EndTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_VarTime;
        break;
      }

      // optional int64 VarTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VarTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vartime_)));
          set_has_vartime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfoZJH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PID = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional int32 GoldBegin = 2;
  if (has_goldbegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goldbegin(), output);
  }

  // optional int32 GoldEnd = 3;
  if (has_goldend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goldend(), output);
  }

  // optional int32 Commission = 4;
  if (has_commission()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->commission(), output);
  }

  // optional bytes CardHand = 5;
  if (has_cardhand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->cardhand(), output);
  }

  // repeated .logic2logsvr.OptInfo OptArray = 6;
  for (int i = 0; i < this->optarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->optarray(i), output);
  }

  // optional int32 SeatID = 7;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->seatid(), output);
  }

  // optional .logic2logsvr.PlayerFlags PFlags = 8;
  if (has_pflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pflags(), output);
  }

  // optional bool IsRobot = 9;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isrobot(), output);
  }

  // optional int32 VarGold = 10;
  if (has_vargold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vargold(), output);
  }

  // optional int64 BeginTime = 11;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->begintime(), output);
  }

  // optional int64 EndTime = 12;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->endtime(), output);
  }

  // optional int64 VarTime = 13;
  if (has_vartime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->vartime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfoZJH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PID = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // optional int32 GoldBegin = 2;
  if (has_goldbegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goldbegin(), target);
  }

  // optional int32 GoldEnd = 3;
  if (has_goldend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goldend(), target);
  }

  // optional int32 Commission = 4;
  if (has_commission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->commission(), target);
  }

  // optional bytes CardHand = 5;
  if (has_cardhand()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->cardhand(), target);
  }

  // repeated .logic2logsvr.OptInfo OptArray = 6;
  for (int i = 0; i < this->optarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->optarray(i), target);
  }

  // optional int32 SeatID = 7;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->seatid(), target);
  }

  // optional .logic2logsvr.PlayerFlags PFlags = 8;
  if (has_pflags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pflags(), target);
  }

  // optional bool IsRobot = 9;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isrobot(), target);
  }

  // optional int32 VarGold = 10;
  if (has_vargold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vargold(), target);
  }

  // optional int64 BeginTime = 11;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->begintime(), target);
  }

  // optional int64 EndTime = 12;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->endtime(), target);
  }

  // optional int64 VarTime = 13;
  if (has_vartime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->vartime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfoZJH::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PID = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 GoldBegin = 2;
    if (has_goldbegin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldbegin());
    }

    // optional int32 GoldEnd = 3;
    if (has_goldend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldend());
    }

    // optional int32 Commission = 4;
    if (has_commission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commission());
    }

    // optional bytes CardHand = 5;
    if (has_cardhand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cardhand());
    }

    // optional int32 SeatID = 7;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional .logic2logsvr.PlayerFlags PFlags = 8;
    if (has_pflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pflags());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsRobot = 9;
    if (has_isrobot()) {
      total_size += 1 + 1;
    }

    // optional int32 VarGold = 10;
    if (has_vargold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vargold());
    }

    // optional int64 BeginTime = 11;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 EndTime = 12;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int64 VarTime = 13;
    if (has_vartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vartime());
    }

  }
  // repeated .logic2logsvr.OptInfo OptArray = 6;
  total_size += 1 * this->optarray_size();
  for (int i = 0; i < this->optarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoZJH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfoZJH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfoZJH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfoZJH::MergeFrom(const PlayerInfoZJH& from) {
  GOOGLE_CHECK_NE(&from, this);
  optarray_.MergeFrom(from.optarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_goldbegin()) {
      set_goldbegin(from.goldbegin());
    }
    if (from.has_goldend()) {
      set_goldend(from.goldend());
    }
    if (from.has_commission()) {
      set_commission(from.commission());
    }
    if (from.has_cardhand()) {
      set_cardhand(from.cardhand());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_pflags()) {
      mutable_pflags()->::logic2logsvr::PlayerFlags::MergeFrom(from.pflags());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
    if (from.has_vargold()) {
      set_vargold(from.vargold());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_vartime()) {
      set_vartime(from.vartime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfoZJH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoZJH::CopyFrom(const PlayerInfoZJH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoZJH::IsInitialized() const {

  return true;
}

void PlayerInfoZJH::Swap(PlayerInfoZJH* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(goldbegin_, other->goldbegin_);
    std::swap(goldend_, other->goldend_);
    std::swap(commission_, other->commission_);
    std::swap(cardhand_, other->cardhand_);
    optarray_.Swap(&other->optarray_);
    std::swap(seatid_, other->seatid_);
    std::swap(pflags_, other->pflags_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(vargold_, other->vargold_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(vartime_, other->vartime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfoZJH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoZJH_descriptor_;
  metadata.reflection = PlayerInfoZJH_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameInfo::kGameIDFieldNumber;
const int GameInfo::kRoomIDFieldNumber;
const int GameInfo::kTableIDFieldNumber;
const int GameInfo::kSeatIDFieldNumber;
#endif  // !_MSC_VER

GameInfo::GameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  roomid_ = 0;
  tableid_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_descriptor_;
}

const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New() const {
  return new GameInfo;
}

void GameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    roomid_ = 0;
    tableid_ = 0;
    seatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GameID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoomID;
        break;
      }

      // optional int32 RoomID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TableID;
        break;
      }

      // optional int32 TableID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SeatID;
        break;
      }

      // optional int32 SeatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SeatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 GameID = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 TableID = 3;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tableid(), output);
  }

  // optional int32 SeatID = 4;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 GameID = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 TableID = 3;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tableid(), target);
  }

  // optional int32 SeatID = 4;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GameID = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 RoomID = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 TableID = 3;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 SeatID = 4;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {

  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(roomid_, other->roomid_);
    std::swap(tableid_, other->tableid_);
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfo_descriptor_;
  metadata.reflection = GameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZJHGameLog::kGameRoundIndexFieldNumber;
const int ZJHGameLog::kPInfoFieldNumber;
const int ZJHGameLog::kGInfoFieldNumber;
const int ZJHGameLog::kBeginTimeFieldNumber;
const int ZJHGameLog::kEndTimeFieldNumber;
const int ZJHGameLog::kVarTimeFieldNumber;
#endif  // !_MSC_VER

ZJHGameLog::ZJHGameLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZJHGameLog::InitAsDefaultInstance() {
  ginfo_ = const_cast< ::logic2logsvr::GameInfo*>(&::logic2logsvr::GameInfo::default_instance());
}

ZJHGameLog::ZJHGameLog(const ZJHGameLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZJHGameLog::SharedCtor() {
  _cached_size_ = 0;
  gameroundindex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ginfo_ = NULL;
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  vartime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZJHGameLog::~ZJHGameLog() {
  SharedDtor();
}

void ZJHGameLog::SharedDtor() {
  if (gameroundindex_ != &::google::protobuf::internal::kEmptyString) {
    delete gameroundindex_;
  }
  if (this != default_instance_) {
    delete ginfo_;
  }
}

void ZJHGameLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZJHGameLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZJHGameLog_descriptor_;
}

const ZJHGameLog& ZJHGameLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

ZJHGameLog* ZJHGameLog::default_instance_ = NULL;

ZJHGameLog* ZJHGameLog::New() const {
  return new ZJHGameLog;
}

void ZJHGameLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameroundindex()) {
      if (gameroundindex_ != &::google::protobuf::internal::kEmptyString) {
        gameroundindex_->clear();
      }
    }
    if (has_ginfo()) {
      if (ginfo_ != NULL) ginfo_->::logic2logsvr::GameInfo::Clear();
    }
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    vartime_ = GOOGLE_LONGLONG(0);
  }
  pinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZJHGameLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GameRoundIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameroundindex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameroundindex().data(), this->gameroundindex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PInfo;
        break;
      }

      // repeated .logic2logsvr.PlayerInfoZJH PInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PInfo;
        if (input->ExpectTag(26)) goto parse_GInfo;
        break;
      }

      // optional .logic2logsvr.GameInfo GInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BeginTime;
        break;
      }

      // optional int64 BeginTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_EndTime;
        break;
      }

      // optional int64 EndTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VarTime;
        break;
      }

      // optional int64 VarTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VarTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vartime_)));
          set_has_vartime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZJHGameLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GameRoundIndex = 1;
  if (has_gameroundindex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameroundindex().data(), this->gameroundindex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gameroundindex(), output);
  }

  // repeated .logic2logsvr.PlayerInfoZJH PInfo = 2;
  for (int i = 0; i < this->pinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pinfo(i), output);
  }

  // optional .logic2logsvr.GameInfo GInfo = 3;
  if (has_ginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ginfo(), output);
  }

  // optional int64 BeginTime = 4;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->begintime(), output);
  }

  // optional int64 EndTime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->endtime(), output);
  }

  // optional int64 VarTime = 6;
  if (has_vartime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->vartime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZJHGameLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GameRoundIndex = 1;
  if (has_gameroundindex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameroundindex().data(), this->gameroundindex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gameroundindex(), target);
  }

  // repeated .logic2logsvr.PlayerInfoZJH PInfo = 2;
  for (int i = 0; i < this->pinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pinfo(i), target);
  }

  // optional .logic2logsvr.GameInfo GInfo = 3;
  if (has_ginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ginfo(), target);
  }

  // optional int64 BeginTime = 4;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->begintime(), target);
  }

  // optional int64 EndTime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->endtime(), target);
  }

  // optional int64 VarTime = 6;
  if (has_vartime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->vartime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZJHGameLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GameRoundIndex = 1;
    if (has_gameroundindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameroundindex());
    }

    // optional .logic2logsvr.GameInfo GInfo = 3;
    if (has_ginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ginfo());
    }

    // optional int64 BeginTime = 4;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 EndTime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int64 VarTime = 6;
    if (has_vartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vartime());
    }

  }
  // repeated .logic2logsvr.PlayerInfoZJH PInfo = 2;
  total_size += 1 * this->pinfo_size();
  for (int i = 0; i < this->pinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZJHGameLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZJHGameLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZJHGameLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZJHGameLog::MergeFrom(const ZJHGameLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  pinfo_.MergeFrom(from.pinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameroundindex()) {
      set_gameroundindex(from.gameroundindex());
    }
    if (from.has_ginfo()) {
      mutable_ginfo()->::logic2logsvr::GameInfo::MergeFrom(from.ginfo());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_vartime()) {
      set_vartime(from.vartime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZJHGameLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZJHGameLog::CopyFrom(const ZJHGameLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZJHGameLog::IsInitialized() const {

  return true;
}

void ZJHGameLog::Swap(ZJHGameLog* other) {
  if (other != this) {
    std::swap(gameroundindex_, other->gameroundindex_);
    pinfo_.Swap(&other->pinfo_);
    std::swap(ginfo_, other->ginfo_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(vartime_, other->vartime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZJHGameLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZJHGameLog_descriptor_;
  metadata.reflection = ZJHGameLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishBulletInfo::kBulletIDFieldNumber;
const int FishBulletInfo::kBulletTypeFieldNumber;
const int FishBulletInfo::kBulletRateFieldNumber;
const int FishBulletInfo::kBulletLeftTimeFieldNumber;
const int FishBulletInfo::kBulletHitCntFieldNumber;
const int FishBulletInfo::kFireTimeFieldNumber;
#endif  // !_MSC_VER

FishBulletInfo::FishBulletInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishBulletInfo::InitAsDefaultInstance() {
}

FishBulletInfo::FishBulletInfo(const FishBulletInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishBulletInfo::SharedCtor() {
  _cached_size_ = 0;
  bulletid_ = 0;
  bullettype_ = 0;
  bulletrate_ = 0;
  bulletlefttime_ = 0;
  bullethitcnt_ = 0;
  firetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishBulletInfo::~FishBulletInfo() {
  SharedDtor();
}

void FishBulletInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishBulletInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishBulletInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishBulletInfo_descriptor_;
}

const FishBulletInfo& FishBulletInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

FishBulletInfo* FishBulletInfo::default_instance_ = NULL;

FishBulletInfo* FishBulletInfo::New() const {
  return new FishBulletInfo;
}

void FishBulletInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bulletid_ = 0;
    bullettype_ = 0;
    bulletrate_ = 0;
    bulletlefttime_ = 0;
    bullethitcnt_ = 0;
    firetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishBulletInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BulletID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletid_)));
          set_has_bulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BulletType;
        break;
      }

      // optional int32 BulletType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullettype_)));
          set_has_bullettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BulletRate;
        break;
      }

      // optional int32 BulletRate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletrate_)));
          set_has_bulletrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_BulletLeftTime;
        break;
      }

      // optional double BulletLeftTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BulletLeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bulletlefttime_)));
          set_has_bulletlefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_BulletHitCnt;
        break;
      }

      // optional int32 BulletHitCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletHitCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullethitcnt_)));
          set_has_bullethitcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FireTime;
        break;
      }

      // optional int64 FireTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firetime_)));
          set_has_firetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishBulletInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 BulletID = 1;
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bulletid(), output);
  }

  // optional int32 BulletType = 2;
  if (has_bullettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bullettype(), output);
  }

  // optional int32 BulletRate = 3;
  if (has_bulletrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bulletrate(), output);
  }

  // optional double BulletLeftTime = 4;
  if (has_bulletlefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bulletlefttime(), output);
  }

  // optional int32 BulletHitCnt = 5;
  if (has_bullethitcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bullethitcnt(), output);
  }

  // optional int64 FireTime = 6;
  if (has_firetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->firetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishBulletInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 BulletID = 1;
  if (has_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bulletid(), target);
  }

  // optional int32 BulletType = 2;
  if (has_bullettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bullettype(), target);
  }

  // optional int32 BulletRate = 3;
  if (has_bulletrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bulletrate(), target);
  }

  // optional double BulletLeftTime = 4;
  if (has_bulletlefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bulletlefttime(), target);
  }

  // optional int32 BulletHitCnt = 5;
  if (has_bullethitcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bullethitcnt(), target);
  }

  // optional int64 FireTime = 6;
  if (has_firetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->firetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishBulletInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 BulletID = 1;
    if (has_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletid());
    }

    // optional int32 BulletType = 2;
    if (has_bullettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullettype());
    }

    // optional int32 BulletRate = 3;
    if (has_bulletrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletrate());
    }

    // optional double BulletLeftTime = 4;
    if (has_bulletlefttime()) {
      total_size += 1 + 8;
    }

    // optional int32 BulletHitCnt = 5;
    if (has_bullethitcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullethitcnt());
    }

    // optional int64 FireTime = 6;
    if (has_firetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->firetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishBulletInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishBulletInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishBulletInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishBulletInfo::MergeFrom(const FishBulletInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_bullettype()) {
      set_bullettype(from.bullettype());
    }
    if (from.has_bulletrate()) {
      set_bulletrate(from.bulletrate());
    }
    if (from.has_bulletlefttime()) {
      set_bulletlefttime(from.bulletlefttime());
    }
    if (from.has_bullethitcnt()) {
      set_bullethitcnt(from.bullethitcnt());
    }
    if (from.has_firetime()) {
      set_firetime(from.firetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishBulletInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishBulletInfo::CopyFrom(const FishBulletInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishBulletInfo::IsInitialized() const {

  return true;
}

void FishBulletInfo::Swap(FishBulletInfo* other) {
  if (other != this) {
    std::swap(bulletid_, other->bulletid_);
    std::swap(bullettype_, other->bullettype_);
    std::swap(bulletrate_, other->bulletrate_);
    std::swap(bulletlefttime_, other->bulletlefttime_);
    std::swap(bullethitcnt_, other->bullethitcnt_);
    std::swap(firetime_, other->firetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishBulletInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishBulletInfo_descriptor_;
  metadata.reflection = FishBulletInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishFireInfo::kGoldFireBeforeFieldNumber;
const int FishFireInfo::kGoldFireAfterFieldNumber;
const int FishFireInfo::kFBullettInfoFieldNumber;
const int FishFireInfo::kCommissionFieldNumber;
#endif  // !_MSC_VER

FishFireInfo::FishFireInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishFireInfo::InitAsDefaultInstance() {
  fbullettinfo_ = const_cast< ::logic2logsvr::FishBulletInfo*>(&::logic2logsvr::FishBulletInfo::default_instance());
}

FishFireInfo::FishFireInfo(const FishFireInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishFireInfo::SharedCtor() {
  _cached_size_ = 0;
  goldfirebefore_ = GOOGLE_LONGLONG(0);
  goldfireafter_ = GOOGLE_LONGLONG(0);
  fbullettinfo_ = NULL;
  commission_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishFireInfo::~FishFireInfo() {
  SharedDtor();
}

void FishFireInfo::SharedDtor() {
  if (this != default_instance_) {
    delete fbullettinfo_;
  }
}

void FishFireInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishFireInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishFireInfo_descriptor_;
}

const FishFireInfo& FishFireInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

FishFireInfo* FishFireInfo::default_instance_ = NULL;

FishFireInfo* FishFireInfo::New() const {
  return new FishFireInfo;
}

void FishFireInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goldfirebefore_ = GOOGLE_LONGLONG(0);
    goldfireafter_ = GOOGLE_LONGLONG(0);
    if (has_fbullettinfo()) {
      if (fbullettinfo_ != NULL) fbullettinfo_->::logic2logsvr::FishBulletInfo::Clear();
    }
    commission_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishFireInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 GoldFireBefore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goldfirebefore_)));
          set_has_goldfirebefore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GoldFireAfter;
        break;
      }

      // optional int64 GoldFireAfter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoldFireAfter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goldfireafter_)));
          set_has_goldfireafter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_FBullettInfo;
        break;
      }

      // optional .logic2logsvr.FishBulletInfo FBullettInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FBullettInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fbullettinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Commission;
        break;
      }

      // optional int32 Commission = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commission_)));
          set_has_commission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishFireInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 GoldFireBefore = 1;
  if (has_goldfirebefore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->goldfirebefore(), output);
  }

  // optional int64 GoldFireAfter = 2;
  if (has_goldfireafter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->goldfireafter(), output);
  }

  // optional .logic2logsvr.FishBulletInfo FBullettInfo = 3;
  if (has_fbullettinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fbullettinfo(), output);
  }

  // optional int32 Commission = 4;
  if (has_commission()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->commission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishFireInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 GoldFireBefore = 1;
  if (has_goldfirebefore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->goldfirebefore(), target);
  }

  // optional int64 GoldFireAfter = 2;
  if (has_goldfireafter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->goldfireafter(), target);
  }

  // optional .logic2logsvr.FishBulletInfo FBullettInfo = 3;
  if (has_fbullettinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fbullettinfo(), target);
  }

  // optional int32 Commission = 4;
  if (has_commission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->commission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishFireInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 GoldFireBefore = 1;
    if (has_goldfirebefore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goldfirebefore());
    }

    // optional int64 GoldFireAfter = 2;
    if (has_goldfireafter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goldfireafter());
    }

    // optional .logic2logsvr.FishBulletInfo FBullettInfo = 3;
    if (has_fbullettinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fbullettinfo());
    }

    // optional int32 Commission = 4;
    if (has_commission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commission());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishFireInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishFireInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishFireInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishFireInfo::MergeFrom(const FishFireInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goldfirebefore()) {
      set_goldfirebefore(from.goldfirebefore());
    }
    if (from.has_goldfireafter()) {
      set_goldfireafter(from.goldfireafter());
    }
    if (from.has_fbullettinfo()) {
      mutable_fbullettinfo()->::logic2logsvr::FishBulletInfo::MergeFrom(from.fbullettinfo());
    }
    if (from.has_commission()) {
      set_commission(from.commission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishFireInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishFireInfo::CopyFrom(const FishFireInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishFireInfo::IsInitialized() const {

  return true;
}

void FishFireInfo::Swap(FishFireInfo* other) {
  if (other != this) {
    std::swap(goldfirebefore_, other->goldfirebefore_);
    std::swap(goldfireafter_, other->goldfireafter_);
    std::swap(fbullettinfo_, other->fbullettinfo_);
    std::swap(commission_, other->commission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishFireInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishFireInfo_descriptor_;
  metadata.reflection = FishFireInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishHitInfo::kTurretPowerTypeFieldNumber;
const int FishHitInfo::kFishIDFieldNumber;
const int FishHitInfo::kIsHitedFieldNumber;
const int FishHitInfo::kFishProbFieldNumber;
const int FishHitInfo::kNatureProbFieldNumber;
const int FishHitInfo::kDeadFishIDFieldNumber;
const int FishHitInfo::kDeadFishMoneyFieldNumber;
const int FishHitInfo::kFishHitBInfoFieldNumber;
const int FishHitInfo::kHitTimeFieldNumber;
const int FishHitInfo::kLockFishIDFieldNumber;
const int FishHitInfo::kTurretRateFieldNumber;
const int FishHitInfo::kFishIDIndexFieldNumber;
#endif  // !_MSC_VER

FishHitInfo::FishHitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishHitInfo::InitAsDefaultInstance() {
  fishhitbinfo_ = const_cast< ::logic2logsvr::FishBulletInfo*>(&::logic2logsvr::FishBulletInfo::default_instance());
}

FishHitInfo::FishHitInfo(const FishHitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishHitInfo::SharedCtor() {
  _cached_size_ = 0;
  turretpowertype_ = 0;
  fishid_ = 0;
  ishited_ = 0;
  fishprob_ = 0;
  natureprob_ = 0;
  deadfishmoney_ = GOOGLE_LONGLONG(0);
  fishhitbinfo_ = NULL;
  hittime_ = GOOGLE_LONGLONG(0);
  lockfishid_ = 0;
  turretrate_ = 0;
  fishidindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishHitInfo::~FishHitInfo() {
  SharedDtor();
}

void FishHitInfo::SharedDtor() {
  if (this != default_instance_) {
    delete fishhitbinfo_;
  }
}

void FishHitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishHitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishHitInfo_descriptor_;
}

const FishHitInfo& FishHitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

FishHitInfo* FishHitInfo::default_instance_ = NULL;

FishHitInfo* FishHitInfo::New() const {
  return new FishHitInfo;
}

void FishHitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    turretpowertype_ = 0;
    fishid_ = 0;
    ishited_ = 0;
    fishprob_ = 0;
    natureprob_ = 0;
    deadfishmoney_ = GOOGLE_LONGLONG(0);
    if (has_fishhitbinfo()) {
      if (fishhitbinfo_ != NULL) fishhitbinfo_->::logic2logsvr::FishBulletInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hittime_ = GOOGLE_LONGLONG(0);
    lockfishid_ = 0;
    turretrate_ = 0;
    fishidindex_ = 0;
  }
  deadfishid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishHitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TurretPowerType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turretpowertype_)));
          set_has_turretpowertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FishID;
        break;
      }

      // optional int32 FishID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FishID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));
          set_has_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsHited;
        break;
      }

      // optional int32 IsHited = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishited_)));
          set_has_ishited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FishProb;
        break;
      }

      // optional int32 FishProb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FishProb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishprob_)));
          set_has_fishprob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_NatureProb;
        break;
      }

      // optional int32 NatureProb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NatureProb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &natureprob_)));
          set_has_natureprob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DeadFishID;
        break;
      }

      // repeated int32 DeadFishID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeadFishID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_deadfishid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deadfishid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DeadFishID;
        if (input->ExpectTag(56)) goto parse_DeadFishMoney;
        break;
      }

      // optional int64 DeadFishMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeadFishMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadfishmoney_)));
          set_has_deadfishmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_FishHitBInfo;
        break;
      }

      // optional .logic2logsvr.FishBulletInfo FishHitBInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FishHitBInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fishhitbinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_HitTime;
        break;
      }

      // optional int64 HitTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hittime_)));
          set_has_hittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LockFishID;
        break;
      }

      // optional int32 LockFishID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LockFishID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lockfishid_)));
          set_has_lockfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_TurretRate;
        break;
      }

      // optional int32 TurretRate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TurretRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turretrate_)));
          set_has_turretrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_FishIDIndex;
        break;
      }

      // optional int32 FishIDIndex = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FishIDIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishidindex_)));
          set_has_fishidindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishHitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 TurretPowerType = 1;
  if (has_turretpowertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->turretpowertype(), output);
  }

  // optional int32 FishID = 2;
  if (has_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fishid(), output);
  }

  // optional int32 IsHited = 3;
  if (has_ishited()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ishited(), output);
  }

  // optional int32 FishProb = 4;
  if (has_fishprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fishprob(), output);
  }

  // optional int32 NatureProb = 5;
  if (has_natureprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->natureprob(), output);
  }

  // repeated int32 DeadFishID = 6;
  for (int i = 0; i < this->deadfishid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->deadfishid(i), output);
  }

  // optional int64 DeadFishMoney = 7;
  if (has_deadfishmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->deadfishmoney(), output);
  }

  // optional .logic2logsvr.FishBulletInfo FishHitBInfo = 8;
  if (has_fishhitbinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fishhitbinfo(), output);
  }

  // optional int64 HitTime = 9;
  if (has_hittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->hittime(), output);
  }

  // optional int32 LockFishID = 10;
  if (has_lockfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lockfishid(), output);
  }

  // optional int32 TurretRate = 11;
  if (has_turretrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->turretrate(), output);
  }

  // optional int32 FishIDIndex = 12;
  if (has_fishidindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->fishidindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishHitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 TurretPowerType = 1;
  if (has_turretpowertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->turretpowertype(), target);
  }

  // optional int32 FishID = 2;
  if (has_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fishid(), target);
  }

  // optional int32 IsHited = 3;
  if (has_ishited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ishited(), target);
  }

  // optional int32 FishProb = 4;
  if (has_fishprob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fishprob(), target);
  }

  // optional int32 NatureProb = 5;
  if (has_natureprob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->natureprob(), target);
  }

  // repeated int32 DeadFishID = 6;
  for (int i = 0; i < this->deadfishid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->deadfishid(i), target);
  }

  // optional int64 DeadFishMoney = 7;
  if (has_deadfishmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->deadfishmoney(), target);
  }

  // optional .logic2logsvr.FishBulletInfo FishHitBInfo = 8;
  if (has_fishhitbinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fishhitbinfo(), target);
  }

  // optional int64 HitTime = 9;
  if (has_hittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->hittime(), target);
  }

  // optional int32 LockFishID = 10;
  if (has_lockfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lockfishid(), target);
  }

  // optional int32 TurretRate = 11;
  if (has_turretrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->turretrate(), target);
  }

  // optional int32 FishIDIndex = 12;
  if (has_fishidindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->fishidindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishHitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TurretPowerType = 1;
    if (has_turretpowertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turretpowertype());
    }

    // optional int32 FishID = 2;
    if (has_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishid());
    }

    // optional int32 IsHited = 3;
    if (has_ishited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishited());
    }

    // optional int32 FishProb = 4;
    if (has_fishprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishprob());
    }

    // optional int32 NatureProb = 5;
    if (has_natureprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->natureprob());
    }

    // optional int64 DeadFishMoney = 7;
    if (has_deadfishmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deadfishmoney());
    }

    // optional .logic2logsvr.FishBulletInfo FishHitBInfo = 8;
    if (has_fishhitbinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fishhitbinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 HitTime = 9;
    if (has_hittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hittime());
    }

    // optional int32 LockFishID = 10;
    if (has_lockfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lockfishid());
    }

    // optional int32 TurretRate = 11;
    if (has_turretrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turretrate());
    }

    // optional int32 FishIDIndex = 12;
    if (has_fishidindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishidindex());
    }

  }
  // repeated int32 DeadFishID = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->deadfishid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->deadfishid(i));
    }
    total_size += 1 * this->deadfishid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishHitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishHitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishHitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishHitInfo::MergeFrom(const FishHitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  deadfishid_.MergeFrom(from.deadfishid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_turretpowertype()) {
      set_turretpowertype(from.turretpowertype());
    }
    if (from.has_fishid()) {
      set_fishid(from.fishid());
    }
    if (from.has_ishited()) {
      set_ishited(from.ishited());
    }
    if (from.has_fishprob()) {
      set_fishprob(from.fishprob());
    }
    if (from.has_natureprob()) {
      set_natureprob(from.natureprob());
    }
    if (from.has_deadfishmoney()) {
      set_deadfishmoney(from.deadfishmoney());
    }
    if (from.has_fishhitbinfo()) {
      mutable_fishhitbinfo()->::logic2logsvr::FishBulletInfo::MergeFrom(from.fishhitbinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hittime()) {
      set_hittime(from.hittime());
    }
    if (from.has_lockfishid()) {
      set_lockfishid(from.lockfishid());
    }
    if (from.has_turretrate()) {
      set_turretrate(from.turretrate());
    }
    if (from.has_fishidindex()) {
      set_fishidindex(from.fishidindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishHitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishHitInfo::CopyFrom(const FishHitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishHitInfo::IsInitialized() const {

  return true;
}

void FishHitInfo::Swap(FishHitInfo* other) {
  if (other != this) {
    std::swap(turretpowertype_, other->turretpowertype_);
    std::swap(fishid_, other->fishid_);
    std::swap(ishited_, other->ishited_);
    std::swap(fishprob_, other->fishprob_);
    std::swap(natureprob_, other->natureprob_);
    deadfishid_.Swap(&other->deadfishid_);
    std::swap(deadfishmoney_, other->deadfishmoney_);
    std::swap(fishhitbinfo_, other->fishhitbinfo_);
    std::swap(hittime_, other->hittime_);
    std::swap(lockfishid_, other->lockfishid_);
    std::swap(turretrate_, other->turretrate_);
    std::swap(fishidindex_, other->fishidindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishHitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishHitInfo_descriptor_;
  metadata.reflection = FishHitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfoFish::kPIDFieldNumber;
const int PlayerInfoFish::kGoldBeginFieldNumber;
const int PlayerInfoFish::kGoldEndFieldNumber;
const int PlayerInfoFish::kPFlagsFieldNumber;
const int PlayerInfoFish::kLuckValueFieldNumber;
const int PlayerInfoFish::kIsRobotFieldNumber;
#endif  // !_MSC_VER

PlayerInfoFish::PlayerInfoFish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfoFish::InitAsDefaultInstance() {
  pflags_ = const_cast< ::logic2logsvr::PlayerFlags*>(&::logic2logsvr::PlayerFlags::default_instance());
}

PlayerInfoFish::PlayerInfoFish(const PlayerInfoFish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfoFish::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  goldbegin_ = GOOGLE_LONGLONG(0);
  goldend_ = GOOGLE_LONGLONG(0);
  pflags_ = NULL;
  luckvalue_ = 0;
  isrobot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoFish::~PlayerInfoFish() {
  SharedDtor();
}

void PlayerInfoFish::SharedDtor() {
  if (this != default_instance_) {
    delete pflags_;
  }
}

void PlayerInfoFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoFish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoFish_descriptor_;
}

const PlayerInfoFish& PlayerInfoFish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

PlayerInfoFish* PlayerInfoFish::default_instance_ = NULL;

PlayerInfoFish* PlayerInfoFish::New() const {
  return new PlayerInfoFish;
}

void PlayerInfoFish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0;
    goldbegin_ = GOOGLE_LONGLONG(0);
    goldend_ = GOOGLE_LONGLONG(0);
    if (has_pflags()) {
      if (pflags_ != NULL) pflags_->::logic2logsvr::PlayerFlags::Clear();
    }
    luckvalue_ = 0;
    isrobot_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfoFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GoldBegin;
        break;
      }

      // optional int64 GoldBegin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoldBegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goldbegin_)));
          set_has_goldbegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GoldEnd;
        break;
      }

      // optional int64 GoldEnd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoldEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goldend_)));
          set_has_goldend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PFlags;
        break;
      }

      // optional .logic2logsvr.PlayerFlags PFlags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PFlags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pflags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LuckValue;
        break;
      }

      // optional int32 LuckValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LuckValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luckvalue_)));
          set_has_luckvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsRobot;
        break;
      }

      // optional bool IsRobot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfoFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PID = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional int64 GoldBegin = 2;
  if (has_goldbegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->goldbegin(), output);
  }

  // optional int64 GoldEnd = 3;
  if (has_goldend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->goldend(), output);
  }

  // optional .logic2logsvr.PlayerFlags PFlags = 4;
  if (has_pflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pflags(), output);
  }

  // optional int32 LuckValue = 5;
  if (has_luckvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->luckvalue(), output);
  }

  // optional bool IsRobot = 6;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isrobot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfoFish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PID = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // optional int64 GoldBegin = 2;
  if (has_goldbegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->goldbegin(), target);
  }

  // optional int64 GoldEnd = 3;
  if (has_goldend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->goldend(), target);
  }

  // optional .logic2logsvr.PlayerFlags PFlags = 4;
  if (has_pflags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pflags(), target);
  }

  // optional int32 LuckValue = 5;
  if (has_luckvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->luckvalue(), target);
  }

  // optional bool IsRobot = 6;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isrobot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfoFish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PID = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int64 GoldBegin = 2;
    if (has_goldbegin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goldbegin());
    }

    // optional int64 GoldEnd = 3;
    if (has_goldend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goldend());
    }

    // optional .logic2logsvr.PlayerFlags PFlags = 4;
    if (has_pflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pflags());
    }

    // optional int32 LuckValue = 5;
    if (has_luckvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luckvalue());
    }

    // optional bool IsRobot = 6;
    if (has_isrobot()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoFish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfoFish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfoFish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfoFish::MergeFrom(const PlayerInfoFish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_goldbegin()) {
      set_goldbegin(from.goldbegin());
    }
    if (from.has_goldend()) {
      set_goldend(from.goldend());
    }
    if (from.has_pflags()) {
      mutable_pflags()->::logic2logsvr::PlayerFlags::MergeFrom(from.pflags());
    }
    if (from.has_luckvalue()) {
      set_luckvalue(from.luckvalue());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfoFish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoFish::CopyFrom(const PlayerInfoFish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoFish::IsInitialized() const {

  return true;
}

void PlayerInfoFish::Swap(PlayerInfoFish* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(goldbegin_, other->goldbegin_);
    std::swap(goldend_, other->goldend_);
    std::swap(pflags_, other->pflags_);
    std::swap(luckvalue_, other->luckvalue_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfoFish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoFish_descriptor_;
  metadata.reflection = PlayerInfoFish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishGameLog::kGameRoundIndexFieldNumber;
const int FishGameLog::kPInfoFieldNumber;
const int FishGameLog::kGInfoFieldNumber;
const int FishGameLog::kFireInfoFieldNumber;
const int FishGameLog::kHitInfoFieldNumber;
const int FishGameLog::kBeginTimeFieldNumber;
const int FishGameLog::kEndTimeFieldNumber;
const int FishGameLog::kVarTimeFieldNumber;
#endif  // !_MSC_VER

FishGameLog::FishGameLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishGameLog::InitAsDefaultInstance() {
  pinfo_ = const_cast< ::logic2logsvr::PlayerInfoFish*>(&::logic2logsvr::PlayerInfoFish::default_instance());
  ginfo_ = const_cast< ::logic2logsvr::GameInfo*>(&::logic2logsvr::GameInfo::default_instance());
}

FishGameLog::FishGameLog(const FishGameLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishGameLog::SharedCtor() {
  _cached_size_ = 0;
  gameroundindex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pinfo_ = NULL;
  ginfo_ = NULL;
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  vartime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishGameLog::~FishGameLog() {
  SharedDtor();
}

void FishGameLog::SharedDtor() {
  if (gameroundindex_ != &::google::protobuf::internal::kEmptyString) {
    delete gameroundindex_;
  }
  if (this != default_instance_) {
    delete pinfo_;
    delete ginfo_;
  }
}

void FishGameLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishGameLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishGameLog_descriptor_;
}

const FishGameLog& FishGameLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

FishGameLog* FishGameLog::default_instance_ = NULL;

FishGameLog* FishGameLog::New() const {
  return new FishGameLog;
}

void FishGameLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameroundindex()) {
      if (gameroundindex_ != &::google::protobuf::internal::kEmptyString) {
        gameroundindex_->clear();
      }
    }
    if (has_pinfo()) {
      if (pinfo_ != NULL) pinfo_->::logic2logsvr::PlayerInfoFish::Clear();
    }
    if (has_ginfo()) {
      if (ginfo_ != NULL) ginfo_->::logic2logsvr::GameInfo::Clear();
    }
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    vartime_ = GOOGLE_LONGLONG(0);
  }
  fireinfo_.Clear();
  hitinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishGameLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GameRoundIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameroundindex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameroundindex().data(), this->gameroundindex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PInfo;
        break;
      }

      // optional .logic2logsvr.PlayerInfoFish PInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GInfo;
        break;
      }

      // optional .logic2logsvr.GameInfo GInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_FireInfo;
        break;
      }

      // repeated .logic2logsvr.FishFireInfo FireInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FireInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fireinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_FireInfo;
        if (input->ExpectTag(42)) goto parse_HitInfo;
        break;
      }

      // repeated .logic2logsvr.FishHitInfo HitInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HitInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hitinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_HitInfo;
        if (input->ExpectTag(48)) goto parse_BeginTime;
        break;
      }

      // optional int64 BeginTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_EndTime;
        break;
      }

      // optional int64 EndTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_VarTime;
        break;
      }

      // optional int64 VarTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VarTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vartime_)));
          set_has_vartime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishGameLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GameRoundIndex = 1;
  if (has_gameroundindex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameroundindex().data(), this->gameroundindex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gameroundindex(), output);
  }

  // optional .logic2logsvr.PlayerInfoFish PInfo = 2;
  if (has_pinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pinfo(), output);
  }

  // optional .logic2logsvr.GameInfo GInfo = 3;
  if (has_ginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ginfo(), output);
  }

  // repeated .logic2logsvr.FishFireInfo FireInfo = 4;
  for (int i = 0; i < this->fireinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fireinfo(i), output);
  }

  // repeated .logic2logsvr.FishHitInfo HitInfo = 5;
  for (int i = 0; i < this->hitinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hitinfo(i), output);
  }

  // optional int64 BeginTime = 6;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->begintime(), output);
  }

  // optional int64 EndTime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->endtime(), output);
  }

  // optional int64 VarTime = 8;
  if (has_vartime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->vartime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishGameLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GameRoundIndex = 1;
  if (has_gameroundindex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameroundindex().data(), this->gameroundindex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gameroundindex(), target);
  }

  // optional .logic2logsvr.PlayerInfoFish PInfo = 2;
  if (has_pinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pinfo(), target);
  }

  // optional .logic2logsvr.GameInfo GInfo = 3;
  if (has_ginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ginfo(), target);
  }

  // repeated .logic2logsvr.FishFireInfo FireInfo = 4;
  for (int i = 0; i < this->fireinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fireinfo(i), target);
  }

  // repeated .logic2logsvr.FishHitInfo HitInfo = 5;
  for (int i = 0; i < this->hitinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hitinfo(i), target);
  }

  // optional int64 BeginTime = 6;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->begintime(), target);
  }

  // optional int64 EndTime = 7;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->endtime(), target);
  }

  // optional int64 VarTime = 8;
  if (has_vartime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->vartime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishGameLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GameRoundIndex = 1;
    if (has_gameroundindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameroundindex());
    }

    // optional .logic2logsvr.PlayerInfoFish PInfo = 2;
    if (has_pinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pinfo());
    }

    // optional .logic2logsvr.GameInfo GInfo = 3;
    if (has_ginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ginfo());
    }

    // optional int64 BeginTime = 6;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 EndTime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int64 VarTime = 8;
    if (has_vartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vartime());
    }

  }
  // repeated .logic2logsvr.FishFireInfo FireInfo = 4;
  total_size += 1 * this->fireinfo_size();
  for (int i = 0; i < this->fireinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fireinfo(i));
  }

  // repeated .logic2logsvr.FishHitInfo HitInfo = 5;
  total_size += 1 * this->hitinfo_size();
  for (int i = 0; i < this->hitinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hitinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishGameLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishGameLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishGameLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishGameLog::MergeFrom(const FishGameLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  fireinfo_.MergeFrom(from.fireinfo_);
  hitinfo_.MergeFrom(from.hitinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameroundindex()) {
      set_gameroundindex(from.gameroundindex());
    }
    if (from.has_pinfo()) {
      mutable_pinfo()->::logic2logsvr::PlayerInfoFish::MergeFrom(from.pinfo());
    }
    if (from.has_ginfo()) {
      mutable_ginfo()->::logic2logsvr::GameInfo::MergeFrom(from.ginfo());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_vartime()) {
      set_vartime(from.vartime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishGameLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishGameLog::CopyFrom(const FishGameLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishGameLog::IsInitialized() const {

  return true;
}

void FishGameLog::Swap(FishGameLog* other) {
  if (other != this) {
    std::swap(gameroundindex_, other->gameroundindex_);
    std::swap(pinfo_, other->pinfo_);
    std::swap(ginfo_, other->ginfo_);
    fireinfo_.Swap(&other->fireinfo_);
    hitinfo_.Swap(&other->hitinfo_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(vartime_, other->vartime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishGameLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishGameLog_descriptor_;
  metadata.reflection = FishGameLog_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace logic2logsvr

// @@protoc_insertion_point(global_scope)
