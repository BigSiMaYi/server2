// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world2chk_msg_type.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "world2chk_msg_type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace world2chk {

namespace {

const ::google::protobuf::Descriptor* AccountChk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountChk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccChkRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccChkRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameUserStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameUserStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqrobotPID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqrobotPID_reflection_ = NULL;
const ::google::protobuf::Descriptor* PubBindingReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PubBindingReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* WestRechargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WestRechargeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderNoChecked_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderNoChecked_reflection_ = NULL;
const ::google::protobuf::Descriptor* PubRechargeRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PubRechargeRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderCancleChecked_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderCancleChecked_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqExchangeOrderInsert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqExchangeOrderInsert_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_world2chk_5fmsg_5ftype_2eproto() {
  protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "world2chk_msg_type.proto");
  GOOGLE_CHECK(file != NULL);
  AccountChk_descriptor_ = file->message_type(0);
  static const int AccountChk_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountChk, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountChk, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountChk, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountChk, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountChk, isrelogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountChk, token_),
  };
  AccountChk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountChk_descriptor_,
      AccountChk::default_instance_,
      AccountChk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountChk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountChk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountChk));
  AccChkRet_descriptor_ = file->message_type(1);
  static const int AccChkRet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccChkRet, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccChkRet, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccChkRet, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccChkRet, isrelogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccChkRet, userregion_),
  };
  AccChkRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccChkRet_descriptor_,
      AccChkRet::default_instance_,
      AccChkRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccChkRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccChkRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccChkRet));
  UnServerInfo_descriptor_ = file->message_type(2);
  static const int UnServerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnServerInfo, roomadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnServerInfo, gateaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnServerInfo, svrlevel_),
  };
  UnServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnServerInfo_descriptor_,
      UnServerInfo::default_instance_,
      UnServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnServerInfo));
  GameUserStatus_descriptor_ = file->message_type(3);
  static const int GameUserStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserStatus, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserStatus, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserStatus, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserStatus, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserStatus, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserStatus, userstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserStatus, gateaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserStatus, svrlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserStatus, acc_),
  };
  GameUserStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameUserStatus_descriptor_,
      GameUserStatus::default_instance_,
      GameUserStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameUserStatus));
  ReqrobotPID_descriptor_ = file->message_type(4);
  static const int ReqrobotPID_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqrobotPID, isrobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqrobotPID, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqrobotPID, needgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqrobotPID, needvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqrobotPID, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqrobotPID, remoteid_),
  };
  ReqrobotPID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqrobotPID_descriptor_,
      ReqrobotPID::default_instance_,
      ReqrobotPID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqrobotPID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqrobotPID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqrobotPID));
  PubBindingReward_descriptor_ = file->message_type(5);
  static const int PubBindingReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubBindingReward, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubBindingReward, rewardvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubBindingReward, accnew_),
  };
  PubBindingReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PubBindingReward_descriptor_,
      PubBindingReward::default_instance_,
      PubBindingReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubBindingReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubBindingReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PubBindingReward));
  WestRechargeInfo_descriptor_ = file->message_type(6);
  static const int WestRechargeInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WestRechargeInfo, westid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WestRechargeInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WestRechargeInfo, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WestRechargeInfo, orderstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WestRechargeInfo, checksign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WestRechargeInfo, extinfo_),
  };
  WestRechargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WestRechargeInfo_descriptor_,
      WestRechargeInfo::default_instance_,
      WestRechargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WestRechargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WestRechargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WestRechargeInfo));
  OrderNoChecked_descriptor_ = file->message_type(7);
  static const int OrderNoChecked_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderNoChecked, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderNoChecked, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderNoChecked, payid_),
  };
  OrderNoChecked_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderNoChecked_descriptor_,
      OrderNoChecked::default_instance_,
      OrderNoChecked_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderNoChecked, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderNoChecked, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderNoChecked));
  PubRechargeRet_descriptor_ = file->message_type(8);
  static const int PubRechargeRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubRechargeRet, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubRechargeRet, orderlist_),
  };
  PubRechargeRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PubRechargeRet_descriptor_,
      PubRechargeRet::default_instance_,
      PubRechargeRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubRechargeRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PubRechargeRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PubRechargeRet));
  OrderCancleChecked_descriptor_ = file->message_type(9);
  static const int OrderCancleChecked_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancleChecked, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancleChecked, optype_),
  };
  OrderCancleChecked_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderCancleChecked_descriptor_,
      OrderCancleChecked::default_instance_,
      OrderCancleChecked_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancleChecked, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancleChecked, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderCancleChecked));
  ReqExchangeOrderInsert_descriptor_ = file->message_type(10);
  static const int ReqExchangeOrderInsert_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExchangeOrderInsert, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExchangeOrderInsert, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExchangeOrderInsert, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExchangeOrderInsert, devicenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExchangeOrderInsert, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExchangeOrderInsert, exchangemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExchangeOrderInsert, aliacc_),
  };
  ReqExchangeOrderInsert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqExchangeOrderInsert_descriptor_,
      ReqExchangeOrderInsert::default_instance_,
      ReqExchangeOrderInsert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExchangeOrderInsert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExchangeOrderInsert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqExchangeOrderInsert));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_world2chk_5fmsg_5ftype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountChk_descriptor_, &AccountChk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccChkRet_descriptor_, &AccChkRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnServerInfo_descriptor_, &UnServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameUserStatus_descriptor_, &GameUserStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqrobotPID_descriptor_, &ReqrobotPID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PubBindingReward_descriptor_, &PubBindingReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WestRechargeInfo_descriptor_, &WestRechargeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderNoChecked_descriptor_, &OrderNoChecked::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PubRechargeRet_descriptor_, &PubRechargeRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderCancleChecked_descriptor_, &OrderCancleChecked::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqExchangeOrderInsert_descriptor_, &ReqExchangeOrderInsert::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_world2chk_5fmsg_5ftype_2eproto() {
  delete AccountChk::default_instance_;
  delete AccountChk_reflection_;
  delete AccChkRet::default_instance_;
  delete AccChkRet_reflection_;
  delete UnServerInfo::default_instance_;
  delete UnServerInfo_reflection_;
  delete GameUserStatus::default_instance_;
  delete GameUserStatus_reflection_;
  delete ReqrobotPID::default_instance_;
  delete ReqrobotPID_reflection_;
  delete PubBindingReward::default_instance_;
  delete PubBindingReward_reflection_;
  delete WestRechargeInfo::default_instance_;
  delete WestRechargeInfo_reflection_;
  delete OrderNoChecked::default_instance_;
  delete OrderNoChecked_reflection_;
  delete PubRechargeRet::default_instance_;
  delete PubRechargeRet_reflection_;
  delete OrderCancleChecked::default_instance_;
  delete OrderCancleChecked_reflection_;
  delete ReqExchangeOrderInsert::default_instance_;
  delete ReqExchangeOrderInsert_reflection_;
}

void protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030world2chk_msg_type.proto\022\tworld2chk\"q\n"
    "\nAccountChk\022\013\n\003acc\030\001 \002(\t\022\020\n\010platform\030\002 \002"
    "(\005\022\020\n\010serverID\030\003 \002(\005\022\020\n\010playerID\030\004 \002(\005\022\021"
    "\n\tisrelogin\030\005 \002(\010\022\r\n\005token\030\006 \001(\t\"a\n\tAccC"
    "hkRet\022\016\n\006errMsg\030\001 \001(\t\022\013\n\003acc\030\002 \002(\t\022\020\n\010pl"
    "ayerID\030\003 \001(\005\022\021\n\tisrelogin\030\004 \001(\010\022\022\n\nuserR"
    "egion\030\005 \001(\t\"C\n\014UnServerInfo\022\017\n\007roomAdd\030\001"
    " \002(\t\022\020\n\010gateAddr\030\002 \001(\t\022\020\n\010svrLevel\030\003 \001(\005"
    "\"\251\001\n\016GameUserStatus\022\020\n\010playerid\030\001 \001(\005\022\016\n"
    "\006gameid\030\002 \001(\005\022\016\n\006roomid\030\003 \001(\005\022\017\n\007tableid"
    "\030\004 \001(\005\022\017\n\007chairid\030\005 \001(\005\022\022\n\nuserstatus\030\006 "
    "\001(\005\022\020\n\010gateAddr\030\007 \001(\t\022\020\n\010svrLevel\030\010 \001(\005\022"
    "\013\n\003acc\030\t \001(\t\"p\n\013ReqrobotPID\022\017\n\007isRobot\030\001"
    " \002(\010\022\013\n\003pid\030\002 \001(\005\022\020\n\010needGold\030\003 \001(\003\022\017\n\007n"
    "eedVip\030\004 \001(\005\022\016\n\006gameID\030\005 \001(\005\022\020\n\010remoteID"
    "\030\006 \001(\005\"D\n\020PubBindingReward\022\013\n\003acc\030\001 \001(\t\022"
    "\023\n\013rewardValue\030\002 \001(\005\022\016\n\006accnew\030\003 \001(\t\"|\n\020"
    "WestRechargeInfo\022\016\n\006westID\030\001 \001(\t\022\017\n\007orde"
    "rID\030\002 \001(\t\022\016\n\006amount\030\003 \001(\005\022\023\n\013orderStatus"
    "\030\004 \001(\005\022\021\n\tcheckSign\030\005 \001(\t\022\017\n\007extInfo\030\006 \001"
    "(\t\"@\n\016OrderNoChecked\022\017\n\007orderID\030\001 \001(\t\022\016\n"
    "\006amount\030\002 \001(\005\022\r\n\005payID\030\003 \001(\005\"K\n\016PubRecha"
    "rgeRet\022\013\n\003acc\030\001 \001(\t\022,\n\tOrderList\030\002 \003(\0132\031"
    ".world2chk.OrderNoChecked\"5\n\022OrderCancle"
    "Checked\022\017\n\007orderID\030\001 \001(\t\022\016\n\006opType\030\002 \001(\005"
    "\"\223\001\n\026ReqExchangeOrderInsert\022\013\n\003pid\030\001 \001(\005"
    "\022\013\n\003acc\030\002 \001(\t\022\021\n\tchannelID\030\004 \001(\005\022\021\n\tdevi"
    "ceNum\030\005 \001(\t\022\022\n\ndeviceType\030\006 \001(\005\022\025\n\rexcha"
    "ngeMoney\030\007 \001(\003\022\016\n\006aliacc\030\010 \001(\t", 1150);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "world2chk_msg_type.proto", &protobuf_RegisterTypes);
  AccountChk::default_instance_ = new AccountChk();
  AccChkRet::default_instance_ = new AccChkRet();
  UnServerInfo::default_instance_ = new UnServerInfo();
  GameUserStatus::default_instance_ = new GameUserStatus();
  ReqrobotPID::default_instance_ = new ReqrobotPID();
  PubBindingReward::default_instance_ = new PubBindingReward();
  WestRechargeInfo::default_instance_ = new WestRechargeInfo();
  OrderNoChecked::default_instance_ = new OrderNoChecked();
  PubRechargeRet::default_instance_ = new PubRechargeRet();
  OrderCancleChecked::default_instance_ = new OrderCancleChecked();
  ReqExchangeOrderInsert::default_instance_ = new ReqExchangeOrderInsert();
  AccountChk::default_instance_->InitAsDefaultInstance();
  AccChkRet::default_instance_->InitAsDefaultInstance();
  UnServerInfo::default_instance_->InitAsDefaultInstance();
  GameUserStatus::default_instance_->InitAsDefaultInstance();
  ReqrobotPID::default_instance_->InitAsDefaultInstance();
  PubBindingReward::default_instance_->InitAsDefaultInstance();
  WestRechargeInfo::default_instance_->InitAsDefaultInstance();
  OrderNoChecked::default_instance_->InitAsDefaultInstance();
  PubRechargeRet::default_instance_->InitAsDefaultInstance();
  OrderCancleChecked::default_instance_->InitAsDefaultInstance();
  ReqExchangeOrderInsert::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_world2chk_5fmsg_5ftype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_world2chk_5fmsg_5ftype_2eproto {
  StaticDescriptorInitializer_world2chk_5fmsg_5ftype_2eproto() {
    protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto();
  }
} static_descriptor_initializer_world2chk_5fmsg_5ftype_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AccountChk::kAccFieldNumber;
const int AccountChk::kPlatformFieldNumber;
const int AccountChk::kServerIDFieldNumber;
const int AccountChk::kPlayerIDFieldNumber;
const int AccountChk::kIsreloginFieldNumber;
const int AccountChk::kTokenFieldNumber;
#endif  // !_MSC_VER

AccountChk::AccountChk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountChk::InitAsDefaultInstance() {
}

AccountChk::AccountChk(const AccountChk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountChk::SharedCtor() {
  _cached_size_ = 0;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0;
  serverid_ = 0;
  playerid_ = 0;
  isrelogin_ = false;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountChk::~AccountChk() {
  SharedDtor();
}

void AccountChk::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void AccountChk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountChk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountChk_descriptor_;
}

const AccountChk& AccountChk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

AccountChk* AccountChk::default_instance_ = NULL;

AccountChk* AccountChk::New() const {
  return new AccountChk;
}

void AccountChk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
    platform_ = 0;
    serverid_ = 0;
    playerid_ = 0;
    isrelogin_ = false;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountChk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string acc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_platform;
        break;
      }

      // required int32 platform = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverID;
        break;
      }

      // required int32 serverID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerID;
        break;
      }

      // required int32 playerID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isrelogin;
        break;
      }

      // required bool isrelogin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isrelogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrelogin_)));
          set_has_isrelogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // optional string token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountChk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->acc(), output);
  }

  // required int32 platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->platform(), output);
  }

  // required int32 serverID = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverid(), output);
  }

  // required int32 playerID = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playerid(), output);
  }

  // required bool isrelogin = 5;
  if (has_isrelogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isrelogin(), output);
  }

  // optional string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountChk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acc(), target);
  }

  // required int32 platform = 2;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->platform(), target);
  }

  // required int32 serverID = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serverid(), target);
  }

  // required int32 playerID = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playerid(), target);
  }

  // required bool isrelogin = 5;
  if (has_isrelogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isrelogin(), target);
  }

  // optional string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountChk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string acc = 1;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // required int32 platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // required int32 serverID = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int32 playerID = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required bool isrelogin = 5;
    if (has_isrelogin()) {
      total_size += 1 + 1;
    }

    // optional string token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountChk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountChk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountChk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountChk::MergeFrom(const AccountChk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_isrelogin()) {
      set_isrelogin(from.isrelogin());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountChk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountChk::CopyFrom(const AccountChk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountChk::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AccountChk::Swap(AccountChk* other) {
  if (other != this) {
    std::swap(acc_, other->acc_);
    std::swap(platform_, other->platform_);
    std::swap(serverid_, other->serverid_);
    std::swap(playerid_, other->playerid_);
    std::swap(isrelogin_, other->isrelogin_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountChk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountChk_descriptor_;
  metadata.reflection = AccountChk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccChkRet::kErrMsgFieldNumber;
const int AccChkRet::kAccFieldNumber;
const int AccChkRet::kPlayerIDFieldNumber;
const int AccChkRet::kIsreloginFieldNumber;
const int AccChkRet::kUserRegionFieldNumber;
#endif  // !_MSC_VER

AccChkRet::AccChkRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccChkRet::InitAsDefaultInstance() {
}

AccChkRet::AccChkRet(const AccChkRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccChkRet::SharedCtor() {
  _cached_size_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0;
  isrelogin_ = false;
  userregion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccChkRet::~AccChkRet() {
  SharedDtor();
}

void AccChkRet::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errmsg_;
  }
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (userregion_ != &::google::protobuf::internal::kEmptyString) {
    delete userregion_;
  }
  if (this != default_instance_) {
  }
}

void AccChkRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccChkRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccChkRet_descriptor_;
}

const AccChkRet& AccChkRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

AccChkRet* AccChkRet::default_instance_ = NULL;

AccChkRet* AccChkRet::New() const {
  return new AccChkRet;
}

void AccChkRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
        errmsg_->clear();
      }
    }
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
    playerid_ = 0;
    isrelogin_ = false;
    if (has_userregion()) {
      if (userregion_ != &::google::protobuf::internal::kEmptyString) {
        userregion_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccChkRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string errMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acc;
        break;
      }

      // required string acc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerID;
        break;
      }

      // optional int32 playerID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isrelogin;
        break;
      }

      // optional bool isrelogin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isrelogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrelogin_)));
          set_has_isrelogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userRegion;
        break;
      }

      // optional string userRegion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userRegion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userregion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userregion().data(), this->userregion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccChkRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string errMsg = 1;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->errmsg(), output);
  }

  // required string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acc(), output);
  }

  // optional int32 playerID = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerid(), output);
  }

  // optional bool isrelogin = 4;
  if (has_isrelogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isrelogin(), output);
  }

  // optional string userRegion = 5;
  if (has_userregion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userregion().data(), this->userregion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->userregion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccChkRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string errMsg = 1;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->errmsg(), target);
  }

  // required string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acc(), target);
  }

  // optional int32 playerID = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerid(), target);
  }

  // optional bool isrelogin = 4;
  if (has_isrelogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isrelogin(), target);
  }

  // optional string userRegion = 5;
  if (has_userregion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userregion().data(), this->userregion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userregion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccChkRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string errMsg = 1;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // required string acc = 2;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // optional int32 playerID = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional bool isrelogin = 4;
    if (has_isrelogin()) {
      total_size += 1 + 1;
    }

    // optional string userRegion = 5;
    if (has_userregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userregion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccChkRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccChkRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccChkRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccChkRet::MergeFrom(const AccChkRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_isrelogin()) {
      set_isrelogin(from.isrelogin());
    }
    if (from.has_userregion()) {
      set_userregion(from.userregion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccChkRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccChkRet::CopyFrom(const AccChkRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccChkRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void AccChkRet::Swap(AccChkRet* other) {
  if (other != this) {
    std::swap(errmsg_, other->errmsg_);
    std::swap(acc_, other->acc_);
    std::swap(playerid_, other->playerid_);
    std::swap(isrelogin_, other->isrelogin_);
    std::swap(userregion_, other->userregion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccChkRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccChkRet_descriptor_;
  metadata.reflection = AccChkRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnServerInfo::kRoomAddFieldNumber;
const int UnServerInfo::kGateAddrFieldNumber;
const int UnServerInfo::kSvrLevelFieldNumber;
#endif  // !_MSC_VER

UnServerInfo::UnServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnServerInfo::InitAsDefaultInstance() {
}

UnServerInfo::UnServerInfo(const UnServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnServerInfo::SharedCtor() {
  _cached_size_ = 0;
  roomadd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svrlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnServerInfo::~UnServerInfo() {
  SharedDtor();
}

void UnServerInfo::SharedDtor() {
  if (roomadd_ != &::google::protobuf::internal::kEmptyString) {
    delete roomadd_;
  }
  if (gateaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete gateaddr_;
  }
  if (this != default_instance_) {
  }
}

void UnServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnServerInfo_descriptor_;
}

const UnServerInfo& UnServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

UnServerInfo* UnServerInfo::default_instance_ = NULL;

UnServerInfo* UnServerInfo::New() const {
  return new UnServerInfo;
}

void UnServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomadd()) {
      if (roomadd_ != &::google::protobuf::internal::kEmptyString) {
        roomadd_->clear();
      }
    }
    if (has_gateaddr()) {
      if (gateaddr_ != &::google::protobuf::internal::kEmptyString) {
        gateaddr_->clear();
      }
    }
    svrlevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roomAdd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomadd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomadd().data(), this->roomadd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gateAddr;
        break;
      }

      // optional string gateAddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gateaddr().data(), this->gateaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_svrLevel;
        break;
      }

      // optional int32 svrLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svrlevel_)));
          set_has_svrlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roomAdd = 1;
  if (has_roomadd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomadd().data(), this->roomadd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomadd(), output);
  }

  // optional string gateAddr = 2;
  if (has_gateaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateaddr().data(), this->gateaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gateaddr(), output);
  }

  // optional int32 svrLevel = 3;
  if (has_svrlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->svrlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roomAdd = 1;
  if (has_roomadd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomadd().data(), this->roomadd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomadd(), target);
  }

  // optional string gateAddr = 2;
  if (has_gateaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateaddr().data(), this->gateaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gateaddr(), target);
  }

  // optional int32 svrLevel = 3;
  if (has_svrlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->svrlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roomAdd = 1;
    if (has_roomadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomadd());
    }

    // optional string gateAddr = 2;
    if (has_gateaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateaddr());
    }

    // optional int32 svrLevel = 3;
    if (has_svrlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svrlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnServerInfo::MergeFrom(const UnServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomadd()) {
      set_roomadd(from.roomadd());
    }
    if (from.has_gateaddr()) {
      set_gateaddr(from.gateaddr());
    }
    if (from.has_svrlevel()) {
      set_svrlevel(from.svrlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnServerInfo::CopyFrom(const UnServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UnServerInfo::Swap(UnServerInfo* other) {
  if (other != this) {
    std::swap(roomadd_, other->roomadd_);
    std::swap(gateaddr_, other->gateaddr_);
    std::swap(svrlevel_, other->svrlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnServerInfo_descriptor_;
  metadata.reflection = UnServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameUserStatus::kPlayeridFieldNumber;
const int GameUserStatus::kGameidFieldNumber;
const int GameUserStatus::kRoomidFieldNumber;
const int GameUserStatus::kTableidFieldNumber;
const int GameUserStatus::kChairidFieldNumber;
const int GameUserStatus::kUserstatusFieldNumber;
const int GameUserStatus::kGateAddrFieldNumber;
const int GameUserStatus::kSvrLevelFieldNumber;
const int GameUserStatus::kAccFieldNumber;
#endif  // !_MSC_VER

GameUserStatus::GameUserStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameUserStatus::InitAsDefaultInstance() {
}

GameUserStatus::GameUserStatus(const GameUserStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameUserStatus::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  gameid_ = 0;
  roomid_ = 0;
  tableid_ = 0;
  chairid_ = 0;
  userstatus_ = 0;
  gateaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svrlevel_ = 0;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameUserStatus::~GameUserStatus() {
  SharedDtor();
}

void GameUserStatus::SharedDtor() {
  if (gateaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete gateaddr_;
  }
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (this != default_instance_) {
  }
}

void GameUserStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameUserStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameUserStatus_descriptor_;
}

const GameUserStatus& GameUserStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

GameUserStatus* GameUserStatus::default_instance_ = NULL;

GameUserStatus* GameUserStatus::New() const {
  return new GameUserStatus;
}

void GameUserStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    gameid_ = 0;
    roomid_ = 0;
    tableid_ = 0;
    chairid_ = 0;
    userstatus_ = 0;
    if (has_gateaddr()) {
      if (gateaddr_ != &::google::protobuf::internal::kEmptyString) {
        gateaddr_->clear();
      }
    }
    svrlevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameUserStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // optional int32 gameid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tableid;
        break;
      }

      // optional int32 tableid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_userstatus;
        break;
      }

      // optional int32 userstatus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userstatus_)));
          set_has_userstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gateAddr;
        break;
      }

      // optional string gateAddr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gateaddr().data(), this->gateaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_svrLevel;
        break;
      }

      // optional int32 svrLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svrlevel_)));
          set_has_svrlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_acc;
        break;
      }

      // optional string acc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameUserStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // optional int32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // optional int32 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }

  // optional int32 tableid = 4;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tableid(), output);
  }

  // optional int32 chairid = 5;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chairid(), output);
  }

  // optional int32 userstatus = 6;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->userstatus(), output);
  }

  // optional string gateAddr = 7;
  if (has_gateaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateaddr().data(), this->gateaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->gateaddr(), output);
  }

  // optional int32 svrLevel = 8;
  if (has_svrlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->svrlevel(), output);
  }

  // optional string acc = 9;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->acc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameUserStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // optional int32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // optional int32 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }

  // optional int32 tableid = 4;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tableid(), target);
  }

  // optional int32 chairid = 5;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chairid(), target);
  }

  // optional int32 userstatus = 6;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->userstatus(), target);
  }

  // optional string gateAddr = 7;
  if (has_gateaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateaddr().data(), this->gateaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->gateaddr(), target);
  }

  // optional int32 svrLevel = 8;
  if (has_svrlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->svrlevel(), target);
  }

  // optional string acc = 9;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->acc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameUserStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional int32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 tableid = 4;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 chairid = 5;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 userstatus = 6;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstatus());
    }

    // optional string gateAddr = 7;
    if (has_gateaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateaddr());
    }

    // optional int32 svrLevel = 8;
    if (has_svrlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svrlevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string acc = 9;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameUserStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameUserStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameUserStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameUserStatus::MergeFrom(const GameUserStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
    if (from.has_gateaddr()) {
      set_gateaddr(from.gateaddr());
    }
    if (from.has_svrlevel()) {
      set_svrlevel(from.svrlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_acc()) {
      set_acc(from.acc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameUserStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameUserStatus::CopyFrom(const GameUserStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameUserStatus::IsInitialized() const {

  return true;
}

void GameUserStatus::Swap(GameUserStatus* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(gameid_, other->gameid_);
    std::swap(roomid_, other->roomid_);
    std::swap(tableid_, other->tableid_);
    std::swap(chairid_, other->chairid_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(gateaddr_, other->gateaddr_);
    std::swap(svrlevel_, other->svrlevel_);
    std::swap(acc_, other->acc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameUserStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameUserStatus_descriptor_;
  metadata.reflection = GameUserStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqrobotPID::kIsRobotFieldNumber;
const int ReqrobotPID::kPidFieldNumber;
const int ReqrobotPID::kNeedGoldFieldNumber;
const int ReqrobotPID::kNeedVipFieldNumber;
const int ReqrobotPID::kGameIDFieldNumber;
const int ReqrobotPID::kRemoteIDFieldNumber;
#endif  // !_MSC_VER

ReqrobotPID::ReqrobotPID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqrobotPID::InitAsDefaultInstance() {
}

ReqrobotPID::ReqrobotPID(const ReqrobotPID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqrobotPID::SharedCtor() {
  _cached_size_ = 0;
  isrobot_ = false;
  pid_ = 0;
  needgold_ = GOOGLE_LONGLONG(0);
  needvip_ = 0;
  gameid_ = 0;
  remoteid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqrobotPID::~ReqrobotPID() {
  SharedDtor();
}

void ReqrobotPID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqrobotPID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqrobotPID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqrobotPID_descriptor_;
}

const ReqrobotPID& ReqrobotPID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

ReqrobotPID* ReqrobotPID::default_instance_ = NULL;

ReqrobotPID* ReqrobotPID::New() const {
  return new ReqrobotPID;
}

void ReqrobotPID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isrobot_ = false;
    pid_ = 0;
    needgold_ = GOOGLE_LONGLONG(0);
    needvip_ = 0;
    gameid_ = 0;
    remoteid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqrobotPID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isRobot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional int32 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needGold;
        break;
      }

      // optional int64 needGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &needgold_)));
          set_has_needgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_needVip;
        break;
      }

      // optional int32 needVip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needvip_)));
          set_has_needvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gameID;
        break;
      }

      // optional int32 gameID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_remoteID;
        break;
      }

      // optional int32 remoteID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remoteID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remoteid_)));
          set_has_remoteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqrobotPID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isRobot = 1;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isrobot(), output);
  }

  // optional int32 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }

  // optional int64 needGold = 3;
  if (has_needgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->needgold(), output);
  }

  // optional int32 needVip = 4;
  if (has_needvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->needvip(), output);
  }

  // optional int32 gameID = 5;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gameid(), output);
  }

  // optional int32 remoteID = 6;
  if (has_remoteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->remoteid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqrobotPID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isRobot = 1;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isrobot(), target);
  }

  // optional int32 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }

  // optional int64 needGold = 3;
  if (has_needgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->needgold(), target);
  }

  // optional int32 needVip = 4;
  if (has_needvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->needvip(), target);
  }

  // optional int32 gameID = 5;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gameid(), target);
  }

  // optional int32 remoteID = 6;
  if (has_remoteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->remoteid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqrobotPID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isRobot = 1;
    if (has_isrobot()) {
      total_size += 1 + 1;
    }

    // optional int32 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int64 needGold = 3;
    if (has_needgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->needgold());
    }

    // optional int32 needVip = 4;
    if (has_needvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needvip());
    }

    // optional int32 gameID = 5;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 remoteID = 6;
    if (has_remoteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remoteid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqrobotPID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqrobotPID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqrobotPID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqrobotPID::MergeFrom(const ReqrobotPID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_needgold()) {
      set_needgold(from.needgold());
    }
    if (from.has_needvip()) {
      set_needvip(from.needvip());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_remoteid()) {
      set_remoteid(from.remoteid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqrobotPID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqrobotPID::CopyFrom(const ReqrobotPID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqrobotPID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqrobotPID::Swap(ReqrobotPID* other) {
  if (other != this) {
    std::swap(isrobot_, other->isrobot_);
    std::swap(pid_, other->pid_);
    std::swap(needgold_, other->needgold_);
    std::swap(needvip_, other->needvip_);
    std::swap(gameid_, other->gameid_);
    std::swap(remoteid_, other->remoteid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqrobotPID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqrobotPID_descriptor_;
  metadata.reflection = ReqrobotPID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PubBindingReward::kAccFieldNumber;
const int PubBindingReward::kRewardValueFieldNumber;
const int PubBindingReward::kAccnewFieldNumber;
#endif  // !_MSC_VER

PubBindingReward::PubBindingReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PubBindingReward::InitAsDefaultInstance() {
}

PubBindingReward::PubBindingReward(const PubBindingReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PubBindingReward::SharedCtor() {
  _cached_size_ = 0;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rewardvalue_ = 0;
  accnew_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PubBindingReward::~PubBindingReward() {
  SharedDtor();
}

void PubBindingReward::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (accnew_ != &::google::protobuf::internal::kEmptyString) {
    delete accnew_;
  }
  if (this != default_instance_) {
  }
}

void PubBindingReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PubBindingReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PubBindingReward_descriptor_;
}

const PubBindingReward& PubBindingReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

PubBindingReward* PubBindingReward::default_instance_ = NULL;

PubBindingReward* PubBindingReward::New() const {
  return new PubBindingReward;
}

void PubBindingReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
    rewardvalue_ = 0;
    if (has_accnew()) {
      if (accnew_ != &::google::protobuf::internal::kEmptyString) {
        accnew_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PubBindingReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string acc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardValue;
        break;
      }

      // optional int32 rewardValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardvalue_)));
          set_has_rewardvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accnew;
        break;
      }

      // optional string accnew = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accnew:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accnew()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accnew().data(), this->accnew().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PubBindingReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->acc(), output);
  }

  // optional int32 rewardValue = 2;
  if (has_rewardvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewardvalue(), output);
  }

  // optional string accnew = 3;
  if (has_accnew()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accnew().data(), this->accnew().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->accnew(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PubBindingReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acc(), target);
  }

  // optional int32 rewardValue = 2;
  if (has_rewardvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rewardvalue(), target);
  }

  // optional string accnew = 3;
  if (has_accnew()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accnew().data(), this->accnew().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accnew(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PubBindingReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string acc = 1;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // optional int32 rewardValue = 2;
    if (has_rewardvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardvalue());
    }

    // optional string accnew = 3;
    if (has_accnew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accnew());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PubBindingReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PubBindingReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PubBindingReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PubBindingReward::MergeFrom(const PubBindingReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_rewardvalue()) {
      set_rewardvalue(from.rewardvalue());
    }
    if (from.has_accnew()) {
      set_accnew(from.accnew());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PubBindingReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubBindingReward::CopyFrom(const PubBindingReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubBindingReward::IsInitialized() const {

  return true;
}

void PubBindingReward::Swap(PubBindingReward* other) {
  if (other != this) {
    std::swap(acc_, other->acc_);
    std::swap(rewardvalue_, other->rewardvalue_);
    std::swap(accnew_, other->accnew_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PubBindingReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PubBindingReward_descriptor_;
  metadata.reflection = PubBindingReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WestRechargeInfo::kWestIDFieldNumber;
const int WestRechargeInfo::kOrderIDFieldNumber;
const int WestRechargeInfo::kAmountFieldNumber;
const int WestRechargeInfo::kOrderStatusFieldNumber;
const int WestRechargeInfo::kCheckSignFieldNumber;
const int WestRechargeInfo::kExtInfoFieldNumber;
#endif  // !_MSC_VER

WestRechargeInfo::WestRechargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WestRechargeInfo::InitAsDefaultInstance() {
}

WestRechargeInfo::WestRechargeInfo(const WestRechargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WestRechargeInfo::SharedCtor() {
  _cached_size_ = 0;
  westid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = 0;
  orderstatus_ = 0;
  checksign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WestRechargeInfo::~WestRechargeInfo() {
  SharedDtor();
}

void WestRechargeInfo::SharedDtor() {
  if (westid_ != &::google::protobuf::internal::kEmptyString) {
    delete westid_;
  }
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (checksign_ != &::google::protobuf::internal::kEmptyString) {
    delete checksign_;
  }
  if (extinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete extinfo_;
  }
  if (this != default_instance_) {
  }
}

void WestRechargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WestRechargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WestRechargeInfo_descriptor_;
}

const WestRechargeInfo& WestRechargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

WestRechargeInfo* WestRechargeInfo::default_instance_ = NULL;

WestRechargeInfo* WestRechargeInfo::New() const {
  return new WestRechargeInfo;
}

void WestRechargeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_westid()) {
      if (westid_ != &::google::protobuf::internal::kEmptyString) {
        westid_->clear();
      }
    }
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    amount_ = 0;
    orderstatus_ = 0;
    if (has_checksign()) {
      if (checksign_ != &::google::protobuf::internal::kEmptyString) {
        checksign_->clear();
      }
    }
    if (has_extinfo()) {
      if (extinfo_ != &::google::protobuf::internal::kEmptyString) {
        extinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WestRechargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string westID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_westid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->westid().data(), this->westid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orderID;
        break;
      }

      // optional string orderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // optional int32 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_orderStatus;
        break;
      }

      // optional int32 orderStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderstatus_)));
          set_has_orderstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_checkSign;
        break;
      }

      // optional string checkSign = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkSign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checksign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->checksign().data(), this->checksign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_extInfo;
        break;
      }

      // optional string extInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extinfo().data(), this->extinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WestRechargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string westID = 1;
  if (has_westid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->westid().data(), this->westid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->westid(), output);
  }

  // optional string orderID = 2;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orderid(), output);
  }

  // optional int32 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->amount(), output);
  }

  // optional int32 orderStatus = 4;
  if (has_orderstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->orderstatus(), output);
  }

  // optional string checkSign = 5;
  if (has_checksign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checksign().data(), this->checksign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->checksign(), output);
  }

  // optional string extInfo = 6;
  if (has_extinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->extinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WestRechargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string westID = 1;
  if (has_westid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->westid().data(), this->westid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->westid(), target);
  }

  // optional string orderID = 2;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderid(), target);
  }

  // optional int32 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->amount(), target);
  }

  // optional int32 orderStatus = 4;
  if (has_orderstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->orderstatus(), target);
  }

  // optional string checkSign = 5;
  if (has_checksign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checksign().data(), this->checksign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->checksign(), target);
  }

  // optional string extInfo = 6;
  if (has_extinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->extinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WestRechargeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string westID = 1;
    if (has_westid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->westid());
    }

    // optional string orderID = 2;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // optional int32 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // optional int32 orderStatus = 4;
    if (has_orderstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderstatus());
    }

    // optional string checkSign = 5;
    if (has_checksign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checksign());
    }

    // optional string extInfo = 6;
    if (has_extinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WestRechargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WestRechargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WestRechargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WestRechargeInfo::MergeFrom(const WestRechargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_westid()) {
      set_westid(from.westid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_orderstatus()) {
      set_orderstatus(from.orderstatus());
    }
    if (from.has_checksign()) {
      set_checksign(from.checksign());
    }
    if (from.has_extinfo()) {
      set_extinfo(from.extinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WestRechargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WestRechargeInfo::CopyFrom(const WestRechargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WestRechargeInfo::IsInitialized() const {

  return true;
}

void WestRechargeInfo::Swap(WestRechargeInfo* other) {
  if (other != this) {
    std::swap(westid_, other->westid_);
    std::swap(orderid_, other->orderid_);
    std::swap(amount_, other->amount_);
    std::swap(orderstatus_, other->orderstatus_);
    std::swap(checksign_, other->checksign_);
    std::swap(extinfo_, other->extinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WestRechargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WestRechargeInfo_descriptor_;
  metadata.reflection = WestRechargeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderNoChecked::kOrderIDFieldNumber;
const int OrderNoChecked::kAmountFieldNumber;
const int OrderNoChecked::kPayIDFieldNumber;
#endif  // !_MSC_VER

OrderNoChecked::OrderNoChecked()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderNoChecked::InitAsDefaultInstance() {
}

OrderNoChecked::OrderNoChecked(const OrderNoChecked& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderNoChecked::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = 0;
  payid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderNoChecked::~OrderNoChecked() {
  SharedDtor();
}

void OrderNoChecked::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (this != default_instance_) {
  }
}

void OrderNoChecked::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderNoChecked::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderNoChecked_descriptor_;
}

const OrderNoChecked& OrderNoChecked::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

OrderNoChecked* OrderNoChecked::default_instance_ = NULL;

OrderNoChecked* OrderNoChecked::New() const {
  return new OrderNoChecked;
}

void OrderNoChecked::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    amount_ = 0;
    payid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderNoChecked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string orderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional int32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_payID;
        break;
      }

      // optional int32 payID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payid_)));
          set_has_payid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderNoChecked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string orderID = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->orderid(), output);
  }

  // optional int32 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  // optional int32 payID = 3;
  if (has_payid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->payid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderNoChecked::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string orderID = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // optional int32 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }

  // optional int32 payID = 3;
  if (has_payid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->payid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderNoChecked::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string orderID = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // optional int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // optional int32 payID = 3;
    if (has_payid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderNoChecked::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderNoChecked* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderNoChecked*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderNoChecked::MergeFrom(const OrderNoChecked& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_payid()) {
      set_payid(from.payid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderNoChecked::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderNoChecked::CopyFrom(const OrderNoChecked& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderNoChecked::IsInitialized() const {

  return true;
}

void OrderNoChecked::Swap(OrderNoChecked* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(amount_, other->amount_);
    std::swap(payid_, other->payid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderNoChecked::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderNoChecked_descriptor_;
  metadata.reflection = OrderNoChecked_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PubRechargeRet::kAccFieldNumber;
const int PubRechargeRet::kOrderListFieldNumber;
#endif  // !_MSC_VER

PubRechargeRet::PubRechargeRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PubRechargeRet::InitAsDefaultInstance() {
}

PubRechargeRet::PubRechargeRet(const PubRechargeRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PubRechargeRet::SharedCtor() {
  _cached_size_ = 0;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PubRechargeRet::~PubRechargeRet() {
  SharedDtor();
}

void PubRechargeRet::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (this != default_instance_) {
  }
}

void PubRechargeRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PubRechargeRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PubRechargeRet_descriptor_;
}

const PubRechargeRet& PubRechargeRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

PubRechargeRet* PubRechargeRet::default_instance_ = NULL;

PubRechargeRet* PubRechargeRet::New() const {
  return new PubRechargeRet;
}

void PubRechargeRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
  }
  orderlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PubRechargeRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string acc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OrderList;
        break;
      }

      // repeated .world2chk.OrderNoChecked OrderList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orderlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OrderList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PubRechargeRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->acc(), output);
  }

  // repeated .world2chk.OrderNoChecked OrderList = 2;
  for (int i = 0; i < this->orderlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->orderlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PubRechargeRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acc(), target);
  }

  // repeated .world2chk.OrderNoChecked OrderList = 2;
  for (int i = 0; i < this->orderlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->orderlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PubRechargeRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string acc = 1;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

  }
  // repeated .world2chk.OrderNoChecked OrderList = 2;
  total_size += 1 * this->orderlist_size();
  for (int i = 0; i < this->orderlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orderlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PubRechargeRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PubRechargeRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PubRechargeRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PubRechargeRet::MergeFrom(const PubRechargeRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  orderlist_.MergeFrom(from.orderlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc()) {
      set_acc(from.acc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PubRechargeRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubRechargeRet::CopyFrom(const PubRechargeRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubRechargeRet::IsInitialized() const {

  return true;
}

void PubRechargeRet::Swap(PubRechargeRet* other) {
  if (other != this) {
    std::swap(acc_, other->acc_);
    orderlist_.Swap(&other->orderlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PubRechargeRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PubRechargeRet_descriptor_;
  metadata.reflection = PubRechargeRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderCancleChecked::kOrderIDFieldNumber;
const int OrderCancleChecked::kOpTypeFieldNumber;
#endif  // !_MSC_VER

OrderCancleChecked::OrderCancleChecked()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderCancleChecked::InitAsDefaultInstance() {
}

OrderCancleChecked::OrderCancleChecked(const OrderCancleChecked& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderCancleChecked::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderCancleChecked::~OrderCancleChecked() {
  SharedDtor();
}

void OrderCancleChecked::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (this != default_instance_) {
  }
}

void OrderCancleChecked::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderCancleChecked::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderCancleChecked_descriptor_;
}

const OrderCancleChecked& OrderCancleChecked::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

OrderCancleChecked* OrderCancleChecked::default_instance_ = NULL;

OrderCancleChecked* OrderCancleChecked::New() const {
  return new OrderCancleChecked;
}

void OrderCancleChecked::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    optype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderCancleChecked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string orderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opType;
        break;
      }

      // optional int32 opType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderCancleChecked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string orderID = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->orderid(), output);
  }

  // optional int32 opType = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderCancleChecked::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string orderID = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // optional int32 opType = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderCancleChecked::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string orderID = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // optional int32 opType = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderCancleChecked::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderCancleChecked* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderCancleChecked*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderCancleChecked::MergeFrom(const OrderCancleChecked& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderCancleChecked::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCancleChecked::CopyFrom(const OrderCancleChecked& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCancleChecked::IsInitialized() const {

  return true;
}

void OrderCancleChecked::Swap(OrderCancleChecked* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderCancleChecked::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderCancleChecked_descriptor_;
  metadata.reflection = OrderCancleChecked_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqExchangeOrderInsert::kPidFieldNumber;
const int ReqExchangeOrderInsert::kAccFieldNumber;
const int ReqExchangeOrderInsert::kChannelIDFieldNumber;
const int ReqExchangeOrderInsert::kDeviceNumFieldNumber;
const int ReqExchangeOrderInsert::kDeviceTypeFieldNumber;
const int ReqExchangeOrderInsert::kExchangeMoneyFieldNumber;
const int ReqExchangeOrderInsert::kAliaccFieldNumber;
#endif  // !_MSC_VER

ReqExchangeOrderInsert::ReqExchangeOrderInsert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqExchangeOrderInsert::InitAsDefaultInstance() {
}

ReqExchangeOrderInsert::ReqExchangeOrderInsert(const ReqExchangeOrderInsert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqExchangeOrderInsert::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = 0;
  devicenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicetype_ = 0;
  exchangemoney_ = GOOGLE_LONGLONG(0);
  aliacc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqExchangeOrderInsert::~ReqExchangeOrderInsert() {
  SharedDtor();
}

void ReqExchangeOrderInsert::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (devicenum_ != &::google::protobuf::internal::kEmptyString) {
    delete devicenum_;
  }
  if (aliacc_ != &::google::protobuf::internal::kEmptyString) {
    delete aliacc_;
  }
  if (this != default_instance_) {
  }
}

void ReqExchangeOrderInsert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqExchangeOrderInsert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqExchangeOrderInsert_descriptor_;
}

const ReqExchangeOrderInsert& ReqExchangeOrderInsert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

ReqExchangeOrderInsert* ReqExchangeOrderInsert::default_instance_ = NULL;

ReqExchangeOrderInsert* ReqExchangeOrderInsert::New() const {
  return new ReqExchangeOrderInsert;
}

void ReqExchangeOrderInsert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0;
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
    channelid_ = 0;
    if (has_devicenum()) {
      if (devicenum_ != &::google::protobuf::internal::kEmptyString) {
        devicenum_->clear();
      }
    }
    devicetype_ = 0;
    exchangemoney_ = GOOGLE_LONGLONG(0);
    if (has_aliacc()) {
      if (aliacc_ != &::google::protobuf::internal::kEmptyString) {
        aliacc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqExchangeOrderInsert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acc;
        break;
      }

      // optional string acc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channelID;
        break;
      }

      // optional int32 channelID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deviceNum;
        break;
      }

      // optional string deviceNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicenum().data(), this->devicenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_deviceType;
        break;
      }

      // optional int32 deviceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicetype_)));
          set_has_devicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exchangeMoney;
        break;
      }

      // optional int64 exchangeMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchangeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchangemoney_)));
          set_has_exchangemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_aliacc;
        break;
      }

      // optional string aliacc = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aliacc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aliacc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aliacc().data(), this->aliacc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqExchangeOrderInsert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acc(), output);
  }

  // optional int32 channelID = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->channelid(), output);
  }

  // optional string deviceNum = 5;
  if (has_devicenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicenum().data(), this->devicenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->devicenum(), output);
  }

  // optional int32 deviceType = 6;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->devicetype(), output);
  }

  // optional int64 exchangeMoney = 7;
  if (has_exchangemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->exchangemoney(), output);
  }

  // optional string aliacc = 8;
  if (has_aliacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aliacc().data(), this->aliacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->aliacc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqExchangeOrderInsert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // optional string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acc(), target);
  }

  // optional int32 channelID = 4;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->channelid(), target);
  }

  // optional string deviceNum = 5;
  if (has_devicenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicenum().data(), this->devicenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->devicenum(), target);
  }

  // optional int32 deviceType = 6;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->devicetype(), target);
  }

  // optional int64 exchangeMoney = 7;
  if (has_exchangemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->exchangemoney(), target);
  }

  // optional string aliacc = 8;
  if (has_aliacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aliacc().data(), this->aliacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->aliacc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqExchangeOrderInsert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional string acc = 2;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // optional int32 channelID = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelid());
    }

    // optional string deviceNum = 5;
    if (has_devicenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicenum());
    }

    // optional int32 deviceType = 6;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicetype());
    }

    // optional int64 exchangeMoney = 7;
    if (has_exchangemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exchangemoney());
    }

    // optional string aliacc = 8;
    if (has_aliacc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aliacc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqExchangeOrderInsert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqExchangeOrderInsert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqExchangeOrderInsert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqExchangeOrderInsert::MergeFrom(const ReqExchangeOrderInsert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_devicenum()) {
      set_devicenum(from.devicenum());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_exchangemoney()) {
      set_exchangemoney(from.exchangemoney());
    }
    if (from.has_aliacc()) {
      set_aliacc(from.aliacc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqExchangeOrderInsert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqExchangeOrderInsert::CopyFrom(const ReqExchangeOrderInsert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqExchangeOrderInsert::IsInitialized() const {

  return true;
}

void ReqExchangeOrderInsert::Swap(ReqExchangeOrderInsert* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(acc_, other->acc_);
    std::swap(channelid_, other->channelid_);
    std::swap(devicenum_, other->devicenum_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(exchangemoney_, other->exchangemoney_);
    std::swap(aliacc_, other->aliacc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqExchangeOrderInsert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqExchangeOrderInsert_descriptor_;
  metadata.reflection = ReqExchangeOrderInsert_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace world2chk

// @@protoc_insertion_point(global_scope)
