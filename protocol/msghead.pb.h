// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msghead.proto

#ifndef PROTOBUF_msghead_2eproto__INCLUDED
#define PROTOBUF_msghead_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace msghead {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msghead_2eproto();
void protobuf_AssignDesc_msghead_2eproto();
void protobuf_ShutdownFile_msghead_2eproto();

class MsgHead;

enum emsgType {
  e_g2log_disconn = 1,
  e_c2l_heartbeat = 8,
  e_w2check_svr_reg = 301,
  e_check2w_svr_reg_res = 302,
  e_w2check_svr_unreg = 303,
  e_check2w_svr_unreg_res = 304,
  e_w2check_acc_chk = 501,
  e_w2check_acc_chk_res = 502,
  e_w2check_get_pid = 503,
  e_check2w_get_pid_res = 504,
  e_login2chk_acc_chk = 1001,
  e_chk2login_acc_chk_res = 1002,
  e_clt2login_login = 1003,
  e_login2clt_login_ret = 1004,
  e_clt2login_user_reg = 1005,
  e_login2clt_user_reg_ret = 1006,
  e_clt2login_req_SMS = 1007,
  e_login2clt_req_SMS_ret = 1008,
  e_login2websvr_req_SMS = 1107,
  e_websvr2login_req_SMS_ret = 1108,
  e_clt2login_acc_binding = 1009,
  e_login2clt_acc_binding_ret = 1010,
  e_clt2login_alipay_binding = 1011,
  e_login2clt_alipay_binding_ret = 1012,
  e_clt2login_retrieve_pwd = 1013,
  e_login2clt_retrieve_pwd_ret = 1014,
  e_w2chk_req_robotPID = 1015,
  e_chk2w_req_robotPID_ret = 1016,
  e_chk2w_pub_phone_binding = 1017,
  e_clt2login_req_token = 1019,
  e_login2clt_req_token_ret = 1020,
  e_clt2login_reqReCharge = 1021,
  e_login2clt_reqRecharge_ret = 1022,
  e_login2chk_reqOrderID = 1023,
  e_chk2login_reqOrderID_ret = 1024,
  e_login2web_reqrecharge = 1025,
  e_web2login_reqrechareg_ret = 1026,
  e_chk2login_pub_kick_user = 1039,
  e_w2chk_up_userstat = 1500,
  e_chk2w_up_userstat = 1501,
  e_recharge2chk_cb = 1600,
  e_chk2recharge_cb_ret = 1601,
  e_ckk2world_pub_recharge_ret = 1602,
  e_w2chk_get_unChecked_list = 1603,
  e_chk2w_get_unChecked_list_ret = 1604,
  e_w2chk_cancle_check_order = 1605,
  e_chk2w_cancle_check_order_ret = 1606,
  e_w2chk_exchange_order = 1607,
  e_chk2w_exchange_order_ret = 1608,
  e_chk2login_pub_roomlist = 1700,
  e_error_begin = 7999,
  e_error_accorpwd = 8000,
  e_error_noacc = 8001,
  e_error_accpwd_illegal = 8002,
  e_error_accbinding_ret1 = 8003,
  e_error_accbinding_ret2 = 8004,
  e_error_accbinding_ret3 = 8005,
  e_error_alibinding_ret1 = 8006,
  e_error_alibinding_ret2 = 8007,
  e_error_retrieve_pwd_ret1 = 8008,
  e_error_login_ret1 = 8009,
  e_error_login_ret2 = 8010,
  e_error_login_ret3 = 8011,
  e_error_login_ret4 = 8012,
  e_error_login_ret5 = 8013,
  e_error_login_ret6 = 8014,
  e_error_login_ret7 = 8015,
  e_error_login_ret8 = 8016,
  e_error_to_clt = 9000,
  e_error_clt_dis = 9001,
  e_logic2logsvr_gameLog = 10000
};
bool emsgType_IsValid(int value);
const emsgType emsgType_MIN = e_g2log_disconn;
const emsgType emsgType_MAX = e_logic2logsvr_gameLog;
const int emsgType_ARRAYSIZE = emsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* emsgType_descriptor();
inline const ::std::string& emsgType_Name(emsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    emsgType_descriptor(), value);
}
inline bool emsgType_Parse(
    const ::std::string& name, emsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<emsgType>(
    emsgType_descriptor(), name, value);
}
// ===================================================================

class MsgHead : public ::google::protobuf::Message {
 public:
  MsgHead();
  virtual ~MsgHead();

  MsgHead(const MsgHead& from);

  inline MsgHead& operator=(const MsgHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgHead& default_instance();

  void Swap(MsgHead* other);

  // implements Message ----------------------------------------------

  MsgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgHead& from);
  void MergeFrom(const MsgHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 msgSize = 1;
  inline bool has_msgsize() const;
  inline void clear_msgsize();
  static const int kMsgSizeFieldNumber = 1;
  inline ::google::protobuf::int32 msgsize() const;
  inline void set_msgsize(::google::protobuf::int32 value);

  // required .msghead.emsgType msgID = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 2;
  inline ::msghead::emsgType msgid() const;
  inline void set_msgid(::msghead::emsgType value);

  // optional string sessionID = 3;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIDFieldNumber = 3;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const char* value, size_t size);
  inline ::std::string* mutable_sessionid();
  inline ::std::string* release_sessionid();
  inline void set_allocated_sessionid(::std::string* sessionid);

  // optional string repIdentity = 4;
  inline bool has_repidentity() const;
  inline void clear_repidentity();
  static const int kRepIdentityFieldNumber = 4;
  inline const ::std::string& repidentity() const;
  inline void set_repidentity(const ::std::string& value);
  inline void set_repidentity(const char* value);
  inline void set_repidentity(const char* value, size_t size);
  inline ::std::string* mutable_repidentity();
  inline ::std::string* release_repidentity();
  inline void set_allocated_repidentity(::std::string* repidentity);

  // optional int32 closeClientSession = 5;
  inline bool has_closeclientsession() const;
  inline void clear_closeclientsession();
  static const int kCloseClientSessionFieldNumber = 5;
  inline ::google::protobuf::int32 closeclientsession() const;
  inline void set_closeclientsession(::google::protobuf::int32 value);

  // optional int32 cltAddr = 6;
  inline bool has_cltaddr() const;
  inline void clear_cltaddr();
  static const int kCltAddrFieldNumber = 6;
  inline ::google::protobuf::int32 cltaddr() const;
  inline void set_cltaddr(::google::protobuf::int32 value);

  // optional bytes content = 7;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:msghead.MsgHead)
 private:
  inline void set_has_msgsize();
  inline void clear_has_msgsize();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_repidentity();
  inline void clear_has_repidentity();
  inline void set_has_closeclientsession();
  inline void clear_has_closeclientsession();
  inline void set_has_cltaddr();
  inline void clear_has_cltaddr();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 msgsize_;
  int msgid_;
  ::std::string* sessionid_;
  ::std::string* repidentity_;
  ::google::protobuf::int32 closeclientsession_;
  ::google::protobuf::int32 cltaddr_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_msghead_2eproto();
  friend void protobuf_AssignDesc_msghead_2eproto();
  friend void protobuf_ShutdownFile_msghead_2eproto();

  void InitAsDefaultInstance();
  static MsgHead* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgHead

// required int32 msgSize = 1;
inline bool MsgHead::has_msgsize() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgHead::set_has_msgsize() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgHead::clear_has_msgsize() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgHead::clear_msgsize() {
  msgsize_ = 0;
  clear_has_msgsize();
}
inline ::google::protobuf::int32 MsgHead::msgsize() const {
  return msgsize_;
}
inline void MsgHead::set_msgsize(::google::protobuf::int32 value) {
  set_has_msgsize();
  msgsize_ = value;
}

// required .msghead.emsgType msgID = 2;
inline bool MsgHead::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgHead::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgHead::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgHead::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::msghead::emsgType MsgHead::msgid() const {
  return static_cast< ::msghead::emsgType >(msgid_);
}
inline void MsgHead::set_msgid(::msghead::emsgType value) {
  assert(::msghead::emsgType_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// optional string sessionID = 3;
inline bool MsgHead::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgHead::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgHead::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgHead::clear_sessionid() {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    sessionid_->clear();
  }
  clear_has_sessionid();
}
inline const ::std::string& MsgHead::sessionid() const {
  return *sessionid_;
}
inline void MsgHead::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void MsgHead::set_sessionid(const char* value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void MsgHead::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgHead::mutable_sessionid() {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  return sessionid_;
}
inline ::std::string* MsgHead::release_sessionid() {
  clear_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sessionid_;
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgHead::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (sessionid) {
    set_has_sessionid();
    sessionid_ = sessionid;
  } else {
    clear_has_sessionid();
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string repIdentity = 4;
inline bool MsgHead::has_repidentity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgHead::set_has_repidentity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgHead::clear_has_repidentity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgHead::clear_repidentity() {
  if (repidentity_ != &::google::protobuf::internal::kEmptyString) {
    repidentity_->clear();
  }
  clear_has_repidentity();
}
inline const ::std::string& MsgHead::repidentity() const {
  return *repidentity_;
}
inline void MsgHead::set_repidentity(const ::std::string& value) {
  set_has_repidentity();
  if (repidentity_ == &::google::protobuf::internal::kEmptyString) {
    repidentity_ = new ::std::string;
  }
  repidentity_->assign(value);
}
inline void MsgHead::set_repidentity(const char* value) {
  set_has_repidentity();
  if (repidentity_ == &::google::protobuf::internal::kEmptyString) {
    repidentity_ = new ::std::string;
  }
  repidentity_->assign(value);
}
inline void MsgHead::set_repidentity(const char* value, size_t size) {
  set_has_repidentity();
  if (repidentity_ == &::google::protobuf::internal::kEmptyString) {
    repidentity_ = new ::std::string;
  }
  repidentity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgHead::mutable_repidentity() {
  set_has_repidentity();
  if (repidentity_ == &::google::protobuf::internal::kEmptyString) {
    repidentity_ = new ::std::string;
  }
  return repidentity_;
}
inline ::std::string* MsgHead::release_repidentity() {
  clear_has_repidentity();
  if (repidentity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = repidentity_;
    repidentity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgHead::set_allocated_repidentity(::std::string* repidentity) {
  if (repidentity_ != &::google::protobuf::internal::kEmptyString) {
    delete repidentity_;
  }
  if (repidentity) {
    set_has_repidentity();
    repidentity_ = repidentity;
  } else {
    clear_has_repidentity();
    repidentity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 closeClientSession = 5;
inline bool MsgHead::has_closeclientsession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgHead::set_has_closeclientsession() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgHead::clear_has_closeclientsession() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgHead::clear_closeclientsession() {
  closeclientsession_ = 0;
  clear_has_closeclientsession();
}
inline ::google::protobuf::int32 MsgHead::closeclientsession() const {
  return closeclientsession_;
}
inline void MsgHead::set_closeclientsession(::google::protobuf::int32 value) {
  set_has_closeclientsession();
  closeclientsession_ = value;
}

// optional int32 cltAddr = 6;
inline bool MsgHead::has_cltaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgHead::set_has_cltaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgHead::clear_has_cltaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgHead::clear_cltaddr() {
  cltaddr_ = 0;
  clear_has_cltaddr();
}
inline ::google::protobuf::int32 MsgHead::cltaddr() const {
  return cltaddr_;
}
inline void MsgHead::set_cltaddr(::google::protobuf::int32 value) {
  set_has_cltaddr();
  cltaddr_ = value;
}

// optional bytes content = 7;
inline bool MsgHead::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgHead::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgHead::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgHead::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MsgHead::content() const {
  return *content_;
}
inline void MsgHead::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MsgHead::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MsgHead::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgHead::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MsgHead::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgHead::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msghead

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msghead::emsgType>() {
  return ::msghead::emsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msghead_2eproto__INCLUDED
