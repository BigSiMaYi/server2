// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msghead.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msghead.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msghead {

namespace {

const ::google::protobuf::Descriptor* MsgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHead_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* emsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msghead_2eproto() {
  protobuf_AddDesc_msghead_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msghead.proto");
  GOOGLE_CHECK(file != NULL);
  MsgHead_descriptor_ = file->message_type(0);
  static const int MsgHead_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, msgsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, repidentity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, closeclientsession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, cltaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, content_),
  };
  MsgHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHead_descriptor_,
      MsgHead::default_instance_,
      MsgHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHead));
  emsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msghead_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHead_descriptor_, &MsgHead::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msghead_2eproto() {
  delete MsgHead::default_instance_;
  delete MsgHead_reflection_;
}

void protobuf_AddDesc_msghead_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmsghead.proto\022\007msghead\"\242\001\n\007MsgHead\022\017\n\007"
    "msgSize\030\001 \002(\005\022 \n\005msgID\030\002 \002(\0162\021.msghead.e"
    "msgType\022\021\n\tsessionID\030\003 \001(\t\022\023\n\013repIdentit"
    "y\030\004 \001(\t\022\032\n\022closeClientSession\030\005 \001(\005\022\017\n\007c"
    "ltAddr\030\006 \001(\005\022\017\n\007content\030\007 \001(\014*\366\017\n\010emsgTy"
    "pe\022\023\n\017e_g2log_disconn\020\001\022\023\n\017e_c2l_heartbe"
    "at\020\010\022\026\n\021e_w2check_svr_reg\020\255\002\022\032\n\025e_check2"
    "w_svr_reg_res\020\256\002\022\030\n\023e_w2check_svr_unreg\020"
    "\257\002\022\034\n\027e_check2w_svr_unreg_res\020\260\002\022\026\n\021e_w2"
    "check_acc_chk\020\365\003\022\032\n\025e_w2check_acc_chk_re"
    "s\020\366\003\022\026\n\021e_w2check_get_pid\020\367\003\022\032\n\025e_check2"
    "w_get_pid_res\020\370\003\022\030\n\023e_login2chk_acc_chk\020"
    "\351\007\022\034\n\027e_chk2login_acc_chk_res\020\352\007\022\026\n\021e_cl"
    "t2login_login\020\353\007\022\032\n\025e_login2clt_login_re"
    "t\020\354\007\022\031\n\024e_clt2login_user_reg\020\355\007\022\035\n\030e_log"
    "in2clt_user_reg_ret\020\356\007\022\030\n\023e_clt2login_re"
    "q_SMS\020\357\007\022\034\n\027e_login2clt_req_SMS_ret\020\360\007\022\033"
    "\n\026e_login2websvr_req_SMS\020\323\010\022\037\n\032e_websvr2"
    "login_req_SMS_ret\020\324\010\022\034\n\027e_clt2login_acc_"
    "binding\020\361\007\022 \n\033e_login2clt_acc_binding_re"
    "t\020\362\007\022\037\n\032e_clt2login_alipay_binding\020\363\007\022#\n"
    "\036e_login2clt_alipay_binding_ret\020\364\007\022\035\n\030e_"
    "clt2login_retrieve_pwd\020\365\007\022!\n\034e_login2clt"
    "_retrieve_pwd_ret\020\366\007\022\031\n\024e_w2chk_req_robo"
    "tPID\020\367\007\022\035\n\030e_chk2w_req_robotPID_ret\020\370\007\022\036"
    "\n\031e_chk2w_pub_phone_binding\020\371\007\022\032\n\025e_clt2"
    "login_req_token\020\373\007\022\036\n\031e_login2clt_req_to"
    "ken_ret\020\374\007\022\034\n\027e_clt2login_reqReCharge\020\375\007"
    "\022 \n\033e_login2clt_reqRecharge_ret\020\376\007\022\033\n\026e_"
    "login2chk_reqOrderID\020\377\007\022\037\n\032e_chk2login_r"
    "eqOrderID_ret\020\200\010\022\034\n\027e_login2web_reqrecha"
    "rge\020\201\010\022 \n\033e_web2login_reqrechareg_ret\020\202\010"
    "\022\036\n\031e_chk2login_pub_kick_user\020\217\010\022\030\n\023e_w2"
    "chk_up_userstat\020\334\013\022\030\n\023e_chk2w_up_usersta"
    "t\020\335\013\022\026\n\021e_recharge2chk_cb\020\300\014\022\032\n\025e_chk2re"
    "charge_cb_ret\020\301\014\022!\n\034e_ckk2world_pub_rech"
    "arge_ret\020\302\014\022\037\n\032e_w2chk_get_unChecked_lis"
    "t\020\303\014\022#\n\036e_chk2w_get_unChecked_list_ret\020\304"
    "\014\022\037\n\032e_w2chk_cancle_check_order\020\305\014\022#\n\036e_"
    "chk2w_cancle_check_order_ret\020\306\014\022\033\n\026e_w2c"
    "hk_exchange_order\020\307\014\022\037\n\032e_chk2w_exchange"
    "_order_ret\020\310\014\022\035\n\030e_chk2login_pub_roomlis"
    "t\020\244\r\022\022\n\re_error_begin\020\277>\022\025\n\020e_error_acco"
    "rpwd\020\300>\022\022\n\re_error_noacc\020\301>\022\033\n\026e_error_a"
    "ccpwd_illegal\020\302>\022\034\n\027e_error_accbinding_r"
    "et1\020\303>\022\034\n\027e_error_accbinding_ret2\020\304>\022\034\n\027"
    "e_error_accbinding_ret3\020\305>\022\034\n\027e_error_al"
    "ibinding_ret1\020\306>\022\034\n\027e_error_alibinding_r"
    "et2\020\307>\022\036\n\031e_error_retrieve_pwd_ret1\020\310>\022\027"
    "\n\022e_error_login_ret1\020\311>\022\027\n\022e_error_login"
    "_ret2\020\312>\022\027\n\022e_error_login_ret3\020\313>\022\027\n\022e_e"
    "rror_login_ret4\020\314>\022\027\n\022e_error_login_ret5"
    "\020\315>\022\027\n\022e_error_login_ret6\020\316>\022\027\n\022e_error_"
    "login_ret7\020\317>\022\027\n\022e_error_login_ret8\020\320>\022\023"
    "\n\016e_error_to_clt\020\250F\022\024\n\017e_error_clt_dis\020\251"
    "F\022\033\n\026e_logic2logsvr_gameLog\020\220N", 2230);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msghead.proto", &protobuf_RegisterTypes);
  MsgHead::default_instance_ = new MsgHead();
  MsgHead::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msghead_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msghead_2eproto {
  StaticDescriptorInitializer_msghead_2eproto() {
    protobuf_AddDesc_msghead_2eproto();
  }
} static_descriptor_initializer_msghead_2eproto_;
const ::google::protobuf::EnumDescriptor* emsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emsgType_descriptor_;
}
bool emsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 8:
    case 301:
    case 302:
    case 303:
    case 304:
    case 501:
    case 502:
    case 503:
    case 504:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1039:
    case 1107:
    case 1108:
    case 1500:
    case 1501:
    case 1600:
    case 1601:
    case 1602:
    case 1603:
    case 1604:
    case 1605:
    case 1606:
    case 1607:
    case 1608:
    case 1700:
    case 7999:
    case 8000:
    case 8001:
    case 8002:
    case 8003:
    case 8004:
    case 8005:
    case 8006:
    case 8007:
    case 8008:
    case 8009:
    case 8010:
    case 8011:
    case 8012:
    case 8013:
    case 8014:
    case 8015:
    case 8016:
    case 9000:
    case 9001:
    case 10000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHead::kMsgSizeFieldNumber;
const int MsgHead::kMsgIDFieldNumber;
const int MsgHead::kSessionIDFieldNumber;
const int MsgHead::kRepIdentityFieldNumber;
const int MsgHead::kCloseClientSessionFieldNumber;
const int MsgHead::kCltAddrFieldNumber;
const int MsgHead::kContentFieldNumber;
#endif  // !_MSC_VER

MsgHead::MsgHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgHead::InitAsDefaultInstance() {
}

MsgHead::MsgHead(const MsgHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgHead::SharedCtor() {
  _cached_size_ = 0;
  msgsize_ = 0;
  msgid_ = 1;
  sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  repidentity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  closeclientsession_ = 0;
  cltaddr_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHead::~MsgHead() {
  SharedDtor();
}

void MsgHead::SharedDtor() {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (repidentity_ != &::google::protobuf::internal::kEmptyString) {
    delete repidentity_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void MsgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHead_descriptor_;
}

const MsgHead& MsgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msghead_2eproto();
  return *default_instance_;
}

MsgHead* MsgHead::default_instance_ = NULL;

MsgHead* MsgHead::New() const {
  return new MsgHead;
}

void MsgHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgsize_ = 0;
    msgid_ = 1;
    if (has_sessionid()) {
      if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
        sessionid_->clear();
      }
    }
    if (has_repidentity()) {
      if (repidentity_ != &::google::protobuf::internal::kEmptyString) {
        repidentity_->clear();
      }
    }
    closeclientsession_ = 0;
    cltaddr_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgSize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgsize_)));
          set_has_msgsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgID;
        break;
      }

      // required .msghead.emsgType msgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgID:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msghead::emsgType_IsValid(value)) {
            set_msgid(static_cast< ::msghead::emsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sessionID;
        break;
      }

      // optional string sessionID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sessionid().data(), this->sessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_repIdentity;
        break;
      }

      // optional string repIdentity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repIdentity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_repidentity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->repidentity().data(), this->repidentity().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_closeClientSession;
        break;
      }

      // optional int32 closeClientSession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closeClientSession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closeclientsession_)));
          set_has_closeclientsession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cltAddr;
        break;
      }

      // optional int32 cltAddr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cltAddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cltaddr_)));
          set_has_cltaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // optional bytes content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 msgSize = 1;
  if (has_msgsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgsize(), output);
  }

  // required .msghead.emsgType msgID = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgid(), output);
  }

  // optional string sessionID = 3;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sessionid(), output);
  }

  // optional string repIdentity = 4;
  if (has_repidentity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->repidentity().data(), this->repidentity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->repidentity(), output);
  }

  // optional int32 closeClientSession = 5;
  if (has_closeclientsession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->closeclientsession(), output);
  }

  // optional int32 cltAddr = 6;
  if (has_cltaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cltaddr(), output);
  }

  // optional bytes content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgSize = 1;
  if (has_msgsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgsize(), target);
  }

  // required .msghead.emsgType msgID = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgid(), target);
  }

  // optional string sessionID = 3;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sessionid(), target);
  }

  // optional string repIdentity = 4;
  if (has_repidentity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->repidentity().data(), this->repidentity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->repidentity(), target);
  }

  // optional int32 closeClientSession = 5;
  if (has_closeclientsession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->closeclientsession(), target);
  }

  // optional int32 cltAddr = 6;
  if (has_cltaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cltaddr(), target);
  }

  // optional bytes content = 7;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgSize = 1;
    if (has_msgsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgsize());
    }

    // required .msghead.emsgType msgID = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // optional string sessionID = 3;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessionid());
    }

    // optional string repIdentity = 4;
    if (has_repidentity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->repidentity());
    }

    // optional int32 closeClientSession = 5;
    if (has_closeclientsession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closeclientsession());
    }

    // optional int32 cltAddr = 6;
    if (has_cltaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cltaddr());
    }

    // optional bytes content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHead::MergeFrom(const MsgHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgsize()) {
      set_msgsize(from.msgsize());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_repidentity()) {
      set_repidentity(from.repidentity());
    }
    if (from.has_closeclientsession()) {
      set_closeclientsession(from.closeclientsession());
    }
    if (from.has_cltaddr()) {
      set_cltaddr(from.cltaddr());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHead::CopyFrom(const MsgHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgHead::Swap(MsgHead* other) {
  if (other != this) {
    std::swap(msgsize_, other->msgsize_);
    std::swap(msgid_, other->msgid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(repidentity_, other->repidentity_);
    std::swap(closeclientsession_, other->closeclientsession_);
    std::swap(cltaddr_, other->cltaddr_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHead_descriptor_;
  metadata.reflection = MsgHead_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msghead

// @@protoc_insertion_point(global_scope)
