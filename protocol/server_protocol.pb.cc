// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace server_protocols {

namespace {

const ::google::protobuf::Descriptor* packet_server_register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_server_register_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_server_register_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_server_register_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_other_server_connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_other_server_connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_other_server_disconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_other_server_disconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_updata_servers_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_updata_servers_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_updata_self_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_updata_self_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_server_connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_server_connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_room_register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_room_register_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_server_connect_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_server_connect_result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* packet_server_connect_result_e_server_connect_result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* packet_transmit_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_transmit_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_broadcast_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_broadcast_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_broadcast_msg2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_broadcast_msg2_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_heartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_player_connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_player_connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_player_disconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_player_disconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_regedit_route_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_regedit_route_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_gate_setlogic_ok_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_gate_setlogic_ok_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_clear_session_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_clear_session_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_http_command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_http_command_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_get_ip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_get_ip_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_get_ip_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_get_ip_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_5fprotocol_2eproto() {
  protobuf_AddDesc_server_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  packet_server_register_descriptor_ = file->message_type(0);
  static const int packet_server_register_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_register, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_register, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_register, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_register, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_register, server_ip_),
  };
  packet_server_register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_server_register_descriptor_,
      packet_server_register::default_instance_,
      packet_server_register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_server_register));
  packet_server_register_result_descriptor_ = file->message_type(1);
  static const int packet_server_register_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_register_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_register_result, server_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_register_result, group_id_),
  };
  packet_server_register_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_server_register_result_descriptor_,
      packet_server_register_result::default_instance_,
      packet_server_register_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_register_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_register_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_server_register_result));
  packet_other_server_connect_descriptor_ = file->message_type(2);
  static const int packet_other_server_connect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_other_server_connect, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_other_server_connect, sinfo_),
  };
  packet_other_server_connect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_other_server_connect_descriptor_,
      packet_other_server_connect::default_instance_,
      packet_other_server_connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_other_server_connect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_other_server_connect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_other_server_connect));
  packet_other_server_disconnect_descriptor_ = file->message_type(3);
  static const int packet_other_server_disconnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_other_server_disconnect, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_other_server_disconnect, server_id_),
  };
  packet_other_server_disconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_other_server_disconnect_descriptor_,
      packet_other_server_disconnect::default_instance_,
      packet_other_server_disconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_other_server_disconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_other_server_disconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_other_server_disconnect));
  packet_updata_servers_info_descriptor_ = file->message_type(4);
  static const int packet_updata_servers_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_updata_servers_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_updata_servers_info, sinfos_),
  };
  packet_updata_servers_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_updata_servers_info_descriptor_,
      packet_updata_servers_info::default_instance_,
      packet_updata_servers_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_updata_servers_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_updata_servers_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_updata_servers_info));
  packet_updata_self_info_descriptor_ = file->message_type(5);
  static const int packet_updata_self_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_updata_self_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_updata_self_info, attributes_),
  };
  packet_updata_self_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_updata_self_info_descriptor_,
      packet_updata_self_info::default_instance_,
      packet_updata_self_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_updata_self_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_updata_self_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_updata_self_info));
  packet_server_connect_descriptor_ = file->message_type(6);
  static const int packet_server_connect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_connect, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_connect, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_connect, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_connect, info_),
  };
  packet_server_connect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_server_connect_descriptor_,
      packet_server_connect::default_instance_,
      packet_server_connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_connect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_connect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_server_connect));
  packet_room_register_descriptor_ = file->message_type(7);
  static const int packet_room_register_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_room_register, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_room_register, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_room_register, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_room_register, info_),
  };
  packet_room_register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_room_register_descriptor_,
      packet_room_register::default_instance_,
      packet_room_register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_room_register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_room_register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_room_register));
  packet_server_connect_result_descriptor_ = file->message_type(8);
  static const int packet_server_connect_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_connect_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_connect_result, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_connect_result, ret_),
  };
  packet_server_connect_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_server_connect_result_descriptor_,
      packet_server_connect_result::default_instance_,
      packet_server_connect_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_connect_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_server_connect_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_server_connect_result));
  packet_server_connect_result_e_server_connect_result_descriptor_ = packet_server_connect_result_descriptor_->enum_type(0);
  packet_transmit_msg_descriptor_ = file->message_type(9);
  static const int packet_transmit_msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_transmit_msg, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_transmit_msg, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_transmit_msg, msgpak_),
  };
  packet_transmit_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_transmit_msg_descriptor_,
      packet_transmit_msg::default_instance_,
      packet_transmit_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_transmit_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_transmit_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_transmit_msg));
  packet_broadcast_msg_descriptor_ = file->message_type(10);
  static const int packet_broadcast_msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_broadcast_msg, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_broadcast_msg, sessionids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_broadcast_msg, msgpak_),
  };
  packet_broadcast_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_broadcast_msg_descriptor_,
      packet_broadcast_msg::default_instance_,
      packet_broadcast_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_broadcast_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_broadcast_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_broadcast_msg));
  packet_broadcast_msg2_descriptor_ = file->message_type(11);
  static const int packet_broadcast_msg2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_broadcast_msg2, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_broadcast_msg2, game_sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_broadcast_msg2, msgpak_),
  };
  packet_broadcast_msg2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_broadcast_msg2_descriptor_,
      packet_broadcast_msg2::default_instance_,
      packet_broadcast_msg2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_broadcast_msg2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_broadcast_msg2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_broadcast_msg2));
  packet_heartbeat_descriptor_ = file->message_type(12);
  static const int packet_heartbeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_heartbeat, packet_id_),
  };
  packet_heartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_heartbeat_descriptor_,
      packet_heartbeat::default_instance_,
      packet_heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_heartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_heartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_heartbeat));
  packet_player_connect_descriptor_ = file->message_type(13);
  static const int packet_player_connect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_player_connect, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_player_connect, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_player_connect, logicid_),
  };
  packet_player_connect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_player_connect_descriptor_,
      packet_player_connect::default_instance_,
      packet_player_connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_player_connect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_player_connect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_player_connect));
  packet_player_disconnect_descriptor_ = file->message_type(14);
  static const int packet_player_disconnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_player_disconnect, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_player_disconnect, sessionid_),
  };
  packet_player_disconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_player_disconnect_descriptor_,
      packet_player_disconnect::default_instance_,
      packet_player_disconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_player_disconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_player_disconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_player_disconnect));
  packet_regedit_route_msg_descriptor_ = file->message_type(15);
  static const int packet_regedit_route_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_regedit_route_msg, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_regedit_route_msg, msgids_),
  };
  packet_regedit_route_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_regedit_route_msg_descriptor_,
      packet_regedit_route_msg::default_instance_,
      packet_regedit_route_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_regedit_route_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_regedit_route_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_regedit_route_msg));
  packet_gate_setlogic_ok_descriptor_ = file->message_type(16);
  static const int packet_gate_setlogic_ok_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_gate_setlogic_ok, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_gate_setlogic_ok, sessionid_),
  };
  packet_gate_setlogic_ok_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_gate_setlogic_ok_descriptor_,
      packet_gate_setlogic_ok::default_instance_,
      packet_gate_setlogic_ok_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_gate_setlogic_ok, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_gate_setlogic_ok, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_gate_setlogic_ok));
  packet_clear_session_descriptor_ = file->message_type(17);
  static const int packet_clear_session_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_clear_session, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_clear_session, sessionid_),
  };
  packet_clear_session_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_clear_session_descriptor_,
      packet_clear_session::default_instance_,
      packet_clear_session_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_clear_session, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_clear_session, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_clear_session));
  packet_http_command_descriptor_ = file->message_type(18);
  static const int packet_http_command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_http_command, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_http_command, cmdstr_),
  };
  packet_http_command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_http_command_descriptor_,
      packet_http_command::default_instance_,
      packet_http_command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_http_command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_http_command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_http_command));
  packet_get_ip_descriptor_ = file->message_type(19);
  static const int packet_get_ip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_get_ip, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_get_ip, sessionid_),
  };
  packet_get_ip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_get_ip_descriptor_,
      packet_get_ip::default_instance_,
      packet_get_ip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_get_ip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_get_ip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_get_ip));
  packet_get_ip_result_descriptor_ = file->message_type(20);
  static const int packet_get_ip_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_get_ip_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_get_ip_result, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_get_ip_result, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_get_ip_result, port_),
  };
  packet_get_ip_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_get_ip_result_descriptor_,
      packet_get_ip_result::default_instance_,
      packet_get_ip_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_get_ip_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_get_ip_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_get_ip_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_server_register_descriptor_, &packet_server_register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_server_register_result_descriptor_, &packet_server_register_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_other_server_connect_descriptor_, &packet_other_server_connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_other_server_disconnect_descriptor_, &packet_other_server_disconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_updata_servers_info_descriptor_, &packet_updata_servers_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_updata_self_info_descriptor_, &packet_updata_self_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_server_connect_descriptor_, &packet_server_connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_room_register_descriptor_, &packet_room_register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_server_connect_result_descriptor_, &packet_server_connect_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_transmit_msg_descriptor_, &packet_transmit_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_broadcast_msg_descriptor_, &packet_broadcast_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_broadcast_msg2_descriptor_, &packet_broadcast_msg2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_heartbeat_descriptor_, &packet_heartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_player_connect_descriptor_, &packet_player_connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_player_disconnect_descriptor_, &packet_player_disconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_regedit_route_msg_descriptor_, &packet_regedit_route_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_gate_setlogic_ok_descriptor_, &packet_gate_setlogic_ok::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_clear_session_descriptor_, &packet_clear_session::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_http_command_descriptor_, &packet_http_command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_get_ip_descriptor_, &packet_get_ip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_get_ip_result_descriptor_, &packet_get_ip_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_5fprotocol_2eproto() {
  delete packet_server_register::default_instance_;
  delete packet_server_register_reflection_;
  delete packet_server_register_result::default_instance_;
  delete packet_server_register_result_reflection_;
  delete packet_other_server_connect::default_instance_;
  delete packet_other_server_connect_reflection_;
  delete packet_other_server_disconnect::default_instance_;
  delete packet_other_server_disconnect_reflection_;
  delete packet_updata_servers_info::default_instance_;
  delete packet_updata_servers_info_reflection_;
  delete packet_updata_self_info::default_instance_;
  delete packet_updata_self_info_reflection_;
  delete packet_server_connect::default_instance_;
  delete packet_server_connect_reflection_;
  delete packet_room_register::default_instance_;
  delete packet_room_register_reflection_;
  delete packet_server_connect_result::default_instance_;
  delete packet_server_connect_result_reflection_;
  delete packet_transmit_msg::default_instance_;
  delete packet_transmit_msg_reflection_;
  delete packet_broadcast_msg::default_instance_;
  delete packet_broadcast_msg_reflection_;
  delete packet_broadcast_msg2::default_instance_;
  delete packet_broadcast_msg2_reflection_;
  delete packet_heartbeat::default_instance_;
  delete packet_heartbeat_reflection_;
  delete packet_player_connect::default_instance_;
  delete packet_player_connect_reflection_;
  delete packet_player_disconnect::default_instance_;
  delete packet_player_disconnect_reflection_;
  delete packet_regedit_route_msg::default_instance_;
  delete packet_regedit_route_msg_reflection_;
  delete packet_gate_setlogic_ok::default_instance_;
  delete packet_gate_setlogic_ok_reflection_;
  delete packet_clear_session::default_instance_;
  delete packet_clear_session_reflection_;
  delete packet_http_command::default_instance_;
  delete packet_http_command_reflection_;
  delete packet_get_ip::default_instance_;
  delete packet_get_ip_reflection_;
  delete packet_get_ip_result::default_instance_;
  delete packet_get_ip_result_reflection_;
}

void protobuf_AddDesc_server_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::server_protocols::protobuf_AddDesc_server_5fbase_2eproto();
  ::server_protocols::protobuf_AddDesc_server_5fmsg_5ftype_2eproto();
  ::login2chk::protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025server_protocol.proto\022\020server_protocol"
    "s\032\021server_base.proto\032\025server_msg_type.pr"
    "oto\032\030login2chk_msg_type.proto\"\376\001\n\026packet"
    "_server_register\022M\n\tpacket_id\030\001 \001(\0162#.se"
    "rver_protocols.e_server_msg_type:\025e_mst_"
    "server_register\0224\n\013server_type\030\002 \001(\0162\037.s"
    "erver_protocols.e_server_type\022\023\n\013server_"
    "port\030\003 \001(\007\0227\n\nattributes\030\004 \001(\0132#.server_"
    "protocols.server_attributes\022\021\n\tserver_IP"
    "\030\005 \002(\t\"\234\001\n\035packet_server_register_result"
    "\022T\n\tpacket_id\030\001 \001(\0162#.server_protocols.e"
    "_server_msg_type:\034e_mst_server_register_"
    "result\022\023\n\013server_time\030\002 \001(\006\022\020\n\010group_id\030"
    "\003 \001(\007\"\237\001\n\033packet_other_server_connect\022R\n"
    "\tpacket_id\030\001 \001(\0162#.server_protocols.e_se"
    "rver_msg_type:\032e_mst_other_server_connec"
    "t\022,\n\005sinfo\030\002 \001(\0132\035.server_protocols.serv"
    "er_info\"\212\001\n\036packet_other_server_disconne"
    "ct\022U\n\tpacket_id\030\001 \001(\0162#.server_protocols"
    ".e_server_msg_type:\035e_mst_other_server_d"
    "isconnect\022\021\n\tserver_id\030\002 \001(\007\"\236\001\n\032packet_"
    "updata_servers_info\022Q\n\tpacket_id\030\001 \001(\0162#"
    ".server_protocols.e_server_msg_type:\031e_m"
    "st_updata_servers_info\022-\n\006sinfos\030\002 \003(\0132\035"
    ".server_protocols.server_info\"\242\001\n\027packet"
    "_updata_self_info\022N\n\tpacket_id\030\001 \001(\0162#.s"
    "erver_protocols.e_server_msg_type:\026e_mst"
    "_updata_self_info\0227\n\nattributes\030\002 \001(\0132#."
    "server_protocols.server_attributes\"\321\001\n\025p"
    "acket_server_connect\022L\n\tpacket_id\030\001 \001(\0162"
    "#.server_protocols.e_server_msg_type:\024e_"
    "mst_server_connect\022\021\n\tserver_id\030\002 \001(\007\0224\n"
    "\013server_type\030\003 \001(\0162\037.server_protocols.e_"
    "server_type\022!\n\004info\030\004 \003(\0132\023.login2chk.Ro"
    "omInfo\"\323\001\n\024packet_room_register\022O\n\tpacke"
    "t_id\030\001 \001(\0162#.server_protocols.e_server_m"
    "sg_type:\027e_mst_room_list_connect\022\021\n\tserv"
    "er_id\030\002 \001(\007\0224\n\013server_type\030\003 \001(\0162\037.serve"
    "r_protocols.e_server_type\022!\n\004info\030\004 \003(\0132"
    "\023.login2chk.RoomInfo\"\313\002\n\034packet_server_c"
    "onnect_result\022S\n\tpacket_id\030\001 \001(\0162#.serve"
    "r_protocols.e_server_msg_type:\033e_mst_ser"
    "ver_connect_result\0224\n\013server_type\030\002 \001(\0162"
    "\037.server_protocols.e_server_type\022b\n\003ret\030"
    "\003 \001(\0162F.server_protocols.packet_server_c"
    "onnect_result.e_server_connect_result:\re"
    "_scr_success\"<\n\027e_server_connect_result\022"
    "\021\n\re_scr_success\020\000\022\016\n\ne_scr_fail\020\001\"\242\001\n\023p"
    "acket_transmit_msg\022J\n\tpacket_id\030\001 \001(\0162#."
    "server_protocols.e_server_msg_type:\022e_ms"
    "t_transmit_msg\022\021\n\tsessionid\030\002 \001(\007\022,\n\006msg"
    "pak\030\003 \001(\0132\034.server_protocols.msg_packet\""
    "\251\001\n\024packet_broadcast_msg\022K\n\tpacket_id\030\001 "
    "\001(\0162#.server_protocols.e_server_msg_type"
    ":\023e_mst_broadcast_msg\022\026\n\nsessionids\030\002 \003("
    "\007B\002\020\001\022,\n\006msgpak\030\003 \001(\0132\034.server_protocols"
    ".msg_packet\"\250\001\n\025packet_broadcast_msg2\022L\n"
    "\tpacket_id\030\001 \001(\0162#.server_protocols.e_se"
    "rver_msg_type:\024e_mst_broadcast_msg2\022\023\n\010g"
    "ame_sid\030\002 \001(\007:\0010\022,\n\006msgpak\030\003 \001(\0132\034.serve"
    "r_protocols.msg_packet\"[\n\020packet_heartbe"
    "at\022G\n\tpacket_id\030\001 \001(\0162#.server_protocols"
    ".e_server_msg_type:\017e_mst_heartbeat\"\211\001\n\025"
    "packet_player_connect\022L\n\tpacket_id\030\001 \001(\016"
    "2#.server_protocols.e_server_msg_type:\024e"
    "_mst_player_connect\022\021\n\tsessionid\030\002 \001(\007\022\017"
    "\n\007logicid\030\003 \001(\007\"~\n\030packet_player_disconn"
    "ect\022O\n\tpacket_id\030\001 \001(\0162#.server_protocol"
    "s.e_server_msg_type:\027e_mst_player_discon"
    "nect\022\021\n\tsessionid\030\002 \001(\007\"\177\n\030packet_regedi"
    "t_route_msg\022O\n\tpacket_id\030\001 \001(\0162#.server_"
    "protocols.e_server_msg_type:\027e_mst_reged"
    "it_route_msg\022\022\n\006msgids\030\002 \003(\007B\002\020\001\"|\n\027pack"
    "et_gate_setlogic_ok\022N\n\tpacket_id\030\001 \001(\0162#"
    ".server_protocols.e_server_msg_type:\026e_m"
    "st_gate_setlogic_ok\022\021\n\tsessionid\030\002 \001(\007\"v"
    "\n\024packet_clear_session\022K\n\tpacket_id\030\001 \001("
    "\0162#.server_protocols.e_server_msg_type:\023"
    "e_mst_clear_session\022\021\n\tsessionid\030\002 \001(\007\"q"
    "\n\023packet_http_command\022J\n\tpacket_id\030\001 \001(\016"
    "2#.server_protocols.e_server_msg_type:\022e"
    "_mst_http_command\022\016\n\006cmdstr\030\002 \003(\t\"h\n\rpac"
    "ket_get_ip\022D\n\tpacket_id\030\001 \001(\0162#.server_p"
    "rotocols.e_server_msg_type:\014e_mst_get_ip"
    "\022\021\n\tsessionid\030\002 \001(\007\"\220\001\n\024packet_get_ip_re"
    "sult\022K\n\tpacket_id\030\001 \001(\0162#.server_protoco"
    "ls.e_server_msg_type:\023e_mst_get_ip_resul"
    "t\022\021\n\tsessionid\030\002 \001(\007\022\n\n\002ip\030\003 \001(\t\022\014\n\004port"
    "\030\004 \001(\007", 3526);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_protocol.proto", &protobuf_RegisterTypes);
  packet_server_register::default_instance_ = new packet_server_register();
  packet_server_register_result::default_instance_ = new packet_server_register_result();
  packet_other_server_connect::default_instance_ = new packet_other_server_connect();
  packet_other_server_disconnect::default_instance_ = new packet_other_server_disconnect();
  packet_updata_servers_info::default_instance_ = new packet_updata_servers_info();
  packet_updata_self_info::default_instance_ = new packet_updata_self_info();
  packet_server_connect::default_instance_ = new packet_server_connect();
  packet_room_register::default_instance_ = new packet_room_register();
  packet_server_connect_result::default_instance_ = new packet_server_connect_result();
  packet_transmit_msg::default_instance_ = new packet_transmit_msg();
  packet_broadcast_msg::default_instance_ = new packet_broadcast_msg();
  packet_broadcast_msg2::default_instance_ = new packet_broadcast_msg2();
  packet_heartbeat::default_instance_ = new packet_heartbeat();
  packet_player_connect::default_instance_ = new packet_player_connect();
  packet_player_disconnect::default_instance_ = new packet_player_disconnect();
  packet_regedit_route_msg::default_instance_ = new packet_regedit_route_msg();
  packet_gate_setlogic_ok::default_instance_ = new packet_gate_setlogic_ok();
  packet_clear_session::default_instance_ = new packet_clear_session();
  packet_http_command::default_instance_ = new packet_http_command();
  packet_get_ip::default_instance_ = new packet_get_ip();
  packet_get_ip_result::default_instance_ = new packet_get_ip_result();
  packet_server_register::default_instance_->InitAsDefaultInstance();
  packet_server_register_result::default_instance_->InitAsDefaultInstance();
  packet_other_server_connect::default_instance_->InitAsDefaultInstance();
  packet_other_server_disconnect::default_instance_->InitAsDefaultInstance();
  packet_updata_servers_info::default_instance_->InitAsDefaultInstance();
  packet_updata_self_info::default_instance_->InitAsDefaultInstance();
  packet_server_connect::default_instance_->InitAsDefaultInstance();
  packet_room_register::default_instance_->InitAsDefaultInstance();
  packet_server_connect_result::default_instance_->InitAsDefaultInstance();
  packet_transmit_msg::default_instance_->InitAsDefaultInstance();
  packet_broadcast_msg::default_instance_->InitAsDefaultInstance();
  packet_broadcast_msg2::default_instance_->InitAsDefaultInstance();
  packet_heartbeat::default_instance_->InitAsDefaultInstance();
  packet_player_connect::default_instance_->InitAsDefaultInstance();
  packet_player_disconnect::default_instance_->InitAsDefaultInstance();
  packet_regedit_route_msg::default_instance_->InitAsDefaultInstance();
  packet_gate_setlogic_ok::default_instance_->InitAsDefaultInstance();
  packet_clear_session::default_instance_->InitAsDefaultInstance();
  packet_http_command::default_instance_->InitAsDefaultInstance();
  packet_get_ip::default_instance_->InitAsDefaultInstance();
  packet_get_ip_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_5fprotocol_2eproto {
  StaticDescriptorInitializer_server_5fprotocol_2eproto() {
    protobuf_AddDesc_server_5fprotocol_2eproto();
  }
} static_descriptor_initializer_server_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packet_server_register::kPacketIdFieldNumber;
const int packet_server_register::kServerTypeFieldNumber;
const int packet_server_register::kServerPortFieldNumber;
const int packet_server_register::kAttributesFieldNumber;
const int packet_server_register::kServerIPFieldNumber;
#endif  // !_MSC_VER

packet_server_register::packet_server_register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_server_register::InitAsDefaultInstance() {
  attributes_ = const_cast< ::server_protocols::server_attributes*>(&::server_protocols::server_attributes::default_instance());
}

packet_server_register::packet_server_register(const packet_server_register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_server_register::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 0;
  server_type_ = 0;
  server_port_ = 0u;
  attributes_ = NULL;
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_server_register::~packet_server_register() {
  SharedDtor();
}

void packet_server_register::SharedDtor() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete server_ip_;
  }
  if (this != default_instance_) {
    delete attributes_;
  }
}

void packet_server_register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_server_register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_server_register_descriptor_;
}

const packet_server_register& packet_server_register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_server_register* packet_server_register::default_instance_ = NULL;

packet_server_register* packet_server_register::New() const {
  return new packet_server_register;
}

void packet_server_register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 0;
    server_type_ = 0;
    server_port_ = 0u;
    if (has_attributes()) {
      if (attributes_ != NULL) attributes_->::server_protocols::server_attributes::Clear();
    }
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
        server_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_server_register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_register];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_type;
        break;
      }

      // optional .server_protocols.e_server_type server_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_type_IsValid(value)) {
            set_server_type(static_cast< ::server_protocols::e_server_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_server_port;
        break;
      }

      // optional fixed32 server_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attributes;
        break;
      }

      // optional .server_protocols.server_attributes attributes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_IP;
        break;
      }

      // required string server_IP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_ip().data(), this->server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_server_register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_register];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .server_protocols.e_server_type server_type = 2;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->server_type(), output);
  }

  // optional fixed32 server_port = 3;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->server_port(), output);
  }

  // optional .server_protocols.server_attributes attributes = 4;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attributes(), output);
  }

  // required string server_IP = 5;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->server_ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_server_register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_register];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .server_protocols.e_server_type server_type = 2;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->server_type(), target);
  }

  // optional fixed32 server_port = 3;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->server_port(), target);
  }

  // optional .server_protocols.server_attributes attributes = 4;
  if (has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attributes(), target);
  }

  // required string server_IP = 5;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->server_ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_server_register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_register];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .server_protocols.e_server_type server_type = 2;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }

    // optional fixed32 server_port = 3;
    if (has_server_port()) {
      total_size += 1 + 4;
    }

    // optional .server_protocols.server_attributes attributes = 4;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }

    // required string server_IP = 5;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_server_register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_server_register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_server_register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_server_register::MergeFrom(const packet_server_register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_attributes()) {
      mutable_attributes()->::server_protocols::server_attributes::MergeFrom(from.attributes());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_server_register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_server_register::CopyFrom(const packet_server_register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_server_register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void packet_server_register::Swap(packet_server_register* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(server_type_, other->server_type_);
    std::swap(server_port_, other->server_port_);
    std::swap(attributes_, other->attributes_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_server_register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_server_register_descriptor_;
  metadata.reflection = packet_server_register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_server_register_result::kPacketIdFieldNumber;
const int packet_server_register_result::kServerTimeFieldNumber;
const int packet_server_register_result::kGroupIdFieldNumber;
#endif  // !_MSC_VER

packet_server_register_result::packet_server_register_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_server_register_result::InitAsDefaultInstance() {
}

packet_server_register_result::packet_server_register_result(const packet_server_register_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_server_register_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 1;
  server_time_ = GOOGLE_ULONGLONG(0);
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_server_register_result::~packet_server_register_result() {
  SharedDtor();
}

void packet_server_register_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_server_register_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_server_register_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_server_register_result_descriptor_;
}

const packet_server_register_result& packet_server_register_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_server_register_result* packet_server_register_result::default_instance_ = NULL;

packet_server_register_result* packet_server_register_result::New() const {
  return new packet_server_register_result;
}

void packet_server_register_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 1;
    server_time_ = GOOGLE_ULONGLONG(0);
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_server_register_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_register_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_server_time;
        break;
      }

      // optional fixed64 server_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_group_id;
        break;
      }

      // optional fixed32 group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_server_register_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_register_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed64 server_time = 2;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->server_time(), output);
  }

  // optional fixed32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_server_register_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_register_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed64 server_time = 2;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->server_time(), target);
  }

  // optional fixed32 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_server_register_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_register_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed64 server_time = 2;
    if (has_server_time()) {
      total_size += 1 + 8;
    }

    // optional fixed32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_server_register_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_server_register_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_server_register_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_server_register_result::MergeFrom(const packet_server_register_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_server_register_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_server_register_result::CopyFrom(const packet_server_register_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_server_register_result::IsInitialized() const {

  return true;
}

void packet_server_register_result::Swap(packet_server_register_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(server_time_, other->server_time_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_server_register_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_server_register_result_descriptor_;
  metadata.reflection = packet_server_register_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_other_server_connect::kPacketIdFieldNumber;
const int packet_other_server_connect::kSinfoFieldNumber;
#endif  // !_MSC_VER

packet_other_server_connect::packet_other_server_connect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_other_server_connect::InitAsDefaultInstance() {
  sinfo_ = const_cast< ::server_protocols::server_info*>(&::server_protocols::server_info::default_instance());
}

packet_other_server_connect::packet_other_server_connect(const packet_other_server_connect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_other_server_connect::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 2;
  sinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_other_server_connect::~packet_other_server_connect() {
  SharedDtor();
}

void packet_other_server_connect::SharedDtor() {
  if (this != default_instance_) {
    delete sinfo_;
  }
}

void packet_other_server_connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_other_server_connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_other_server_connect_descriptor_;
}

const packet_other_server_connect& packet_other_server_connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_other_server_connect* packet_other_server_connect::default_instance_ = NULL;

packet_other_server_connect* packet_other_server_connect::New() const {
  return new packet_other_server_connect;
}

void packet_other_server_connect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 2;
    if (has_sinfo()) {
      if (sinfo_ != NULL) sinfo_->::server_protocols::server_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_other_server_connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_other_server_connect];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sinfo;
        break;
      }

      // optional .server_protocols.server_info sinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_other_server_connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_other_server_connect];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .server_protocols.server_info sinfo = 2;
  if (has_sinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_other_server_connect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_other_server_connect];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .server_protocols.server_info sinfo = 2;
  if (has_sinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_other_server_connect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_other_server_connect];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .server_protocols.server_info sinfo = 2;
    if (has_sinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_other_server_connect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_other_server_connect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_other_server_connect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_other_server_connect::MergeFrom(const packet_other_server_connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_sinfo()) {
      mutable_sinfo()->::server_protocols::server_info::MergeFrom(from.sinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_other_server_connect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_other_server_connect::CopyFrom(const packet_other_server_connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_other_server_connect::IsInitialized() const {

  return true;
}

void packet_other_server_connect::Swap(packet_other_server_connect* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(sinfo_, other->sinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_other_server_connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_other_server_connect_descriptor_;
  metadata.reflection = packet_other_server_connect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_other_server_disconnect::kPacketIdFieldNumber;
const int packet_other_server_disconnect::kServerIdFieldNumber;
#endif  // !_MSC_VER

packet_other_server_disconnect::packet_other_server_disconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_other_server_disconnect::InitAsDefaultInstance() {
}

packet_other_server_disconnect::packet_other_server_disconnect(const packet_other_server_disconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_other_server_disconnect::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 3;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_other_server_disconnect::~packet_other_server_disconnect() {
  SharedDtor();
}

void packet_other_server_disconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_other_server_disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_other_server_disconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_other_server_disconnect_descriptor_;
}

const packet_other_server_disconnect& packet_other_server_disconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_other_server_disconnect* packet_other_server_disconnect::default_instance_ = NULL;

packet_other_server_disconnect* packet_other_server_disconnect::New() const {
  return new packet_other_server_disconnect;
}

void packet_other_server_disconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 3;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_other_server_disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_other_server_disconnect];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_server_id;
        break;
      }

      // optional fixed32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_other_server_disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_other_server_disconnect];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_other_server_disconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_other_server_disconnect];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_other_server_disconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_other_server_disconnect];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_other_server_disconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_other_server_disconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_other_server_disconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_other_server_disconnect::MergeFrom(const packet_other_server_disconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_other_server_disconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_other_server_disconnect::CopyFrom(const packet_other_server_disconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_other_server_disconnect::IsInitialized() const {

  return true;
}

void packet_other_server_disconnect::Swap(packet_other_server_disconnect* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_other_server_disconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_other_server_disconnect_descriptor_;
  metadata.reflection = packet_other_server_disconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_updata_servers_info::kPacketIdFieldNumber;
const int packet_updata_servers_info::kSinfosFieldNumber;
#endif  // !_MSC_VER

packet_updata_servers_info::packet_updata_servers_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_updata_servers_info::InitAsDefaultInstance() {
}

packet_updata_servers_info::packet_updata_servers_info(const packet_updata_servers_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_updata_servers_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_updata_servers_info::~packet_updata_servers_info() {
  SharedDtor();
}

void packet_updata_servers_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_updata_servers_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_updata_servers_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_updata_servers_info_descriptor_;
}

const packet_updata_servers_info& packet_updata_servers_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_updata_servers_info* packet_updata_servers_info::default_instance_ = NULL;

packet_updata_servers_info* packet_updata_servers_info::New() const {
  return new packet_updata_servers_info;
}

void packet_updata_servers_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 4;
  }
  sinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_updata_servers_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_updata_servers_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sinfos;
        break;
      }

      // repeated .server_protocols.server_info sinfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sinfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_updata_servers_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_updata_servers_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .server_protocols.server_info sinfos = 2;
  for (int i = 0; i < this->sinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_updata_servers_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_updata_servers_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .server_protocols.server_info sinfos = 2;
  for (int i = 0; i < this->sinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_updata_servers_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_updata_servers_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .server_protocols.server_info sinfos = 2;
  total_size += 1 * this->sinfos_size();
  for (int i = 0; i < this->sinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_updata_servers_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_updata_servers_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_updata_servers_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_updata_servers_info::MergeFrom(const packet_updata_servers_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  sinfos_.MergeFrom(from.sinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_updata_servers_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_updata_servers_info::CopyFrom(const packet_updata_servers_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_updata_servers_info::IsInitialized() const {

  return true;
}

void packet_updata_servers_info::Swap(packet_updata_servers_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    sinfos_.Swap(&other->sinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_updata_servers_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_updata_servers_info_descriptor_;
  metadata.reflection = packet_updata_servers_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_updata_self_info::kPacketIdFieldNumber;
const int packet_updata_self_info::kAttributesFieldNumber;
#endif  // !_MSC_VER

packet_updata_self_info::packet_updata_self_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_updata_self_info::InitAsDefaultInstance() {
  attributes_ = const_cast< ::server_protocols::server_attributes*>(&::server_protocols::server_attributes::default_instance());
}

packet_updata_self_info::packet_updata_self_info(const packet_updata_self_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_updata_self_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5;
  attributes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_updata_self_info::~packet_updata_self_info() {
  SharedDtor();
}

void packet_updata_self_info::SharedDtor() {
  if (this != default_instance_) {
    delete attributes_;
  }
}

void packet_updata_self_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_updata_self_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_updata_self_info_descriptor_;
}

const packet_updata_self_info& packet_updata_self_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_updata_self_info* packet_updata_self_info::default_instance_ = NULL;

packet_updata_self_info* packet_updata_self_info::New() const {
  return new packet_updata_self_info;
}

void packet_updata_self_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 5;
    if (has_attributes()) {
      if (attributes_ != NULL) attributes_->::server_protocols::server_attributes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_updata_self_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_updata_self_info];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attributes;
        break;
      }

      // optional .server_protocols.server_attributes attributes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_updata_self_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_updata_self_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .server_protocols.server_attributes attributes = 2;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attributes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_updata_self_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_updata_self_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .server_protocols.server_attributes attributes = 2;
  if (has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attributes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_updata_self_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_updata_self_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .server_protocols.server_attributes attributes = 2;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_updata_self_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_updata_self_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_updata_self_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_updata_self_info::MergeFrom(const packet_updata_self_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_attributes()) {
      mutable_attributes()->::server_protocols::server_attributes::MergeFrom(from.attributes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_updata_self_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_updata_self_info::CopyFrom(const packet_updata_self_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_updata_self_info::IsInitialized() const {

  return true;
}

void packet_updata_self_info::Swap(packet_updata_self_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(attributes_, other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_updata_self_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_updata_self_info_descriptor_;
  metadata.reflection = packet_updata_self_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_server_connect::kPacketIdFieldNumber;
const int packet_server_connect::kServerIdFieldNumber;
const int packet_server_connect::kServerTypeFieldNumber;
const int packet_server_connect::kInfoFieldNumber;
#endif  // !_MSC_VER

packet_server_connect::packet_server_connect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_server_connect::InitAsDefaultInstance() {
}

packet_server_connect::packet_server_connect(const packet_server_connect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_server_connect::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10;
  server_id_ = 0u;
  server_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_server_connect::~packet_server_connect() {
  SharedDtor();
}

void packet_server_connect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_server_connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_server_connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_server_connect_descriptor_;
}

const packet_server_connect& packet_server_connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_server_connect* packet_server_connect::default_instance_ = NULL;

packet_server_connect* packet_server_connect::New() const {
  return new packet_server_connect;
}

void packet_server_connect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 10;
    server_id_ = 0u;
    server_type_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_server_connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_connect];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_server_id;
        break;
      }

      // optional fixed32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_type;
        break;
      }

      // optional .server_protocols.e_server_type server_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_type_IsValid(value)) {
            set_server_type(static_cast< ::server_protocols::e_server_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // repeated .login2chk.RoomInfo info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_server_connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_connect];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->server_id(), output);
  }

  // optional .server_protocols.e_server_type server_type = 3;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->server_type(), output);
  }

  // repeated .login2chk.RoomInfo info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_server_connect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_connect];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->server_id(), target);
  }

  // optional .server_protocols.e_server_type server_type = 3;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->server_type(), target);
  }

  // repeated .login2chk.RoomInfo info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_server_connect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_connect];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 + 4;
    }

    // optional .server_protocols.e_server_type server_type = 3;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }

  }
  // repeated .login2chk.RoomInfo info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_server_connect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_server_connect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_server_connect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_server_connect::MergeFrom(const packet_server_connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_server_connect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_server_connect::CopyFrom(const packet_server_connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_server_connect::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void packet_server_connect::Swap(packet_server_connect* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(server_type_, other->server_type_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_server_connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_server_connect_descriptor_;
  metadata.reflection = packet_server_connect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_room_register::kPacketIdFieldNumber;
const int packet_room_register::kServerIdFieldNumber;
const int packet_room_register::kServerTypeFieldNumber;
const int packet_room_register::kInfoFieldNumber;
#endif  // !_MSC_VER

packet_room_register::packet_room_register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_room_register::InitAsDefaultInstance() {
}

packet_room_register::packet_room_register(const packet_room_register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_room_register::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 21;
  server_id_ = 0u;
  server_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_room_register::~packet_room_register() {
  SharedDtor();
}

void packet_room_register::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_room_register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_room_register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_room_register_descriptor_;
}

const packet_room_register& packet_room_register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_room_register* packet_room_register::default_instance_ = NULL;

packet_room_register* packet_room_register::New() const {
  return new packet_room_register;
}

void packet_room_register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 21;
    server_id_ = 0u;
    server_type_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_room_register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_room_list_connect];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_server_id;
        break;
      }

      // optional fixed32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_type;
        break;
      }

      // optional .server_protocols.e_server_type server_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_type_IsValid(value)) {
            set_server_type(static_cast< ::server_protocols::e_server_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // repeated .login2chk.RoomInfo info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_room_register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_room_list_connect];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->server_id(), output);
  }

  // optional .server_protocols.e_server_type server_type = 3;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->server_type(), output);
  }

  // repeated .login2chk.RoomInfo info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_room_register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_room_list_connect];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->server_id(), target);
  }

  // optional .server_protocols.e_server_type server_type = 3;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->server_type(), target);
  }

  // repeated .login2chk.RoomInfo info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_room_register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_room_list_connect];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 + 4;
    }

    // optional .server_protocols.e_server_type server_type = 3;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }

  }
  // repeated .login2chk.RoomInfo info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_room_register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_room_register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_room_register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_room_register::MergeFrom(const packet_room_register& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_room_register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_room_register::CopyFrom(const packet_room_register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_room_register::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void packet_room_register::Swap(packet_room_register* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(server_type_, other->server_type_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_room_register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_room_register_descriptor_;
  metadata.reflection = packet_room_register_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* packet_server_connect_result_e_server_connect_result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_server_connect_result_e_server_connect_result_descriptor_;
}
bool packet_server_connect_result_e_server_connect_result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const packet_server_connect_result_e_server_connect_result packet_server_connect_result::e_scr_success;
const packet_server_connect_result_e_server_connect_result packet_server_connect_result::e_scr_fail;
const packet_server_connect_result_e_server_connect_result packet_server_connect_result::e_server_connect_result_MIN;
const packet_server_connect_result_e_server_connect_result packet_server_connect_result::e_server_connect_result_MAX;
const int packet_server_connect_result::e_server_connect_result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int packet_server_connect_result::kPacketIdFieldNumber;
const int packet_server_connect_result::kServerTypeFieldNumber;
const int packet_server_connect_result::kRetFieldNumber;
#endif  // !_MSC_VER

packet_server_connect_result::packet_server_connect_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_server_connect_result::InitAsDefaultInstance() {
}

packet_server_connect_result::packet_server_connect_result(const packet_server_connect_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_server_connect_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 11;
  server_type_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_server_connect_result::~packet_server_connect_result() {
  SharedDtor();
}

void packet_server_connect_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_server_connect_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_server_connect_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_server_connect_result_descriptor_;
}

const packet_server_connect_result& packet_server_connect_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_server_connect_result* packet_server_connect_result::default_instance_ = NULL;

packet_server_connect_result* packet_server_connect_result::New() const {
  return new packet_server_connect_result;
}

void packet_server_connect_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 11;
    server_type_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_server_connect_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_connect_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_type;
        break;
      }

      // optional .server_protocols.e_server_type server_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_type_IsValid(value)) {
            set_server_type(static_cast< ::server_protocols::e_server_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional .server_protocols.packet_server_connect_result.e_server_connect_result ret = 3 [default = e_scr_success];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::packet_server_connect_result_e_server_connect_result_IsValid(value)) {
            set_ret(static_cast< ::server_protocols::packet_server_connect_result_e_server_connect_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_server_connect_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_connect_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .server_protocols.e_server_type server_type = 2;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->server_type(), output);
  }

  // optional .server_protocols.packet_server_connect_result.e_server_connect_result ret = 3 [default = e_scr_success];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_server_connect_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_connect_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .server_protocols.e_server_type server_type = 2;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->server_type(), target);
  }

  // optional .server_protocols.packet_server_connect_result.e_server_connect_result ret = 3 [default = e_scr_success];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_server_connect_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_connect_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .server_protocols.e_server_type server_type = 2;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }

    // optional .server_protocols.packet_server_connect_result.e_server_connect_result ret = 3 [default = e_scr_success];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_server_connect_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_server_connect_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_server_connect_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_server_connect_result::MergeFrom(const packet_server_connect_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_server_connect_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_server_connect_result::CopyFrom(const packet_server_connect_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_server_connect_result::IsInitialized() const {

  return true;
}

void packet_server_connect_result::Swap(packet_server_connect_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(server_type_, other->server_type_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_server_connect_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_server_connect_result_descriptor_;
  metadata.reflection = packet_server_connect_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_transmit_msg::kPacketIdFieldNumber;
const int packet_transmit_msg::kSessionidFieldNumber;
const int packet_transmit_msg::kMsgpakFieldNumber;
#endif  // !_MSC_VER

packet_transmit_msg::packet_transmit_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_transmit_msg::InitAsDefaultInstance() {
  msgpak_ = const_cast< ::server_protocols::msg_packet*>(&::server_protocols::msg_packet::default_instance());
}

packet_transmit_msg::packet_transmit_msg(const packet_transmit_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_transmit_msg::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 6;
  sessionid_ = 0u;
  msgpak_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_transmit_msg::~packet_transmit_msg() {
  SharedDtor();
}

void packet_transmit_msg::SharedDtor() {
  if (this != default_instance_) {
    delete msgpak_;
  }
}

void packet_transmit_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_transmit_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_transmit_msg_descriptor_;
}

const packet_transmit_msg& packet_transmit_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_transmit_msg* packet_transmit_msg::default_instance_ = NULL;

packet_transmit_msg* packet_transmit_msg::New() const {
  return new packet_transmit_msg;
}

void packet_transmit_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 6;
    sessionid_ = 0u;
    if (has_msgpak()) {
      if (msgpak_ != NULL) msgpak_->::server_protocols::msg_packet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_transmit_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_transmit_msg];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sessionid;
        break;
      }

      // optional fixed32 sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgpak;
        break;
      }

      // optional .server_protocols.msg_packet msgpak = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgpak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgpak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_transmit_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_transmit_msg];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sessionid(), output);
  }

  // optional .server_protocols.msg_packet msgpak = 3;
  if (has_msgpak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msgpak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_transmit_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_transmit_msg];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sessionid(), target);
  }

  // optional .server_protocols.msg_packet msgpak = 3;
  if (has_msgpak()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msgpak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_transmit_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_transmit_msg];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 + 4;
    }

    // optional .server_protocols.msg_packet msgpak = 3;
    if (has_msgpak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgpak());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_transmit_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_transmit_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_transmit_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_transmit_msg::MergeFrom(const packet_transmit_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_msgpak()) {
      mutable_msgpak()->::server_protocols::msg_packet::MergeFrom(from.msgpak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_transmit_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_transmit_msg::CopyFrom(const packet_transmit_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_transmit_msg::IsInitialized() const {

  return true;
}

void packet_transmit_msg::Swap(packet_transmit_msg* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(msgpak_, other->msgpak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_transmit_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_transmit_msg_descriptor_;
  metadata.reflection = packet_transmit_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_broadcast_msg::kPacketIdFieldNumber;
const int packet_broadcast_msg::kSessionidsFieldNumber;
const int packet_broadcast_msg::kMsgpakFieldNumber;
#endif  // !_MSC_VER

packet_broadcast_msg::packet_broadcast_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_broadcast_msg::InitAsDefaultInstance() {
  msgpak_ = const_cast< ::server_protocols::msg_packet*>(&::server_protocols::msg_packet::default_instance());
}

packet_broadcast_msg::packet_broadcast_msg(const packet_broadcast_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_broadcast_msg::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7;
  msgpak_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_broadcast_msg::~packet_broadcast_msg() {
  SharedDtor();
}

void packet_broadcast_msg::SharedDtor() {
  if (this != default_instance_) {
    delete msgpak_;
  }
}

void packet_broadcast_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_broadcast_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_broadcast_msg_descriptor_;
}

const packet_broadcast_msg& packet_broadcast_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_broadcast_msg* packet_broadcast_msg::default_instance_ = NULL;

packet_broadcast_msg* packet_broadcast_msg::New() const {
  return new packet_broadcast_msg;
}

void packet_broadcast_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 7;
    if (has_msgpak()) {
      if (msgpak_ != NULL) msgpak_->::server_protocols::msg_packet::Clear();
    }
  }
  sessionids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_broadcast_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_broadcast_msg];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sessionids;
        break;
      }

      // repeated fixed32 sessionids = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_sessionids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 18, input, this->mutable_sessionids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgpak;
        break;
      }

      // optional .server_protocols.msg_packet msgpak = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgpak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgpak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_broadcast_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_broadcast_msg];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated fixed32 sessionids = 2 [packed = true];
  if (this->sessionids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sessionids_cached_byte_size_);
  }
  for (int i = 0; i < this->sessionids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32NoTag(
      this->sessionids(i), output);
  }

  // optional .server_protocols.msg_packet msgpak = 3;
  if (has_msgpak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msgpak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_broadcast_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_broadcast_msg];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated fixed32 sessionids = 2 [packed = true];
  if (this->sessionids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _sessionids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->sessionids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->sessionids(i), target);
  }

  // optional .server_protocols.msg_packet msgpak = 3;
  if (has_msgpak()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msgpak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_broadcast_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_broadcast_msg];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .server_protocols.msg_packet msgpak = 3;
    if (has_msgpak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgpak());
    }

  }
  // repeated fixed32 sessionids = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->sessionids_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sessionids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_broadcast_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_broadcast_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_broadcast_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_broadcast_msg::MergeFrom(const packet_broadcast_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  sessionids_.MergeFrom(from.sessionids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_msgpak()) {
      mutable_msgpak()->::server_protocols::msg_packet::MergeFrom(from.msgpak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_broadcast_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_broadcast_msg::CopyFrom(const packet_broadcast_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_broadcast_msg::IsInitialized() const {

  return true;
}

void packet_broadcast_msg::Swap(packet_broadcast_msg* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    sessionids_.Swap(&other->sessionids_);
    std::swap(msgpak_, other->msgpak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_broadcast_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_broadcast_msg_descriptor_;
  metadata.reflection = packet_broadcast_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_broadcast_msg2::kPacketIdFieldNumber;
const int packet_broadcast_msg2::kGameSidFieldNumber;
const int packet_broadcast_msg2::kMsgpakFieldNumber;
#endif  // !_MSC_VER

packet_broadcast_msg2::packet_broadcast_msg2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_broadcast_msg2::InitAsDefaultInstance() {
  msgpak_ = const_cast< ::server_protocols::msg_packet*>(&::server_protocols::msg_packet::default_instance());
}

packet_broadcast_msg2::packet_broadcast_msg2(const packet_broadcast_msg2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_broadcast_msg2::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 17;
  game_sid_ = 0u;
  msgpak_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_broadcast_msg2::~packet_broadcast_msg2() {
  SharedDtor();
}

void packet_broadcast_msg2::SharedDtor() {
  if (this != default_instance_) {
    delete msgpak_;
  }
}

void packet_broadcast_msg2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_broadcast_msg2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_broadcast_msg2_descriptor_;
}

const packet_broadcast_msg2& packet_broadcast_msg2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_broadcast_msg2* packet_broadcast_msg2::default_instance_ = NULL;

packet_broadcast_msg2* packet_broadcast_msg2::New() const {
  return new packet_broadcast_msg2;
}

void packet_broadcast_msg2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 17;
    game_sid_ = 0u;
    if (has_msgpak()) {
      if (msgpak_ != NULL) msgpak_->::server_protocols::msg_packet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_broadcast_msg2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_broadcast_msg2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_game_sid;
        break;
      }

      // optional fixed32 game_sid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_game_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &game_sid_)));
          set_has_game_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgpak;
        break;
      }

      // optional .server_protocols.msg_packet msgpak = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgpak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgpak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_broadcast_msg2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_broadcast_msg2];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 game_sid = 2 [default = 0];
  if (has_game_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->game_sid(), output);
  }

  // optional .server_protocols.msg_packet msgpak = 3;
  if (has_msgpak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msgpak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_broadcast_msg2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_broadcast_msg2];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 game_sid = 2 [default = 0];
  if (has_game_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->game_sid(), target);
  }

  // optional .server_protocols.msg_packet msgpak = 3;
  if (has_msgpak()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msgpak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_broadcast_msg2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_broadcast_msg2];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 game_sid = 2 [default = 0];
    if (has_game_sid()) {
      total_size += 1 + 4;
    }

    // optional .server_protocols.msg_packet msgpak = 3;
    if (has_msgpak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgpak());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_broadcast_msg2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_broadcast_msg2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_broadcast_msg2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_broadcast_msg2::MergeFrom(const packet_broadcast_msg2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_game_sid()) {
      set_game_sid(from.game_sid());
    }
    if (from.has_msgpak()) {
      mutable_msgpak()->::server_protocols::msg_packet::MergeFrom(from.msgpak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_broadcast_msg2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_broadcast_msg2::CopyFrom(const packet_broadcast_msg2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_broadcast_msg2::IsInitialized() const {

  return true;
}

void packet_broadcast_msg2::Swap(packet_broadcast_msg2* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(game_sid_, other->game_sid_);
    std::swap(msgpak_, other->msgpak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_broadcast_msg2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_broadcast_msg2_descriptor_;
  metadata.reflection = packet_broadcast_msg2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_heartbeat::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packet_heartbeat::packet_heartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_heartbeat::InitAsDefaultInstance() {
}

packet_heartbeat::packet_heartbeat(const packet_heartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_heartbeat::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 9;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_heartbeat::~packet_heartbeat() {
  SharedDtor();
}

void packet_heartbeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_heartbeat_descriptor_;
}

const packet_heartbeat& packet_heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_heartbeat* packet_heartbeat::default_instance_ = NULL;

packet_heartbeat* packet_heartbeat::New() const {
  return new packet_heartbeat;
}

void packet_heartbeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 9;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_heartbeat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_heartbeat];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_heartbeat];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_heartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_heartbeat];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_heartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_heartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_heartbeat::MergeFrom(const packet_heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_heartbeat::CopyFrom(const packet_heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_heartbeat::IsInitialized() const {

  return true;
}

void packet_heartbeat::Swap(packet_heartbeat* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_heartbeat_descriptor_;
  metadata.reflection = packet_heartbeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_player_connect::kPacketIdFieldNumber;
const int packet_player_connect::kSessionidFieldNumber;
const int packet_player_connect::kLogicidFieldNumber;
#endif  // !_MSC_VER

packet_player_connect::packet_player_connect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_player_connect::InitAsDefaultInstance() {
}

packet_player_connect::packet_player_connect(const packet_player_connect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_player_connect::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 12;
  sessionid_ = 0u;
  logicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_player_connect::~packet_player_connect() {
  SharedDtor();
}

void packet_player_connect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_player_connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_player_connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_player_connect_descriptor_;
}

const packet_player_connect& packet_player_connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_player_connect* packet_player_connect::default_instance_ = NULL;

packet_player_connect* packet_player_connect::New() const {
  return new packet_player_connect;
}

void packet_player_connect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 12;
    sessionid_ = 0u;
    logicid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_player_connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_connect];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sessionid;
        break;
      }

      // optional fixed32 sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_logicid;
        break;
      }

      // optional fixed32 logicid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_logicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_player_connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_connect];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sessionid(), output);
  }

  // optional fixed32 logicid = 3;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->logicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_player_connect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_connect];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sessionid(), target);
  }

  // optional fixed32 logicid = 3;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->logicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_player_connect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_connect];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 + 4;
    }

    // optional fixed32 logicid = 3;
    if (has_logicid()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_player_connect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_player_connect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_player_connect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_player_connect::MergeFrom(const packet_player_connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_player_connect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_player_connect::CopyFrom(const packet_player_connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_player_connect::IsInitialized() const {

  return true;
}

void packet_player_connect::Swap(packet_player_connect* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(logicid_, other->logicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_player_connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_player_connect_descriptor_;
  metadata.reflection = packet_player_connect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_player_disconnect::kPacketIdFieldNumber;
const int packet_player_disconnect::kSessionidFieldNumber;
#endif  // !_MSC_VER

packet_player_disconnect::packet_player_disconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_player_disconnect::InitAsDefaultInstance() {
}

packet_player_disconnect::packet_player_disconnect(const packet_player_disconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_player_disconnect::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 13;
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_player_disconnect::~packet_player_disconnect() {
  SharedDtor();
}

void packet_player_disconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_player_disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_player_disconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_player_disconnect_descriptor_;
}

const packet_player_disconnect& packet_player_disconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_player_disconnect* packet_player_disconnect::default_instance_ = NULL;

packet_player_disconnect* packet_player_disconnect::New() const {
  return new packet_player_disconnect;
}

void packet_player_disconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 13;
    sessionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_player_disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_disconnect];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sessionid;
        break;
      }

      // optional fixed32 sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_player_disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_disconnect];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_player_disconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_disconnect];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_player_disconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_disconnect];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_player_disconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_player_disconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_player_disconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_player_disconnect::MergeFrom(const packet_player_disconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_player_disconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_player_disconnect::CopyFrom(const packet_player_disconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_player_disconnect::IsInitialized() const {

  return true;
}

void packet_player_disconnect::Swap(packet_player_disconnect* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_player_disconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_player_disconnect_descriptor_;
  metadata.reflection = packet_player_disconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_regedit_route_msg::kPacketIdFieldNumber;
const int packet_regedit_route_msg::kMsgidsFieldNumber;
#endif  // !_MSC_VER

packet_regedit_route_msg::packet_regedit_route_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_regedit_route_msg::InitAsDefaultInstance() {
}

packet_regedit_route_msg::packet_regedit_route_msg(const packet_regedit_route_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_regedit_route_msg::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 14;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_regedit_route_msg::~packet_regedit_route_msg() {
  SharedDtor();
}

void packet_regedit_route_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_regedit_route_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_regedit_route_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_regedit_route_msg_descriptor_;
}

const packet_regedit_route_msg& packet_regedit_route_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_regedit_route_msg* packet_regedit_route_msg::default_instance_ = NULL;

packet_regedit_route_msg* packet_regedit_route_msg::New() const {
  return new packet_regedit_route_msg;
}

void packet_regedit_route_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 14;
  }
  msgids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_regedit_route_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_regedit_route_msg];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgids;
        break;
      }

      // repeated fixed32 msgids = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_msgids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 18, input, this->mutable_msgids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_regedit_route_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_regedit_route_msg];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated fixed32 msgids = 2 [packed = true];
  if (this->msgids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_msgids_cached_byte_size_);
  }
  for (int i = 0; i < this->msgids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32NoTag(
      this->msgids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_regedit_route_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_regedit_route_msg];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated fixed32 msgids = 2 [packed = true];
  if (this->msgids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _msgids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->msgids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->msgids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_regedit_route_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_regedit_route_msg];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated fixed32 msgids = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->msgids_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _msgids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_regedit_route_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_regedit_route_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_regedit_route_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_regedit_route_msg::MergeFrom(const packet_regedit_route_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgids_.MergeFrom(from.msgids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_regedit_route_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_regedit_route_msg::CopyFrom(const packet_regedit_route_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_regedit_route_msg::IsInitialized() const {

  return true;
}

void packet_regedit_route_msg::Swap(packet_regedit_route_msg* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    msgids_.Swap(&other->msgids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_regedit_route_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_regedit_route_msg_descriptor_;
  metadata.reflection = packet_regedit_route_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_gate_setlogic_ok::kPacketIdFieldNumber;
const int packet_gate_setlogic_ok::kSessionidFieldNumber;
#endif  // !_MSC_VER

packet_gate_setlogic_ok::packet_gate_setlogic_ok()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_gate_setlogic_ok::InitAsDefaultInstance() {
}

packet_gate_setlogic_ok::packet_gate_setlogic_ok(const packet_gate_setlogic_ok& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_gate_setlogic_ok::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15;
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_gate_setlogic_ok::~packet_gate_setlogic_ok() {
  SharedDtor();
}

void packet_gate_setlogic_ok::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_gate_setlogic_ok::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_gate_setlogic_ok::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_gate_setlogic_ok_descriptor_;
}

const packet_gate_setlogic_ok& packet_gate_setlogic_ok::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_gate_setlogic_ok* packet_gate_setlogic_ok::default_instance_ = NULL;

packet_gate_setlogic_ok* packet_gate_setlogic_ok::New() const {
  return new packet_gate_setlogic_ok;
}

void packet_gate_setlogic_ok::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 15;
    sessionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_gate_setlogic_ok::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gate_setlogic_ok];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sessionid;
        break;
      }

      // optional fixed32 sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_gate_setlogic_ok::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gate_setlogic_ok];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_gate_setlogic_ok::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gate_setlogic_ok];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_gate_setlogic_ok::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gate_setlogic_ok];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_gate_setlogic_ok::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_gate_setlogic_ok* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_gate_setlogic_ok*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_gate_setlogic_ok::MergeFrom(const packet_gate_setlogic_ok& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_gate_setlogic_ok::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_gate_setlogic_ok::CopyFrom(const packet_gate_setlogic_ok& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_gate_setlogic_ok::IsInitialized() const {

  return true;
}

void packet_gate_setlogic_ok::Swap(packet_gate_setlogic_ok* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_gate_setlogic_ok::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_gate_setlogic_ok_descriptor_;
  metadata.reflection = packet_gate_setlogic_ok_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_clear_session::kPacketIdFieldNumber;
const int packet_clear_session::kSessionidFieldNumber;
#endif  // !_MSC_VER

packet_clear_session::packet_clear_session()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_clear_session::InitAsDefaultInstance() {
}

packet_clear_session::packet_clear_session(const packet_clear_session& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_clear_session::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 16;
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_clear_session::~packet_clear_session() {
  SharedDtor();
}

void packet_clear_session::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_clear_session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_clear_session::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_clear_session_descriptor_;
}

const packet_clear_session& packet_clear_session::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_clear_session* packet_clear_session::default_instance_ = NULL;

packet_clear_session* packet_clear_session::New() const {
  return new packet_clear_session;
}

void packet_clear_session::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 16;
    sessionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_clear_session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_clear_session];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sessionid;
        break;
      }

      // optional fixed32 sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_clear_session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_clear_session];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_clear_session::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_clear_session];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_clear_session::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_clear_session];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_clear_session::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_clear_session* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_clear_session*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_clear_session::MergeFrom(const packet_clear_session& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_clear_session::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_clear_session::CopyFrom(const packet_clear_session& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_clear_session::IsInitialized() const {

  return true;
}

void packet_clear_session::Swap(packet_clear_session* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_clear_session::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_clear_session_descriptor_;
  metadata.reflection = packet_clear_session_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_http_command::kPacketIdFieldNumber;
const int packet_http_command::kCmdstrFieldNumber;
#endif  // !_MSC_VER

packet_http_command::packet_http_command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_http_command::InitAsDefaultInstance() {
}

packet_http_command::packet_http_command(const packet_http_command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_http_command::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 18;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_http_command::~packet_http_command() {
  SharedDtor();
}

void packet_http_command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_http_command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_http_command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_http_command_descriptor_;
}

const packet_http_command& packet_http_command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_http_command* packet_http_command::default_instance_ = NULL;

packet_http_command* packet_http_command::New() const {
  return new packet_http_command;
}

void packet_http_command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 18;
  }
  cmdstr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_http_command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_http_command];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cmdstr;
        break;
      }

      // repeated string cmdstr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmdstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cmdstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmdstr(this->cmdstr_size() - 1).data(),
            this->cmdstr(this->cmdstr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cmdstr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_http_command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_http_command];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated string cmdstr = 2;
  for (int i = 0; i < this->cmdstr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cmdstr(i).data(), this->cmdstr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cmdstr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_http_command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_http_command];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated string cmdstr = 2;
  for (int i = 0; i < this->cmdstr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmdstr(i).data(), this->cmdstr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->cmdstr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_http_command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_http_command];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated string cmdstr = 2;
  total_size += 1 * this->cmdstr_size();
  for (int i = 0; i < this->cmdstr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cmdstr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_http_command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_http_command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_http_command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_http_command::MergeFrom(const packet_http_command& from) {
  GOOGLE_CHECK_NE(&from, this);
  cmdstr_.MergeFrom(from.cmdstr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_http_command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_http_command::CopyFrom(const packet_http_command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_http_command::IsInitialized() const {

  return true;
}

void packet_http_command::Swap(packet_http_command* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    cmdstr_.Swap(&other->cmdstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_http_command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_http_command_descriptor_;
  metadata.reflection = packet_http_command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_get_ip::kPacketIdFieldNumber;
const int packet_get_ip::kSessionidFieldNumber;
#endif  // !_MSC_VER

packet_get_ip::packet_get_ip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_get_ip::InitAsDefaultInstance() {
}

packet_get_ip::packet_get_ip(const packet_get_ip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_get_ip::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 19;
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_get_ip::~packet_get_ip() {
  SharedDtor();
}

void packet_get_ip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_get_ip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_get_ip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_get_ip_descriptor_;
}

const packet_get_ip& packet_get_ip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_get_ip* packet_get_ip::default_instance_ = NULL;

packet_get_ip* packet_get_ip::New() const {
  return new packet_get_ip;
}

void packet_get_ip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 19;
    sessionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_get_ip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_ip];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sessionid;
        break;
      }

      // optional fixed32 sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_get_ip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_ip];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_get_ip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_ip];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_get_ip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_ip];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_get_ip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_get_ip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_get_ip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_get_ip::MergeFrom(const packet_get_ip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_get_ip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_get_ip::CopyFrom(const packet_get_ip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_get_ip::IsInitialized() const {

  return true;
}

void packet_get_ip::Swap(packet_get_ip* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_get_ip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_get_ip_descriptor_;
  metadata.reflection = packet_get_ip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_get_ip_result::kPacketIdFieldNumber;
const int packet_get_ip_result::kSessionidFieldNumber;
const int packet_get_ip_result::kIpFieldNumber;
const int packet_get_ip_result::kPortFieldNumber;
#endif  // !_MSC_VER

packet_get_ip_result::packet_get_ip_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet_get_ip_result::InitAsDefaultInstance() {
}

packet_get_ip_result::packet_get_ip_result(const packet_get_ip_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet_get_ip_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 20;
  sessionid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_get_ip_result::~packet_get_ip_result() {
  SharedDtor();
}

void packet_get_ip_result::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void packet_get_ip_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_get_ip_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_get_ip_result_descriptor_;
}

const packet_get_ip_result& packet_get_ip_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fprotocol_2eproto();
  return *default_instance_;
}

packet_get_ip_result* packet_get_ip_result::default_instance_ = NULL;

packet_get_ip_result* packet_get_ip_result::New() const {
  return new packet_get_ip_result;
}

void packet_get_ip_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 20;
    sessionid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_get_ip_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_ip_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::server_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sessionid;
        break;
      }

      // optional fixed32 sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_port;
        break;
      }

      // optional fixed32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet_get_ip_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_ip_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sessionid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional fixed32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet_get_ip_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_ip_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sessionid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional fixed32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet_get_ip_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_ip_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 + 4;
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional fixed32 port = 4;
    if (has_port()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_get_ip_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_get_ip_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_get_ip_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_get_ip_result::MergeFrom(const packet_get_ip_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_get_ip_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_get_ip_result::CopyFrom(const packet_get_ip_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_get_ip_result::IsInitialized() const {

  return true;
}

void packet_get_ip_result::Swap(packet_get_ip_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_get_ip_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_get_ip_result_descriptor_;
  metadata.reflection = packet_get_ip_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server_protocols

// @@protoc_insertion_point(global_scope)
