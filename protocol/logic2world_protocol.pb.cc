// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logic2world_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "logic2world_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace logic2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetl2w_game_ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2w_game_ready_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2l_player_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2l_player_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2w_player_login_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2w_player_login_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2l_player_logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2l_player_logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2w_player_logout_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2w_player_logout_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2l_change_player_property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2l_change_player_property_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2w_player_property_stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2w_player_property_stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2l_accept_gift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2l_accept_gift_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2w_game_broadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2w_game_broadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2w_player_quest_change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2w_player_quest_change_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2w_player_star_change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2w_player_star_change_reflection_ = NULL;
const ::google::protobuf::Descriptor* packagel2w_p_game_status_change_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packagel2w_p_game_status_change_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_logic2world_5fprotocol_2eproto() {
  protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "logic2world_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  packetl2w_game_ready_descriptor_ = file->message_type(0);
  static const int packetl2w_game_ready_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_game_ready, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_game_ready, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_game_ready, game_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_game_ready, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_game_ready, roomchildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_game_ready, maxplayernum_),
  };
  packetl2w_game_ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2w_game_ready_descriptor_,
      packetl2w_game_ready::default_instance_,
      packetl2w_game_ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_game_ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_game_ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2w_game_ready));
  packetw2l_player_login_descriptor_ = file->message_type(1);
  static const int packetw2l_player_login_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_player_login, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_player_login, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_player_login, account_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_player_login, account_info_ex_),
  };
  packetw2l_player_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2l_player_login_descriptor_,
      packetw2l_player_login::default_instance_,
      packetw2l_player_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_player_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_player_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2l_player_login));
  packetl2w_player_login_result_descriptor_ = file->message_type(2);
  static const int packetl2w_player_login_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_login_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_login_result, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_login_result, result_),
  };
  packetl2w_player_login_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2w_player_login_result_descriptor_,
      packetl2w_player_login_result::default_instance_,
      packetl2w_player_login_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_login_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_login_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2w_player_login_result));
  packetw2l_player_logout_descriptor_ = file->message_type(3);
  static const int packetw2l_player_logout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_player_logout, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_player_logout, playerid_),
  };
  packetw2l_player_logout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2l_player_logout_descriptor_,
      packetw2l_player_logout::default_instance_,
      packetw2l_player_logout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_player_logout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_player_logout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2l_player_logout));
  packetl2w_player_logout_result_descriptor_ = file->message_type(4);
  static const int packetl2w_player_logout_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_logout_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_logout_result, playerid_),
  };
  packetl2w_player_logout_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2w_player_logout_result_descriptor_,
      packetl2w_player_logout_result::default_instance_,
      packetl2w_player_logout_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_logout_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_logout_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2w_player_logout_result));
  packetw2l_change_player_property_descriptor_ = file->message_type(5);
  static const int packetw2l_change_player_property_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_change_player_property, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_change_player_property, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_change_player_property, change_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_change_player_property, change_info_ex_),
  };
  packetw2l_change_player_property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2l_change_player_property_descriptor_,
      packetw2l_change_player_property::default_instance_,
      packetw2l_change_player_property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_change_player_property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_change_player_property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2l_change_player_property));
  packetl2w_player_property_stat_descriptor_ = file->message_type(6);
  static const int packetl2w_player_property_stat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_property_stat, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_property_stat, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_property_stat, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_property_stat, attrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_property_stat, addvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_property_stat, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_property_stat, param_),
  };
  packetl2w_player_property_stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2w_player_property_stat_descriptor_,
      packetl2w_player_property_stat::default_instance_,
      packetl2w_player_property_stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_property_stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_property_stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2w_player_property_stat));
  packetw2l_accept_gift_descriptor_ = file->message_type(7);
  static const int packetw2l_accept_gift_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_accept_gift, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_accept_gift, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_accept_gift, receiverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_accept_gift, giftid_),
  };
  packetw2l_accept_gift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2l_accept_gift_descriptor_,
      packetw2l_accept_gift::default_instance_,
      packetw2l_accept_gift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_accept_gift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2l_accept_gift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2l_accept_gift));
  packetl2w_game_broadcast_descriptor_ = file->message_type(8);
  static const int packetl2w_game_broadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_game_broadcast, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_game_broadcast, game_msg_),
  };
  packetl2w_game_broadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2w_game_broadcast_descriptor_,
      packetl2w_game_broadcast::default_instance_,
      packetl2w_game_broadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_game_broadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_game_broadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2w_game_broadcast));
  packetl2w_player_quest_change_descriptor_ = file->message_type(9);
  static const int packetl2w_player_quest_change_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_quest_change, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_quest_change, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_quest_change, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_quest_change, q_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_quest_change, ex_param_),
  };
  packetl2w_player_quest_change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2w_player_quest_change_descriptor_,
      packetl2w_player_quest_change::default_instance_,
      packetl2w_player_quest_change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_quest_change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_quest_change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2w_player_quest_change));
  packetl2w_player_star_change_descriptor_ = file->message_type(10);
  static const int packetl2w_player_star_change_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_star_change, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_star_change, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_star_change, addstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_star_change, addaward_),
  };
  packetl2w_player_star_change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2w_player_star_change_descriptor_,
      packetl2w_player_star_change::default_instance_,
      packetl2w_player_star_change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_star_change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2w_player_star_change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2w_player_star_change));
  packagel2w_p_game_status_change_descriptor_ = file->message_type(11);
  static const int packagel2w_p_game_status_change_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packagel2w_p_game_status_change, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packagel2w_p_game_status_change, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packagel2w_p_game_status_change, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packagel2w_p_game_status_change, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packagel2w_p_game_status_change, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packagel2w_p_game_status_change, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packagel2w_p_game_status_change, user_status_),
  };
  packagel2w_p_game_status_change_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packagel2w_p_game_status_change_descriptor_,
      packagel2w_p_game_status_change::default_instance_,
      packagel2w_p_game_status_change_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packagel2w_p_game_status_change, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packagel2w_p_game_status_change, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packagel2w_p_game_status_change));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_logic2world_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2w_game_ready_descriptor_, &packetl2w_game_ready::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2l_player_login_descriptor_, &packetw2l_player_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2w_player_login_result_descriptor_, &packetl2w_player_login_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2l_player_logout_descriptor_, &packetw2l_player_logout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2w_player_logout_result_descriptor_, &packetl2w_player_logout_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2l_change_player_property_descriptor_, &packetw2l_change_player_property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2w_player_property_stat_descriptor_, &packetl2w_player_property_stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2l_accept_gift_descriptor_, &packetw2l_accept_gift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2w_game_broadcast_descriptor_, &packetl2w_game_broadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2w_player_quest_change_descriptor_, &packetl2w_player_quest_change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2w_player_star_change_descriptor_, &packetl2w_player_star_change::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packagel2w_p_game_status_change_descriptor_, &packagel2w_p_game_status_change::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_logic2world_5fprotocol_2eproto() {
  delete packetl2w_game_ready::default_instance_;
  delete packetl2w_game_ready_reflection_;
  delete packetw2l_player_login::default_instance_;
  delete packetw2l_player_login_reflection_;
  delete packetl2w_player_login_result::default_instance_;
  delete packetl2w_player_login_result_reflection_;
  delete packetw2l_player_logout::default_instance_;
  delete packetw2l_player_logout_reflection_;
  delete packetl2w_player_logout_result::default_instance_;
  delete packetl2w_player_logout_result_reflection_;
  delete packetw2l_change_player_property::default_instance_;
  delete packetw2l_change_player_property_reflection_;
  delete packetl2w_player_property_stat::default_instance_;
  delete packetl2w_player_property_stat_reflection_;
  delete packetw2l_accept_gift::default_instance_;
  delete packetw2l_accept_gift_reflection_;
  delete packetl2w_game_broadcast::default_instance_;
  delete packetl2w_game_broadcast_reflection_;
  delete packetl2w_player_quest_change::default_instance_;
  delete packetl2w_player_quest_change_reflection_;
  delete packetl2w_player_star_change::default_instance_;
  delete packetl2w_player_star_change_reflection_;
  delete packagel2w_p_game_status_change::default_instance_;
  delete packagel2w_p_game_status_change_reflection_;
}

void protobuf_AddDesc_logic2world_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::logic2world_protocols::protobuf_AddDesc_logic2world_5fmsg_5ftype_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::msg_info_def_ex::protobuf_AddDesc_msg_5finfo_5fdef_5fex_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::protobuf_AddDesc_pump_5ftype_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032logic2world_protocol.proto\022\025logic2worl"
    "d_protocols\032\032logic2world_msg_type.proto\032"
    "\022msg_info_def.proto\032\025msg_info_def_ex.pro"
    "to\032\022msg_type_def.proto\032\017pump_type.proto\""
    "\315\001\n\024packetl2w_game_ready\022Q\n\tpacket_id\030\001 "
    "\001(\0162(.logic2world_protocols.e_server_msg"
    "_type:\024e_mst_l2w_game_ready\022\017\n\007game_id\030\002"
    " \001(\007\022\020\n\010game_ver\030\003 \001(\007\022\017\n\007room_id\030\004 \001(\007\022"
    "\023\n\013roomChildID\030\005 \001(\007\022\031\n\014maxPlayerNum\030\006 \001"
    "(\007:\003200\"\365\001\n\026packetw2l_player_login\022S\n\tpa"
    "cket_id\030\001 \001(\0162(.logic2world_protocols.e_"
    "server_msg_type:\026e_mst_w2l_player_login\022"
    "\021\n\tsessionid\030\002 \001(\007\0224\n\014account_info\030\003 \001(\013"
    "2\036.msg_info_def.msg_account_info\022=\n\017acco"
    "unt_info_ex\030\004 \001(\0132$.msg_info_def_ex.msg_"
    "account_info_ex\"\311\001\n\035packetl2w_player_log"
    "in_result\022Z\n\tpacket_id\030\001 \001(\0162(.logic2wor"
    "ld_protocols.e_server_msg_type:\035e_mst_l2"
    "w_player_login_result\022\020\n\010playerid\030\002 \001(\007\022"
    ":\n\006result\030\003 \001(\0162\036.msg_type_def.e_msg_res"
    "ult_def:\ne_rmt_fail\"\201\001\n\027packetw2l_player"
    "_logout\022T\n\tpacket_id\030\001 \001(\0162(.logic2world"
    "_protocols.e_server_msg_type:\027e_mst_w2l_"
    "player_logout\022\020\n\010playerid\030\002 \001(\007\"\217\001\n\036pack"
    "etl2w_player_logout_result\022[\n\tpacket_id\030"
    "\001 \001(\0162(.logic2world_protocols.e_server_m"
    "sg_type:\036e_mst_l2w_player_logout_result\022"
    "\020\n\010playerid\030\002 \001(\007\"\206\002\n packetw2l_change_p"
    "layer_property\022]\n\tpacket_id\030\001 \001(\0162(.logi"
    "c2world_protocols.e_server_msg_type: e_m"
    "st_w2l_change_player_property\022\020\n\010playeri"
    "d\030\002 \001(\007\0223\n\013change_info\030\003 \001(\0132\036.msg_info_"
    "def.msg_account_info\022<\n\016change_info_ex\030\004"
    " \001(\0132$.msg_info_def_ex.msg_account_info_"
    "ex\"\226\002\n\036packetl2w_player_property_stat\022[\n"
    "\tpacket_id\030\001 \001(\0162(.logic2world_protocols"
    ".e_server_msg_type:\036e_mst_l2w_player_pro"
    "perty_stat\022\020\n\010playerId\030\002 \001(\007\022\016\n\006gameId\030\003"
    " \001(\007\022/\n\010attrType\030\004 \001(\0162\035.msg_type_def.e_"
    "item_type_def\022\020\n\010addValue\030\005 \001(\005\022#\n\006reaso"
    "n\030\006 \001(\0162\023.PropertyReasonType\022\r\n\005param\030\007 "
    "\001(\t\"\241\001\n\025packetw2l_accept_gift\022R\n\tpacket_"
    "id\030\001 \001(\0162(.logic2world_protocols.e_serve"
    "r_msg_type:\025e_mst_w2l_accept_gift\022\020\n\010sen"
    "derId\030\002 \001(\005\022\022\n\nreceiverId\030\003 \001(\005\022\016\n\006giftI"
    "d\030\004 \001(\005\"\203\001\n\030packetl2w_game_broadcast\022U\n\t"
    "packet_id\030\001 \001(\0162(.logic2world_protocols."
    "e_server_msg_type:\030e_mst_l2w_game_broadc"
    "ast\022\020\n\010game_msg\030\002 \001(\t\"\311\001\n\035packetl2w_play"
    "er_quest_change\022Z\n\tpacket_id\030\001 \001(\0162(.log"
    "ic2world_protocols.e_server_msg_type:\035e_"
    "mst_l2w_player_quest_change\022\021\n\tplayer_id"
    "\030\002 \001(\007\022\020\n\010quest_id\030\003 \001(\007\022\022\n\007q_count\030\004 \001("
    "\007:\0011\022\023\n\010ex_param\030\005 \001(\007:\0010\"\265\001\n\034packetl2w_"
    "player_star_change\022Y\n\tpacket_id\030\001 \001(\0162(."
    "logic2world_protocols.e_server_msg_type:"
    "\034e_mst_l2w_player_star_change\022\021\n\tplayer_"
    "id\030\002 \001(\007\022\022\n\007addstar\030\003 \001(\007:\0010\022\023\n\010addaward"
    "\030\004 \001(\007:\0010\"\354\001\n\037packagel2w_p_game_status_c"
    "hange\022[\n\tpacket_id\030\001 \001(\0162(.logic2world_p"
    "rotocols.e_server_msg_type:\036e_msg_12w_p_"
    "game_status_change\022\021\n\tplayer_id\030\002 \001(\007\022\017\n"
    "\007game_id\030\003 \001(\007\022\017\n\007room_id\030\004 \001(\007\022\020\n\010table"
    "_id\030\005 \001(\007\022\020\n\010chair_id\030\006 \001(\007\022\023\n\013user_stat"
    "us\030\007 \001(\007", 2568);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "logic2world_protocol.proto", &protobuf_RegisterTypes);
  packetl2w_game_ready::default_instance_ = new packetl2w_game_ready();
  packetw2l_player_login::default_instance_ = new packetw2l_player_login();
  packetl2w_player_login_result::default_instance_ = new packetl2w_player_login_result();
  packetw2l_player_logout::default_instance_ = new packetw2l_player_logout();
  packetl2w_player_logout_result::default_instance_ = new packetl2w_player_logout_result();
  packetw2l_change_player_property::default_instance_ = new packetw2l_change_player_property();
  packetl2w_player_property_stat::default_instance_ = new packetl2w_player_property_stat();
  packetw2l_accept_gift::default_instance_ = new packetw2l_accept_gift();
  packetl2w_game_broadcast::default_instance_ = new packetl2w_game_broadcast();
  packetl2w_player_quest_change::default_instance_ = new packetl2w_player_quest_change();
  packetl2w_player_star_change::default_instance_ = new packetl2w_player_star_change();
  packagel2w_p_game_status_change::default_instance_ = new packagel2w_p_game_status_change();
  packetl2w_game_ready::default_instance_->InitAsDefaultInstance();
  packetw2l_player_login::default_instance_->InitAsDefaultInstance();
  packetl2w_player_login_result::default_instance_->InitAsDefaultInstance();
  packetw2l_player_logout::default_instance_->InitAsDefaultInstance();
  packetl2w_player_logout_result::default_instance_->InitAsDefaultInstance();
  packetw2l_change_player_property::default_instance_->InitAsDefaultInstance();
  packetl2w_player_property_stat::default_instance_->InitAsDefaultInstance();
  packetw2l_accept_gift::default_instance_->InitAsDefaultInstance();
  packetl2w_game_broadcast::default_instance_->InitAsDefaultInstance();
  packetl2w_player_quest_change::default_instance_->InitAsDefaultInstance();
  packetl2w_player_star_change::default_instance_->InitAsDefaultInstance();
  packagel2w_p_game_status_change::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_logic2world_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_logic2world_5fprotocol_2eproto {
  StaticDescriptorInitializer_logic2world_5fprotocol_2eproto() {
    protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  }
} static_descriptor_initializer_logic2world_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetl2w_game_ready::kPacketIdFieldNumber;
const int packetl2w_game_ready::kGameIdFieldNumber;
const int packetl2w_game_ready::kGameVerFieldNumber;
const int packetl2w_game_ready::kRoomIdFieldNumber;
const int packetl2w_game_ready::kRoomChildIDFieldNumber;
const int packetl2w_game_ready::kMaxPlayerNumFieldNumber;
#endif  // !_MSC_VER

packetl2w_game_ready::packetl2w_game_ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2w_game_ready::InitAsDefaultInstance() {
}

packetl2w_game_ready::packetl2w_game_ready(const packetl2w_game_ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2w_game_ready::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 20001;
  game_id_ = 0u;
  game_ver_ = 0u;
  room_id_ = 0u;
  roomchildid_ = 0u;
  maxplayernum_ = 200u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2w_game_ready::~packetl2w_game_ready() {
  SharedDtor();
}

void packetl2w_game_ready::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2w_game_ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2w_game_ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2w_game_ready_descriptor_;
}

const packetl2w_game_ready& packetl2w_game_ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2w_game_ready* packetl2w_game_ready::default_instance_ = NULL;

packetl2w_game_ready* packetl2w_game_ready::New() const {
  return new packetl2w_game_ready;
}

void packetl2w_game_ready::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 20001;
    game_id_ = 0u;
    game_ver_ = 0u;
    room_id_ = 0u;
    roomchildid_ = 0u;
    maxplayernum_ = 200u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2w_game_ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_ready];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::logic2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::logic2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_game_id;
        break;
      }

      // optional fixed32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_game_ver;
        break;
      }

      // optional fixed32 game_ver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_game_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &game_ver_)));
          set_has_game_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_room_id;
        break;
      }

      // optional fixed32 room_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_roomChildID;
        break;
      }

      // optional fixed32 roomChildID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roomChildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &roomchildid_)));
          set_has_roomchildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_maxPlayerNum;
        break;
      }

      // optional fixed32 maxPlayerNum = 6 [default = 200];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &maxplayernum_)));
          set_has_maxplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2w_game_ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_ready];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->game_id(), output);
  }

  // optional fixed32 game_ver = 3;
  if (has_game_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->game_ver(), output);
  }

  // optional fixed32 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->room_id(), output);
  }

  // optional fixed32 roomChildID = 5;
  if (has_roomchildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->roomchildid(), output);
  }

  // optional fixed32 maxPlayerNum = 6 [default = 200];
  if (has_maxplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->maxplayernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2w_game_ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_ready];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->game_id(), target);
  }

  // optional fixed32 game_ver = 3;
  if (has_game_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->game_ver(), target);
  }

  // optional fixed32 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->room_id(), target);
  }

  // optional fixed32 roomChildID = 5;
  if (has_roomchildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->roomchildid(), target);
  }

  // optional fixed32 maxPlayerNum = 6 [default = 200];
  if (has_maxplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->maxplayernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2w_game_ready::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_ready];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 game_ver = 3;
    if (has_game_ver()) {
      total_size += 1 + 4;
    }

    // optional fixed32 room_id = 4;
    if (has_room_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 roomChildID = 5;
    if (has_roomchildid()) {
      total_size += 1 + 4;
    }

    // optional fixed32 maxPlayerNum = 6 [default = 200];
    if (has_maxplayernum()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2w_game_ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2w_game_ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2w_game_ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2w_game_ready::MergeFrom(const packetl2w_game_ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_game_ver()) {
      set_game_ver(from.game_ver());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_roomchildid()) {
      set_roomchildid(from.roomchildid());
    }
    if (from.has_maxplayernum()) {
      set_maxplayernum(from.maxplayernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2w_game_ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2w_game_ready::CopyFrom(const packetl2w_game_ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2w_game_ready::IsInitialized() const {

  return true;
}

void packetl2w_game_ready::Swap(packetl2w_game_ready* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(game_ver_, other->game_ver_);
    std::swap(room_id_, other->room_id_);
    std::swap(roomchildid_, other->roomchildid_);
    std::swap(maxplayernum_, other->maxplayernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2w_game_ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2w_game_ready_descriptor_;
  metadata.reflection = packetl2w_game_ready_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2l_player_login::kPacketIdFieldNumber;
const int packetw2l_player_login::kSessionidFieldNumber;
const int packetw2l_player_login::kAccountInfoFieldNumber;
const int packetw2l_player_login::kAccountInfoExFieldNumber;
#endif  // !_MSC_VER

packetw2l_player_login::packetw2l_player_login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2l_player_login::InitAsDefaultInstance() {
  account_info_ = const_cast< ::msg_info_def::msg_account_info*>(&::msg_info_def::msg_account_info::default_instance());
  account_info_ex_ = const_cast< ::msg_info_def_ex::msg_account_info_ex*>(&::msg_info_def_ex::msg_account_info_ex::default_instance());
}

packetw2l_player_login::packetw2l_player_login(const packetw2l_player_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2l_player_login::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 20002;
  sessionid_ = 0u;
  account_info_ = NULL;
  account_info_ex_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2l_player_login::~packetw2l_player_login() {
  SharedDtor();
}

void packetw2l_player_login::SharedDtor() {
  if (this != default_instance_) {
    delete account_info_;
    delete account_info_ex_;
  }
}

void packetw2l_player_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2l_player_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2l_player_login_descriptor_;
}

const packetw2l_player_login& packetw2l_player_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2l_player_login* packetw2l_player_login::default_instance_ = NULL;

packetw2l_player_login* packetw2l_player_login::New() const {
  return new packetw2l_player_login;
}

void packetw2l_player_login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 20002;
    sessionid_ = 0u;
    if (has_account_info()) {
      if (account_info_ != NULL) account_info_->::msg_info_def::msg_account_info::Clear();
    }
    if (has_account_info_ex()) {
      if (account_info_ex_ != NULL) account_info_ex_->::msg_info_def_ex::msg_account_info_ex::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2l_player_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_login];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::logic2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::logic2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sessionid;
        break;
      }

      // optional fixed32 sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account_info;
        break;
      }

      // optional .msg_info_def.msg_account_info account_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account_info_ex;
        break;
      }

      // optional .msg_info_def_ex.msg_account_info_ex account_info_ex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_info_ex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_info_ex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2l_player_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_login];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sessionid(), output);
  }

  // optional .msg_info_def.msg_account_info account_info = 3;
  if (has_account_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->account_info(), output);
  }

  // optional .msg_info_def_ex.msg_account_info_ex account_info_ex = 4;
  if (has_account_info_ex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->account_info_ex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2l_player_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_login];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 sessionid = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sessionid(), target);
  }

  // optional .msg_info_def.msg_account_info account_info = 3;
  if (has_account_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->account_info(), target);
  }

  // optional .msg_info_def_ex.msg_account_info_ex account_info_ex = 4;
  if (has_account_info_ex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->account_info_ex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2l_player_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_login];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 + 4;
    }

    // optional .msg_info_def.msg_account_info account_info = 3;
    if (has_account_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_info());
    }

    // optional .msg_info_def_ex.msg_account_info_ex account_info_ex = 4;
    if (has_account_info_ex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_info_ex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2l_player_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2l_player_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2l_player_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2l_player_login::MergeFrom(const packetw2l_player_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_account_info()) {
      mutable_account_info()->::msg_info_def::msg_account_info::MergeFrom(from.account_info());
    }
    if (from.has_account_info_ex()) {
      mutable_account_info_ex()->::msg_info_def_ex::msg_account_info_ex::MergeFrom(from.account_info_ex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2l_player_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2l_player_login::CopyFrom(const packetw2l_player_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2l_player_login::IsInitialized() const {

  if (has_account_info_ex()) {
    if (!this->account_info_ex().IsInitialized()) return false;
  }
  return true;
}

void packetw2l_player_login::Swap(packetw2l_player_login* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(account_info_, other->account_info_);
    std::swap(account_info_ex_, other->account_info_ex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2l_player_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2l_player_login_descriptor_;
  metadata.reflection = packetw2l_player_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2w_player_login_result::kPacketIdFieldNumber;
const int packetl2w_player_login_result::kPlayeridFieldNumber;
const int packetl2w_player_login_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2w_player_login_result::packetl2w_player_login_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2w_player_login_result::InitAsDefaultInstance() {
}

packetl2w_player_login_result::packetl2w_player_login_result(const packetl2w_player_login_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2w_player_login_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 20005;
  playerid_ = 0u;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2w_player_login_result::~packetl2w_player_login_result() {
  SharedDtor();
}

void packetl2w_player_login_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2w_player_login_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2w_player_login_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2w_player_login_result_descriptor_;
}

const packetl2w_player_login_result& packetl2w_player_login_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2w_player_login_result* packetl2w_player_login_result::default_instance_ = NULL;

packetl2w_player_login_result* packetl2w_player_login_result::New() const {
  return new packetl2w_player_login_result;
}

void packetl2w_player_login_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 20005;
    playerid_ = 0u;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2w_player_login_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_login_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::logic2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::logic2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_playerid;
        break;
      }

      // optional fixed32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 3 [default = e_rmt_fail];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2w_player_login_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_login_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->playerid(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 3 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2w_player_login_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_login_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->playerid(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 3 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2w_player_login_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_login_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 + 4;
    }

    // optional .msg_type_def.e_msg_result_def result = 3 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2w_player_login_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2w_player_login_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2w_player_login_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2w_player_login_result::MergeFrom(const packetl2w_player_login_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2w_player_login_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2w_player_login_result::CopyFrom(const packetl2w_player_login_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2w_player_login_result::IsInitialized() const {

  return true;
}

void packetl2w_player_login_result::Swap(packetl2w_player_login_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(playerid_, other->playerid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2w_player_login_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2w_player_login_result_descriptor_;
  metadata.reflection = packetl2w_player_login_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2l_player_logout::kPacketIdFieldNumber;
const int packetw2l_player_logout::kPlayeridFieldNumber;
#endif  // !_MSC_VER

packetw2l_player_logout::packetw2l_player_logout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2l_player_logout::InitAsDefaultInstance() {
}

packetw2l_player_logout::packetw2l_player_logout(const packetw2l_player_logout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2l_player_logout::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 20003;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2l_player_logout::~packetw2l_player_logout() {
  SharedDtor();
}

void packetw2l_player_logout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2l_player_logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2l_player_logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2l_player_logout_descriptor_;
}

const packetw2l_player_logout& packetw2l_player_logout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2l_player_logout* packetw2l_player_logout::default_instance_ = NULL;

packetw2l_player_logout* packetw2l_player_logout::New() const {
  return new packetw2l_player_logout;
}

void packetw2l_player_logout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 20003;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2l_player_logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_logout];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::logic2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::logic2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_playerid;
        break;
      }

      // optional fixed32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2l_player_logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_logout];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2l_player_logout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_logout];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2l_player_logout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_player_logout];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2l_player_logout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2l_player_logout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2l_player_logout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2l_player_logout::MergeFrom(const packetw2l_player_logout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2l_player_logout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2l_player_logout::CopyFrom(const packetw2l_player_logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2l_player_logout::IsInitialized() const {

  return true;
}

void packetw2l_player_logout::Swap(packetw2l_player_logout* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2l_player_logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2l_player_logout_descriptor_;
  metadata.reflection = packetw2l_player_logout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2w_player_logout_result::kPacketIdFieldNumber;
const int packetl2w_player_logout_result::kPlayeridFieldNumber;
#endif  // !_MSC_VER

packetl2w_player_logout_result::packetl2w_player_logout_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2w_player_logout_result::InitAsDefaultInstance() {
}

packetl2w_player_logout_result::packetl2w_player_logout_result(const packetl2w_player_logout_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2w_player_logout_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 20006;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2w_player_logout_result::~packetl2w_player_logout_result() {
  SharedDtor();
}

void packetl2w_player_logout_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2w_player_logout_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2w_player_logout_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2w_player_logout_result_descriptor_;
}

const packetl2w_player_logout_result& packetl2w_player_logout_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2w_player_logout_result* packetl2w_player_logout_result::default_instance_ = NULL;

packetl2w_player_logout_result* packetl2w_player_logout_result::New() const {
  return new packetl2w_player_logout_result;
}

void packetl2w_player_logout_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 20006;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2w_player_logout_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_logout_result];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::logic2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::logic2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_playerid;
        break;
      }

      // optional fixed32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2w_player_logout_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_logout_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2w_player_logout_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_logout_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2w_player_logout_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_logout_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2w_player_logout_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2w_player_logout_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2w_player_logout_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2w_player_logout_result::MergeFrom(const packetl2w_player_logout_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2w_player_logout_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2w_player_logout_result::CopyFrom(const packetl2w_player_logout_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2w_player_logout_result::IsInitialized() const {

  return true;
}

void packetl2w_player_logout_result::Swap(packetl2w_player_logout_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2w_player_logout_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2w_player_logout_result_descriptor_;
  metadata.reflection = packetl2w_player_logout_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2l_change_player_property::kPacketIdFieldNumber;
const int packetw2l_change_player_property::kPlayeridFieldNumber;
const int packetw2l_change_player_property::kChangeInfoFieldNumber;
const int packetw2l_change_player_property::kChangeInfoExFieldNumber;
#endif  // !_MSC_VER

packetw2l_change_player_property::packetw2l_change_player_property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2l_change_player_property::InitAsDefaultInstance() {
  change_info_ = const_cast< ::msg_info_def::msg_account_info*>(&::msg_info_def::msg_account_info::default_instance());
  change_info_ex_ = const_cast< ::msg_info_def_ex::msg_account_info_ex*>(&::msg_info_def_ex::msg_account_info_ex::default_instance());
}

packetw2l_change_player_property::packetw2l_change_player_property(const packetw2l_change_player_property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2l_change_player_property::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 20004;
  playerid_ = 0u;
  change_info_ = NULL;
  change_info_ex_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2l_change_player_property::~packetw2l_change_player_property() {
  SharedDtor();
}

void packetw2l_change_player_property::SharedDtor() {
  if (this != default_instance_) {
    delete change_info_;
    delete change_info_ex_;
  }
}

void packetw2l_change_player_property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2l_change_player_property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2l_change_player_property_descriptor_;
}

const packetw2l_change_player_property& packetw2l_change_player_property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2l_change_player_property* packetw2l_change_player_property::default_instance_ = NULL;

packetw2l_change_player_property* packetw2l_change_player_property::New() const {
  return new packetw2l_change_player_property;
}

void packetw2l_change_player_property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 20004;
    playerid_ = 0u;
    if (has_change_info()) {
      if (change_info_ != NULL) change_info_->::msg_info_def::msg_account_info::Clear();
    }
    if (has_change_info_ex()) {
      if (change_info_ex_ != NULL) change_info_ex_->::msg_info_def_ex::msg_account_info_ex::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2l_change_player_property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_change_player_property];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::logic2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::logic2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_playerid;
        break;
      }

      // optional fixed32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_change_info;
        break;
      }

      // optional .msg_info_def.msg_account_info change_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_change_info_ex;
        break;
      }

      // optional .msg_info_def_ex.msg_account_info_ex change_info_ex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_info_ex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_info_ex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2l_change_player_property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_change_player_property];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->playerid(), output);
  }

  // optional .msg_info_def.msg_account_info change_info = 3;
  if (has_change_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->change_info(), output);
  }

  // optional .msg_info_def_ex.msg_account_info_ex change_info_ex = 4;
  if (has_change_info_ex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->change_info_ex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2l_change_player_property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_change_player_property];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->playerid(), target);
  }

  // optional .msg_info_def.msg_account_info change_info = 3;
  if (has_change_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->change_info(), target);
  }

  // optional .msg_info_def_ex.msg_account_info_ex change_info_ex = 4;
  if (has_change_info_ex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->change_info_ex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2l_change_player_property::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_change_player_property];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 + 4;
    }

    // optional .msg_info_def.msg_account_info change_info = 3;
    if (has_change_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_info());
    }

    // optional .msg_info_def_ex.msg_account_info_ex change_info_ex = 4;
    if (has_change_info_ex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_info_ex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2l_change_player_property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2l_change_player_property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2l_change_player_property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2l_change_player_property::MergeFrom(const packetw2l_change_player_property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_change_info()) {
      mutable_change_info()->::msg_info_def::msg_account_info::MergeFrom(from.change_info());
    }
    if (from.has_change_info_ex()) {
      mutable_change_info_ex()->::msg_info_def_ex::msg_account_info_ex::MergeFrom(from.change_info_ex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2l_change_player_property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2l_change_player_property::CopyFrom(const packetw2l_change_player_property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2l_change_player_property::IsInitialized() const {

  if (has_change_info_ex()) {
    if (!this->change_info_ex().IsInitialized()) return false;
  }
  return true;
}

void packetw2l_change_player_property::Swap(packetw2l_change_player_property* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(playerid_, other->playerid_);
    std::swap(change_info_, other->change_info_);
    std::swap(change_info_ex_, other->change_info_ex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2l_change_player_property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2l_change_player_property_descriptor_;
  metadata.reflection = packetw2l_change_player_property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2w_player_property_stat::kPacketIdFieldNumber;
const int packetl2w_player_property_stat::kPlayerIdFieldNumber;
const int packetl2w_player_property_stat::kGameIdFieldNumber;
const int packetl2w_player_property_stat::kAttrTypeFieldNumber;
const int packetl2w_player_property_stat::kAddValueFieldNumber;
const int packetl2w_player_property_stat::kReasonFieldNumber;
const int packetl2w_player_property_stat::kParamFieldNumber;
#endif  // !_MSC_VER

packetl2w_player_property_stat::packetl2w_player_property_stat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2w_player_property_stat::InitAsDefaultInstance() {
}

packetl2w_player_property_stat::packetl2w_player_property_stat(const packetl2w_player_property_stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2w_player_property_stat::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 20009;
  playerid_ = 0u;
  gameid_ = 0u;
  attrtype_ = 1;
  addvalue_ = 0;
  reason_ = 1;
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2w_player_property_stat::~packetl2w_player_property_stat() {
  SharedDtor();
}

void packetl2w_player_property_stat::SharedDtor() {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (this != default_instance_) {
  }
}

void packetl2w_player_property_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2w_player_property_stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2w_player_property_stat_descriptor_;
}

const packetl2w_player_property_stat& packetl2w_player_property_stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2w_player_property_stat* packetl2w_player_property_stat::default_instance_ = NULL;

packetl2w_player_property_stat* packetl2w_player_property_stat::New() const {
  return new packetl2w_player_property_stat;
}

void packetl2w_player_property_stat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 20009;
    playerid_ = 0u;
    gameid_ = 0u;
    attrtype_ = 1;
    addvalue_ = 0;
    reason_ = 1;
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::kEmptyString) {
        param_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2w_player_property_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_property_stat];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::logic2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::logic2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_playerId;
        break;
      }

      // optional fixed32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_gameId;
        break;
      }

      // optional fixed32 gameId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attrType;
        break;
      }

      // optional .msg_type_def.e_item_type_def attrType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_item_type_def_IsValid(value)) {
            set_attrtype(static_cast< ::msg_type_def::e_item_type_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_addValue;
        break;
      }

      // optional int32 addValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addvalue_)));
          set_has_addvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reason;
        break;
      }

      // optional .PropertyReasonType reason = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PropertyReasonType_IsValid(value)) {
            set_reason(static_cast< ::PropertyReasonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_param;
        break;
      }

      // optional string param = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2w_player_property_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_property_stat];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->playerid(), output);
  }

  // optional fixed32 gameId = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->gameid(), output);
  }

  // optional .msg_type_def.e_item_type_def attrType = 4;
  if (has_attrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->attrtype(), output);
  }

  // optional int32 addValue = 5;
  if (has_addvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->addvalue(), output);
  }

  // optional .PropertyReasonType reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->reason(), output);
  }

  // optional string param = 7;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2w_player_property_stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_property_stat];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->playerid(), target);
  }

  // optional fixed32 gameId = 3;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->gameid(), target);
  }

  // optional .msg_type_def.e_item_type_def attrType = 4;
  if (has_attrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->attrtype(), target);
  }

  // optional int32 addValue = 5;
  if (has_addvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->addvalue(), target);
  }

  // optional .PropertyReasonType reason = 6;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->reason(), target);
  }

  // optional string param = 7;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2w_player_property_stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_property_stat];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 + 4;
    }

    // optional fixed32 gameId = 3;
    if (has_gameid()) {
      total_size += 1 + 4;
    }

    // optional .msg_type_def.e_item_type_def attrType = 4;
    if (has_attrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attrtype());
    }

    // optional int32 addValue = 5;
    if (has_addvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addvalue());
    }

    // optional .PropertyReasonType reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

    // optional string param = 7;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2w_player_property_stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2w_player_property_stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2w_player_property_stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2w_player_property_stat::MergeFrom(const packetl2w_player_property_stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_attrtype()) {
      set_attrtype(from.attrtype());
    }
    if (from.has_addvalue()) {
      set_addvalue(from.addvalue());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2w_player_property_stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2w_player_property_stat::CopyFrom(const packetl2w_player_property_stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2w_player_property_stat::IsInitialized() const {

  return true;
}

void packetl2w_player_property_stat::Swap(packetl2w_player_property_stat* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(playerid_, other->playerid_);
    std::swap(gameid_, other->gameid_);
    std::swap(attrtype_, other->attrtype_);
    std::swap(addvalue_, other->addvalue_);
    std::swap(reason_, other->reason_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2w_player_property_stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2w_player_property_stat_descriptor_;
  metadata.reflection = packetl2w_player_property_stat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2l_accept_gift::kPacketIdFieldNumber;
const int packetw2l_accept_gift::kSenderIdFieldNumber;
const int packetw2l_accept_gift::kReceiverIdFieldNumber;
const int packetw2l_accept_gift::kGiftIdFieldNumber;
#endif  // !_MSC_VER

packetw2l_accept_gift::packetw2l_accept_gift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetw2l_accept_gift::InitAsDefaultInstance() {
}

packetw2l_accept_gift::packetw2l_accept_gift(const packetw2l_accept_gift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetw2l_accept_gift::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 20010;
  senderid_ = 0;
  receiverid_ = 0;
  giftid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2l_accept_gift::~packetw2l_accept_gift() {
  SharedDtor();
}

void packetw2l_accept_gift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2l_accept_gift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2l_accept_gift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2l_accept_gift_descriptor_;
}

const packetw2l_accept_gift& packetw2l_accept_gift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2l_accept_gift* packetw2l_accept_gift::default_instance_ = NULL;

packetw2l_accept_gift* packetw2l_accept_gift::New() const {
  return new packetw2l_accept_gift;
}

void packetw2l_accept_gift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 20010;
    senderid_ = 0;
    receiverid_ = 0;
    giftid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2l_accept_gift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_accept_gift];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::logic2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::logic2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_senderId;
        break;
      }

      // optional int32 senderId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_receiverId;
        break;
      }

      // optional int32 receiverId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiverid_)));
          set_has_receiverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_giftId;
        break;
      }

      // optional int32 giftId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetw2l_accept_gift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_accept_gift];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 senderId = 2;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->senderid(), output);
  }

  // optional int32 receiverId = 3;
  if (has_receiverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->receiverid(), output);
  }

  // optional int32 giftId = 4;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->giftid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetw2l_accept_gift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_accept_gift];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 senderId = 2;
  if (has_senderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->senderid(), target);
  }

  // optional int32 receiverId = 3;
  if (has_receiverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->receiverid(), target);
  }

  // optional int32 giftId = 4;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->giftid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetw2l_accept_gift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2l_accept_gift];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 senderId = 2;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senderid());
    }

    // optional int32 receiverId = 3;
    if (has_receiverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiverid());
    }

    // optional int32 giftId = 4;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2l_accept_gift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2l_accept_gift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2l_accept_gift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2l_accept_gift::MergeFrom(const packetw2l_accept_gift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
    if (from.has_receiverid()) {
      set_receiverid(from.receiverid());
    }
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2l_accept_gift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2l_accept_gift::CopyFrom(const packetw2l_accept_gift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2l_accept_gift::IsInitialized() const {

  return true;
}

void packetw2l_accept_gift::Swap(packetw2l_accept_gift* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(senderid_, other->senderid_);
    std::swap(receiverid_, other->receiverid_);
    std::swap(giftid_, other->giftid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2l_accept_gift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2l_accept_gift_descriptor_;
  metadata.reflection = packetw2l_accept_gift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2w_game_broadcast::kPacketIdFieldNumber;
const int packetl2w_game_broadcast::kGameMsgFieldNumber;
#endif  // !_MSC_VER

packetl2w_game_broadcast::packetl2w_game_broadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2w_game_broadcast::InitAsDefaultInstance() {
}

packetl2w_game_broadcast::packetl2w_game_broadcast(const packetl2w_game_broadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2w_game_broadcast::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 20011;
  game_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2w_game_broadcast::~packetl2w_game_broadcast() {
  SharedDtor();
}

void packetl2w_game_broadcast::SharedDtor() {
  if (game_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete game_msg_;
  }
  if (this != default_instance_) {
  }
}

void packetl2w_game_broadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2w_game_broadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2w_game_broadcast_descriptor_;
}

const packetl2w_game_broadcast& packetl2w_game_broadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2w_game_broadcast* packetl2w_game_broadcast::default_instance_ = NULL;

packetl2w_game_broadcast* packetl2w_game_broadcast::New() const {
  return new packetl2w_game_broadcast;
}

void packetl2w_game_broadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 20011;
    if (has_game_msg()) {
      if (game_msg_ != &::google::protobuf::internal::kEmptyString) {
        game_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2w_game_broadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_broadcast];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::logic2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::logic2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_msg;
        break;
      }

      // optional string game_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_msg().data(), this->game_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2w_game_broadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_broadcast];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string game_msg = 2;
  if (has_game_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_msg().data(), this->game_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->game_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2w_game_broadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_broadcast];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string game_msg = 2;
  if (has_game_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_msg().data(), this->game_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2w_game_broadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_game_broadcast];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string game_msg = 2;
    if (has_game_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2w_game_broadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2w_game_broadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2w_game_broadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2w_game_broadcast::MergeFrom(const packetl2w_game_broadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_game_msg()) {
      set_game_msg(from.game_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2w_game_broadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2w_game_broadcast::CopyFrom(const packetl2w_game_broadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2w_game_broadcast::IsInitialized() const {

  return true;
}

void packetl2w_game_broadcast::Swap(packetl2w_game_broadcast* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(game_msg_, other->game_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2w_game_broadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2w_game_broadcast_descriptor_;
  metadata.reflection = packetl2w_game_broadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2w_player_quest_change::kPacketIdFieldNumber;
const int packetl2w_player_quest_change::kPlayerIdFieldNumber;
const int packetl2w_player_quest_change::kQuestIdFieldNumber;
const int packetl2w_player_quest_change::kQCountFieldNumber;
const int packetl2w_player_quest_change::kExParamFieldNumber;
#endif  // !_MSC_VER

packetl2w_player_quest_change::packetl2w_player_quest_change()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2w_player_quest_change::InitAsDefaultInstance() {
}

packetl2w_player_quest_change::packetl2w_player_quest_change(const packetl2w_player_quest_change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2w_player_quest_change::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 20013;
  player_id_ = 0u;
  quest_id_ = 0u;
  q_count_ = 1u;
  ex_param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2w_player_quest_change::~packetl2w_player_quest_change() {
  SharedDtor();
}

void packetl2w_player_quest_change::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2w_player_quest_change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2w_player_quest_change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2w_player_quest_change_descriptor_;
}

const packetl2w_player_quest_change& packetl2w_player_quest_change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2w_player_quest_change* packetl2w_player_quest_change::default_instance_ = NULL;

packetl2w_player_quest_change* packetl2w_player_quest_change::New() const {
  return new packetl2w_player_quest_change;
}

void packetl2w_player_quest_change::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 20013;
    player_id_ = 0u;
    quest_id_ = 0u;
    q_count_ = 1u;
    ex_param_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2w_player_quest_change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_quest_change];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::logic2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::logic2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_player_id;
        break;
      }

      // optional fixed32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_quest_id;
        break;
      }

      // optional fixed32 quest_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_quest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_q_count;
        break;
      }

      // optional fixed32 q_count = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_q_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &q_count_)));
          set_has_q_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_ex_param;
        break;
      }

      // optional fixed32 ex_param = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ex_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ex_param_)));
          set_has_ex_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2w_player_quest_change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_quest_change];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->player_id(), output);
  }

  // optional fixed32 quest_id = 3;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->quest_id(), output);
  }

  // optional fixed32 q_count = 4 [default = 1];
  if (has_q_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->q_count(), output);
  }

  // optional fixed32 ex_param = 5 [default = 0];
  if (has_ex_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->ex_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2w_player_quest_change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_quest_change];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->player_id(), target);
  }

  // optional fixed32 quest_id = 3;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->quest_id(), target);
  }

  // optional fixed32 q_count = 4 [default = 1];
  if (has_q_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->q_count(), target);
  }

  // optional fixed32 ex_param = 5 [default = 0];
  if (has_ex_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->ex_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2w_player_quest_change::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_quest_change];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 quest_id = 3;
    if (has_quest_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 q_count = 4 [default = 1];
    if (has_q_count()) {
      total_size += 1 + 4;
    }

    // optional fixed32 ex_param = 5 [default = 0];
    if (has_ex_param()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2w_player_quest_change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2w_player_quest_change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2w_player_quest_change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2w_player_quest_change::MergeFrom(const packetl2w_player_quest_change& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_q_count()) {
      set_q_count(from.q_count());
    }
    if (from.has_ex_param()) {
      set_ex_param(from.ex_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2w_player_quest_change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2w_player_quest_change::CopyFrom(const packetl2w_player_quest_change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2w_player_quest_change::IsInitialized() const {

  return true;
}

void packetl2w_player_quest_change::Swap(packetl2w_player_quest_change* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(quest_id_, other->quest_id_);
    std::swap(q_count_, other->q_count_);
    std::swap(ex_param_, other->ex_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2w_player_quest_change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2w_player_quest_change_descriptor_;
  metadata.reflection = packetl2w_player_quest_change_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2w_player_star_change::kPacketIdFieldNumber;
const int packetl2w_player_star_change::kPlayerIdFieldNumber;
const int packetl2w_player_star_change::kAddstarFieldNumber;
const int packetl2w_player_star_change::kAddawardFieldNumber;
#endif  // !_MSC_VER

packetl2w_player_star_change::packetl2w_player_star_change()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packetl2w_player_star_change::InitAsDefaultInstance() {
}

packetl2w_player_star_change::packetl2w_player_star_change(const packetl2w_player_star_change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packetl2w_player_star_change::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 20014;
  player_id_ = 0u;
  addstar_ = 0u;
  addaward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2w_player_star_change::~packetl2w_player_star_change() {
  SharedDtor();
}

void packetl2w_player_star_change::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2w_player_star_change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2w_player_star_change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2w_player_star_change_descriptor_;
}

const packetl2w_player_star_change& packetl2w_player_star_change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2w_player_star_change* packetl2w_player_star_change::default_instance_ = NULL;

packetl2w_player_star_change* packetl2w_player_star_change::New() const {
  return new packetl2w_player_star_change;
}

void packetl2w_player_star_change::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 20014;
    player_id_ = 0u;
    addstar_ = 0u;
    addaward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2w_player_star_change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_star_change];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::logic2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::logic2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_player_id;
        break;
      }

      // optional fixed32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_addstar;
        break;
      }

      // optional fixed32 addstar = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_addstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &addstar_)));
          set_has_addstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_addaward;
        break;
      }

      // optional fixed32 addaward = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_addaward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &addaward_)));
          set_has_addaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packetl2w_player_star_change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_star_change];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->player_id(), output);
  }

  // optional fixed32 addstar = 3 [default = 0];
  if (has_addstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->addstar(), output);
  }

  // optional fixed32 addaward = 4 [default = 0];
  if (has_addaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->addaward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packetl2w_player_star_change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_star_change];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->player_id(), target);
  }

  // optional fixed32 addstar = 3 [default = 0];
  if (has_addstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->addstar(), target);
  }

  // optional fixed32 addaward = 4 [default = 0];
  if (has_addaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->addaward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packetl2w_player_star_change::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2w_player_star_change];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 addstar = 3 [default = 0];
    if (has_addstar()) {
      total_size += 1 + 4;
    }

    // optional fixed32 addaward = 4 [default = 0];
    if (has_addaward()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2w_player_star_change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2w_player_star_change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2w_player_star_change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2w_player_star_change::MergeFrom(const packetl2w_player_star_change& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_addstar()) {
      set_addstar(from.addstar());
    }
    if (from.has_addaward()) {
      set_addaward(from.addaward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2w_player_star_change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2w_player_star_change::CopyFrom(const packetl2w_player_star_change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2w_player_star_change::IsInitialized() const {

  return true;
}

void packetl2w_player_star_change::Swap(packetl2w_player_star_change* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(addstar_, other->addstar_);
    std::swap(addaward_, other->addaward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2w_player_star_change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2w_player_star_change_descriptor_;
  metadata.reflection = packetl2w_player_star_change_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packagel2w_p_game_status_change::kPacketIdFieldNumber;
const int packagel2w_p_game_status_change::kPlayerIdFieldNumber;
const int packagel2w_p_game_status_change::kGameIdFieldNumber;
const int packagel2w_p_game_status_change::kRoomIdFieldNumber;
const int packagel2w_p_game_status_change::kTableIdFieldNumber;
const int packagel2w_p_game_status_change::kChairIdFieldNumber;
const int packagel2w_p_game_status_change::kUserStatusFieldNumber;
#endif  // !_MSC_VER

packagel2w_p_game_status_change::packagel2w_p_game_status_change()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packagel2w_p_game_status_change::InitAsDefaultInstance() {
}

packagel2w_p_game_status_change::packagel2w_p_game_status_change(const packagel2w_p_game_status_change& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packagel2w_p_game_status_change::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 20015;
  player_id_ = 0u;
  game_id_ = 0u;
  room_id_ = 0u;
  table_id_ = 0u;
  chair_id_ = 0u;
  user_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packagel2w_p_game_status_change::~packagel2w_p_game_status_change() {
  SharedDtor();
}

void packagel2w_p_game_status_change::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packagel2w_p_game_status_change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packagel2w_p_game_status_change::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packagel2w_p_game_status_change_descriptor_;
}

const packagel2w_p_game_status_change& packagel2w_p_game_status_change::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logic2world_5fprotocol_2eproto();
  return *default_instance_;
}

packagel2w_p_game_status_change* packagel2w_p_game_status_change::default_instance_ = NULL;

packagel2w_p_game_status_change* packagel2w_p_game_status_change::New() const {
  return new packagel2w_p_game_status_change;
}

void packagel2w_p_game_status_change::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 20015;
    player_id_ = 0u;
    game_id_ = 0u;
    room_id_ = 0u;
    table_id_ = 0u;
    chair_id_ = 0u;
    user_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packagel2w_p_game_status_change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_msg_12w_p_game_status_change];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::logic2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::logic2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_player_id;
        break;
      }

      // optional fixed32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_game_id;
        break;
      }

      // optional fixed32 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_room_id;
        break;
      }

      // optional fixed32 room_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_table_id;
        break;
      }

      // optional fixed32 table_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_chair_id;
        break;
      }

      // optional fixed32 chair_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_user_status;
        break;
      }

      // optional fixed32 user_status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_user_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &user_status_)));
          set_has_user_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packagel2w_p_game_status_change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_msg_12w_p_game_status_change];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional fixed32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->player_id(), output);
  }

  // optional fixed32 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->game_id(), output);
  }

  // optional fixed32 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->room_id(), output);
  }

  // optional fixed32 table_id = 5;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->table_id(), output);
  }

  // optional fixed32 chair_id = 6;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->chair_id(), output);
  }

  // optional fixed32 user_status = 7;
  if (has_user_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->user_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packagel2w_p_game_status_change::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_msg_12w_p_game_status_change];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional fixed32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->player_id(), target);
  }

  // optional fixed32 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->game_id(), target);
  }

  // optional fixed32 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->room_id(), target);
  }

  // optional fixed32 table_id = 5;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->table_id(), target);
  }

  // optional fixed32 chair_id = 6;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->chair_id(), target);
  }

  // optional fixed32 user_status = 7;
  if (has_user_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->user_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packagel2w_p_game_status_change::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .logic2world_protocols.e_server_msg_type packet_id = 1 [default = e_msg_12w_p_game_status_change];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional fixed32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 game_id = 3;
    if (has_game_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 room_id = 4;
    if (has_room_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 table_id = 5;
    if (has_table_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 chair_id = 6;
    if (has_chair_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 user_status = 7;
    if (has_user_status()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packagel2w_p_game_status_change::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packagel2w_p_game_status_change* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packagel2w_p_game_status_change*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packagel2w_p_game_status_change::MergeFrom(const packagel2w_p_game_status_change& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_user_status()) {
      set_user_status(from.user_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packagel2w_p_game_status_change::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packagel2w_p_game_status_change::CopyFrom(const packagel2w_p_game_status_change& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packagel2w_p_game_status_change::IsInitialized() const {

  return true;
}

void packagel2w_p_game_status_change::Swap(packagel2w_p_game_status_change* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(user_status_, other->user_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packagel2w_p_game_status_change::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packagel2w_p_game_status_change_descriptor_;
  metadata.reflection = packagel2w_p_game_status_change_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace logic2world_protocols

// @@protoc_insertion_point(global_scope)
