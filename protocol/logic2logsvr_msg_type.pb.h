// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logic2logsvr_msg_type.proto

#ifndef PROTOBUF_logic2logsvr_5fmsg_5ftype_2eproto__INCLUDED
#define PROTOBUF_logic2logsvr_5fmsg_5ftype_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace logic2logsvr {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
void protobuf_AssignDesc_logic2logsvr_5fmsg_5ftype_2eproto();
void protobuf_ShutdownFile_logic2logsvr_5fmsg_5ftype_2eproto();

class PlayerFlags;
class OptInfo;
class PlayerInfoZJH;
class GameInfo;
class ZJHGameLog;
class FishBulletInfo;
class FishFireInfo;
class FishHitInfo;
class PlayerInfoFish;
class FishGameLog;

// ===================================================================

class PlayerFlags : public ::google::protobuf::Message {
 public:
  PlayerFlags();
  virtual ~PlayerFlags();

  PlayerFlags(const PlayerFlags& from);

  inline PlayerFlags& operator=(const PlayerFlags& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerFlags& default_instance();

  void Swap(PlayerFlags* other);

  // implements Message ----------------------------------------------

  PlayerFlags* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerFlags& from);
  void MergeFrom(const PlayerFlags& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Flags = 1;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 1;
  inline ::google::protobuf::int32 flags() const;
  inline void set_flags(::google::protobuf::int32 value);

  // optional float WinP = 2;
  inline bool has_winp() const;
  inline void clear_winp();
  static const int kWinPFieldNumber = 2;
  inline float winp() const;
  inline void set_winp(float value);

  // optional bool FlagsS = 3;
  inline bool has_flagss() const;
  inline void clear_flagss();
  static const int kFlagsSFieldNumber = 3;
  inline bool flagss() const;
  inline void set_flagss(bool value);

  // optional float opCoeff = 4;
  inline bool has_opcoeff() const;
  inline void clear_opcoeff();
  static const int kOpCoeffFieldNumber = 4;
  inline float opcoeff() const;
  inline void set_opcoeff(float value);

  // optional int64 flagsMoneyLit = 5;
  inline bool has_flagsmoneylit() const;
  inline void clear_flagsmoneylit();
  static const int kFlagsMoneyLitFieldNumber = 5;
  inline ::google::protobuf::int64 flagsmoneylit() const;
  inline void set_flagsmoneylit(::google::protobuf::int64 value);

  // optional int64 CurMoneyGet = 6;
  inline bool has_curmoneyget() const;
  inline void clear_curmoneyget();
  static const int kCurMoneyGetFieldNumber = 6;
  inline ::google::protobuf::int64 curmoneyget() const;
  inline void set_curmoneyget(::google::protobuf::int64 value);

  // optional int32 GmOpFlags = 7;
  inline bool has_gmopflags() const;
  inline void clear_gmopflags();
  static const int kGmOpFlagsFieldNumber = 7;
  inline ::google::protobuf::int32 gmopflags() const;
  inline void set_gmopflags(::google::protobuf::int32 value);

  // optional int64 SendCoinCnt = 8;
  inline bool has_sendcoincnt() const;
  inline void clear_sendcoincnt();
  static const int kSendCoinCntFieldNumber = 8;
  inline ::google::protobuf::int64 sendcoincnt() const;
  inline void set_sendcoincnt(::google::protobuf::int64 value);

  // optional int64 RecvCoinCnt = 9;
  inline bool has_recvcoincnt() const;
  inline void clear_recvcoincnt();
  static const int kRecvCoinCntFieldNumber = 9;
  inline ::google::protobuf::int64 recvcoincnt() const;
  inline void set_recvcoincnt(::google::protobuf::int64 value);

  // optional int64 RechargeCnt = 10;
  inline bool has_rechargecnt() const;
  inline void clear_rechargecnt();
  static const int kRechargeCntFieldNumber = 10;
  inline ::google::protobuf::int64 rechargecnt() const;
  inline void set_rechargecnt(::google::protobuf::int64 value);

  // optional int64 WithDrawCnt = 11;
  inline bool has_withdrawcnt() const;
  inline void clear_withdrawcnt();
  static const int kWithDrawCntFieldNumber = 11;
  inline ::google::protobuf::int64 withdrawcnt() const;
  inline void set_withdrawcnt(::google::protobuf::int64 value);

  // optional int32 FlagsY = 12;
  inline bool has_flagsy() const;
  inline void clear_flagsy();
  static const int kFlagsYFieldNumber = 12;
  inline ::google::protobuf::int32 flagsy() const;
  inline void set_flagsy(::google::protobuf::int32 value);

  // optional int64 FlagsX = 13;
  inline bool has_flagsx() const;
  inline void clear_flagsx();
  static const int kFlagsXFieldNumber = 13;
  inline ::google::protobuf::int64 flagsx() const;
  inline void set_flagsx(::google::protobuf::int64 value);

  // optional int64 SafeBag = 14;
  inline bool has_safebag() const;
  inline void clear_safebag();
  static const int kSafeBagFieldNumber = 14;
  inline ::google::protobuf::int64 safebag() const;
  inline void set_safebag(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:logic2logsvr.PlayerFlags)
 private:
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_winp();
  inline void clear_has_winp();
  inline void set_has_flagss();
  inline void clear_has_flagss();
  inline void set_has_opcoeff();
  inline void clear_has_opcoeff();
  inline void set_has_flagsmoneylit();
  inline void clear_has_flagsmoneylit();
  inline void set_has_curmoneyget();
  inline void clear_has_curmoneyget();
  inline void set_has_gmopflags();
  inline void clear_has_gmopflags();
  inline void set_has_sendcoincnt();
  inline void clear_has_sendcoincnt();
  inline void set_has_recvcoincnt();
  inline void clear_has_recvcoincnt();
  inline void set_has_rechargecnt();
  inline void clear_has_rechargecnt();
  inline void set_has_withdrawcnt();
  inline void clear_has_withdrawcnt();
  inline void set_has_flagsy();
  inline void clear_has_flagsy();
  inline void set_has_flagsx();
  inline void clear_has_flagsx();
  inline void set_has_safebag();
  inline void clear_has_safebag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 flags_;
  float winp_;
  bool flagss_;
  float opcoeff_;
  ::google::protobuf::int64 flagsmoneylit_;
  ::google::protobuf::int64 curmoneyget_;
  ::google::protobuf::int64 sendcoincnt_;
  ::google::protobuf::int64 recvcoincnt_;
  ::google::protobuf::int32 gmopflags_;
  ::google::protobuf::int32 flagsy_;
  ::google::protobuf::int64 rechargecnt_;
  ::google::protobuf::int64 withdrawcnt_;
  ::google::protobuf::int64 flagsx_;
  ::google::protobuf::int64 safebag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_AssignDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_ShutdownFile_logic2logsvr_5fmsg_5ftype_2eproto();

  void InitAsDefaultInstance();
  static PlayerFlags* default_instance_;
};
// -------------------------------------------------------------------

class OptInfo : public ::google::protobuf::Message {
 public:
  OptInfo();
  virtual ~OptInfo();

  OptInfo(const OptInfo& from);

  inline OptInfo& operator=(const OptInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptInfo& default_instance();

  void Swap(OptInfo* other);

  // implements Message ----------------------------------------------

  OptInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptInfo& from);
  void MergeFrom(const OptInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 VarGold = 1;
  inline bool has_vargold() const;
  inline void clear_vargold();
  static const int kVarGoldFieldNumber = 1;
  inline ::google::protobuf::int32 vargold() const;
  inline void set_vargold(::google::protobuf::int32 value);

  // optional int32 Opt = 2;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 2;
  inline ::google::protobuf::int32 opt() const;
  inline void set_opt(::google::protobuf::int32 value);

  // optional bytes CardOut = 3;
  inline bool has_cardout() const;
  inline void clear_cardout();
  static const int kCardOutFieldNumber = 3;
  inline const ::std::string& cardout() const;
  inline void set_cardout(const ::std::string& value);
  inline void set_cardout(const char* value);
  inline void set_cardout(const void* value, size_t size);
  inline ::std::string* mutable_cardout();
  inline ::std::string* release_cardout();
  inline void set_allocated_cardout(::std::string* cardout);

  // optional int32 CurGameStage = 4;
  inline bool has_curgamestage() const;
  inline void clear_curgamestage();
  static const int kCurGameStageFieldNumber = 4;
  inline ::google::protobuf::int32 curgamestage() const;
  inline void set_curgamestage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:logic2logsvr.OptInfo)
 private:
  inline void set_has_vargold();
  inline void clear_has_vargold();
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_cardout();
  inline void clear_has_cardout();
  inline void set_has_curgamestage();
  inline void clear_has_curgamestage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 vargold_;
  ::google::protobuf::int32 opt_;
  ::std::string* cardout_;
  ::google::protobuf::int32 curgamestage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_AssignDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_ShutdownFile_logic2logsvr_5fmsg_5ftype_2eproto();

  void InitAsDefaultInstance();
  static OptInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfoZJH : public ::google::protobuf::Message {
 public:
  PlayerInfoZJH();
  virtual ~PlayerInfoZJH();

  PlayerInfoZJH(const PlayerInfoZJH& from);

  inline PlayerInfoZJH& operator=(const PlayerInfoZJH& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfoZJH& default_instance();

  void Swap(PlayerInfoZJH* other);

  // implements Message ----------------------------------------------

  PlayerInfoZJH* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfoZJH& from);
  void MergeFrom(const PlayerInfoZJH& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PID = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPIDFieldNumber = 1;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // optional int32 GoldBegin = 2;
  inline bool has_goldbegin() const;
  inline void clear_goldbegin();
  static const int kGoldBeginFieldNumber = 2;
  inline ::google::protobuf::int32 goldbegin() const;
  inline void set_goldbegin(::google::protobuf::int32 value);

  // optional int32 GoldEnd = 3;
  inline bool has_goldend() const;
  inline void clear_goldend();
  static const int kGoldEndFieldNumber = 3;
  inline ::google::protobuf::int32 goldend() const;
  inline void set_goldend(::google::protobuf::int32 value);

  // optional int32 Commission = 4;
  inline bool has_commission() const;
  inline void clear_commission();
  static const int kCommissionFieldNumber = 4;
  inline ::google::protobuf::int32 commission() const;
  inline void set_commission(::google::protobuf::int32 value);

  // optional bytes CardHand = 5;
  inline bool has_cardhand() const;
  inline void clear_cardhand();
  static const int kCardHandFieldNumber = 5;
  inline const ::std::string& cardhand() const;
  inline void set_cardhand(const ::std::string& value);
  inline void set_cardhand(const char* value);
  inline void set_cardhand(const void* value, size_t size);
  inline ::std::string* mutable_cardhand();
  inline ::std::string* release_cardhand();
  inline void set_allocated_cardhand(::std::string* cardhand);

  // repeated .logic2logsvr.OptInfo OptArray = 6;
  inline int optarray_size() const;
  inline void clear_optarray();
  static const int kOptArrayFieldNumber = 6;
  inline const ::logic2logsvr::OptInfo& optarray(int index) const;
  inline ::logic2logsvr::OptInfo* mutable_optarray(int index);
  inline ::logic2logsvr::OptInfo* add_optarray();
  inline const ::google::protobuf::RepeatedPtrField< ::logic2logsvr::OptInfo >&
      optarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::logic2logsvr::OptInfo >*
      mutable_optarray();

  // optional int32 SeatID = 7;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatIDFieldNumber = 7;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional .logic2logsvr.PlayerFlags PFlags = 8;
  inline bool has_pflags() const;
  inline void clear_pflags();
  static const int kPFlagsFieldNumber = 8;
  inline const ::logic2logsvr::PlayerFlags& pflags() const;
  inline ::logic2logsvr::PlayerFlags* mutable_pflags();
  inline ::logic2logsvr::PlayerFlags* release_pflags();
  inline void set_allocated_pflags(::logic2logsvr::PlayerFlags* pflags);

  // optional bool IsRobot = 9;
  inline bool has_isrobot() const;
  inline void clear_isrobot();
  static const int kIsRobotFieldNumber = 9;
  inline bool isrobot() const;
  inline void set_isrobot(bool value);

  // optional int32 VarGold = 10;
  inline bool has_vargold() const;
  inline void clear_vargold();
  static const int kVarGoldFieldNumber = 10;
  inline ::google::protobuf::int32 vargold() const;
  inline void set_vargold(::google::protobuf::int32 value);

  // optional int64 BeginTime = 11;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 11;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 EndTime = 12;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 12;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int64 VarTime = 13;
  inline bool has_vartime() const;
  inline void clear_vartime();
  static const int kVarTimeFieldNumber = 13;
  inline ::google::protobuf::int64 vartime() const;
  inline void set_vartime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:logic2logsvr.PlayerInfoZJH)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_goldbegin();
  inline void clear_has_goldbegin();
  inline void set_has_goldend();
  inline void clear_has_goldend();
  inline void set_has_commission();
  inline void clear_has_commission();
  inline void set_has_cardhand();
  inline void clear_has_cardhand();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_pflags();
  inline void clear_has_pflags();
  inline void set_has_isrobot();
  inline void clear_has_isrobot();
  inline void set_has_vargold();
  inline void clear_has_vargold();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_vartime();
  inline void clear_has_vartime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 goldbegin_;
  ::google::protobuf::int32 goldend_;
  ::google::protobuf::int32 commission_;
  ::std::string* cardhand_;
  ::google::protobuf::RepeatedPtrField< ::logic2logsvr::OptInfo > optarray_;
  ::logic2logsvr::PlayerFlags* pflags_;
  ::google::protobuf::int32 seatid_;
  bool isrobot_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int64 vartime_;
  ::google::protobuf::int32 vargold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_AssignDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_ShutdownFile_logic2logsvr_5fmsg_5ftype_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfoZJH* default_instance_;
};
// -------------------------------------------------------------------

class GameInfo : public ::google::protobuf::Message {
 public:
  GameInfo();
  virtual ~GameInfo();

  GameInfo(const GameInfo& from);

  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInfo& default_instance();

  void Swap(GameInfo* other);

  // implements Message ----------------------------------------------

  GameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameInfo& from);
  void MergeFrom(const GameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 GameID = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // optional int32 RoomID = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional int32 TableID = 3;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableIDFieldNumber = 3;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 SeatID = 4;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatIDFieldNumber = 4;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:logic2logsvr.GameInfo)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_seatid();
  inline void clear_has_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_AssignDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_ShutdownFile_logic2logsvr_5fmsg_5ftype_2eproto();

  void InitAsDefaultInstance();
  static GameInfo* default_instance_;
};
// -------------------------------------------------------------------

class ZJHGameLog : public ::google::protobuf::Message {
 public:
  ZJHGameLog();
  virtual ~ZJHGameLog();

  ZJHGameLog(const ZJHGameLog& from);

  inline ZJHGameLog& operator=(const ZJHGameLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZJHGameLog& default_instance();

  void Swap(ZJHGameLog* other);

  // implements Message ----------------------------------------------

  ZJHGameLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZJHGameLog& from);
  void MergeFrom(const ZJHGameLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GameRoundIndex = 1;
  inline bool has_gameroundindex() const;
  inline void clear_gameroundindex();
  static const int kGameRoundIndexFieldNumber = 1;
  inline const ::std::string& gameroundindex() const;
  inline void set_gameroundindex(const ::std::string& value);
  inline void set_gameroundindex(const char* value);
  inline void set_gameroundindex(const char* value, size_t size);
  inline ::std::string* mutable_gameroundindex();
  inline ::std::string* release_gameroundindex();
  inline void set_allocated_gameroundindex(::std::string* gameroundindex);

  // repeated .logic2logsvr.PlayerInfoZJH PInfo = 2;
  inline int pinfo_size() const;
  inline void clear_pinfo();
  static const int kPInfoFieldNumber = 2;
  inline const ::logic2logsvr::PlayerInfoZJH& pinfo(int index) const;
  inline ::logic2logsvr::PlayerInfoZJH* mutable_pinfo(int index);
  inline ::logic2logsvr::PlayerInfoZJH* add_pinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::logic2logsvr::PlayerInfoZJH >&
      pinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::logic2logsvr::PlayerInfoZJH >*
      mutable_pinfo();

  // optional .logic2logsvr.GameInfo GInfo = 3;
  inline bool has_ginfo() const;
  inline void clear_ginfo();
  static const int kGInfoFieldNumber = 3;
  inline const ::logic2logsvr::GameInfo& ginfo() const;
  inline ::logic2logsvr::GameInfo* mutable_ginfo();
  inline ::logic2logsvr::GameInfo* release_ginfo();
  inline void set_allocated_ginfo(::logic2logsvr::GameInfo* ginfo);

  // optional int64 BeginTime = 4;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 4;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 EndTime = 5;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 5;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int64 VarTime = 6;
  inline bool has_vartime() const;
  inline void clear_vartime();
  static const int kVarTimeFieldNumber = 6;
  inline ::google::protobuf::int64 vartime() const;
  inline void set_vartime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:logic2logsvr.ZJHGameLog)
 private:
  inline void set_has_gameroundindex();
  inline void clear_has_gameroundindex();
  inline void set_has_ginfo();
  inline void clear_has_ginfo();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_vartime();
  inline void clear_has_vartime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gameroundindex_;
  ::google::protobuf::RepeatedPtrField< ::logic2logsvr::PlayerInfoZJH > pinfo_;
  ::logic2logsvr::GameInfo* ginfo_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int64 vartime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_AssignDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_ShutdownFile_logic2logsvr_5fmsg_5ftype_2eproto();

  void InitAsDefaultInstance();
  static ZJHGameLog* default_instance_;
};
// -------------------------------------------------------------------

class FishBulletInfo : public ::google::protobuf::Message {
 public:
  FishBulletInfo();
  virtual ~FishBulletInfo();

  FishBulletInfo(const FishBulletInfo& from);

  inline FishBulletInfo& operator=(const FishBulletInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishBulletInfo& default_instance();

  void Swap(FishBulletInfo* other);

  // implements Message ----------------------------------------------

  FishBulletInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishBulletInfo& from);
  void MergeFrom(const FishBulletInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BulletID = 1;
  inline bool has_bulletid() const;
  inline void clear_bulletid();
  static const int kBulletIDFieldNumber = 1;
  inline ::google::protobuf::int32 bulletid() const;
  inline void set_bulletid(::google::protobuf::int32 value);

  // optional int32 BulletType = 2;
  inline bool has_bullettype() const;
  inline void clear_bullettype();
  static const int kBulletTypeFieldNumber = 2;
  inline ::google::protobuf::int32 bullettype() const;
  inline void set_bullettype(::google::protobuf::int32 value);

  // optional int32 BulletRate = 3;
  inline bool has_bulletrate() const;
  inline void clear_bulletrate();
  static const int kBulletRateFieldNumber = 3;
  inline ::google::protobuf::int32 bulletrate() const;
  inline void set_bulletrate(::google::protobuf::int32 value);

  // optional double BulletLeftTime = 4;
  inline bool has_bulletlefttime() const;
  inline void clear_bulletlefttime();
  static const int kBulletLeftTimeFieldNumber = 4;
  inline double bulletlefttime() const;
  inline void set_bulletlefttime(double value);

  // optional int32 BulletHitCnt = 5;
  inline bool has_bullethitcnt() const;
  inline void clear_bullethitcnt();
  static const int kBulletHitCntFieldNumber = 5;
  inline ::google::protobuf::int32 bullethitcnt() const;
  inline void set_bullethitcnt(::google::protobuf::int32 value);

  // optional int64 FireTime = 6;
  inline bool has_firetime() const;
  inline void clear_firetime();
  static const int kFireTimeFieldNumber = 6;
  inline ::google::protobuf::int64 firetime() const;
  inline void set_firetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:logic2logsvr.FishBulletInfo)
 private:
  inline void set_has_bulletid();
  inline void clear_has_bulletid();
  inline void set_has_bullettype();
  inline void clear_has_bullettype();
  inline void set_has_bulletrate();
  inline void clear_has_bulletrate();
  inline void set_has_bulletlefttime();
  inline void clear_has_bulletlefttime();
  inline void set_has_bullethitcnt();
  inline void clear_has_bullethitcnt();
  inline void set_has_firetime();
  inline void clear_has_firetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bulletid_;
  ::google::protobuf::int32 bullettype_;
  double bulletlefttime_;
  ::google::protobuf::int32 bulletrate_;
  ::google::protobuf::int32 bullethitcnt_;
  ::google::protobuf::int64 firetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_AssignDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_ShutdownFile_logic2logsvr_5fmsg_5ftype_2eproto();

  void InitAsDefaultInstance();
  static FishBulletInfo* default_instance_;
};
// -------------------------------------------------------------------

class FishFireInfo : public ::google::protobuf::Message {
 public:
  FishFireInfo();
  virtual ~FishFireInfo();

  FishFireInfo(const FishFireInfo& from);

  inline FishFireInfo& operator=(const FishFireInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishFireInfo& default_instance();

  void Swap(FishFireInfo* other);

  // implements Message ----------------------------------------------

  FishFireInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishFireInfo& from);
  void MergeFrom(const FishFireInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 GoldFireBefore = 1;
  inline bool has_goldfirebefore() const;
  inline void clear_goldfirebefore();
  static const int kGoldFireBeforeFieldNumber = 1;
  inline ::google::protobuf::int64 goldfirebefore() const;
  inline void set_goldfirebefore(::google::protobuf::int64 value);

  // optional int64 GoldFireAfter = 2;
  inline bool has_goldfireafter() const;
  inline void clear_goldfireafter();
  static const int kGoldFireAfterFieldNumber = 2;
  inline ::google::protobuf::int64 goldfireafter() const;
  inline void set_goldfireafter(::google::protobuf::int64 value);

  // optional .logic2logsvr.FishBulletInfo FBullettInfo = 3;
  inline bool has_fbullettinfo() const;
  inline void clear_fbullettinfo();
  static const int kFBullettInfoFieldNumber = 3;
  inline const ::logic2logsvr::FishBulletInfo& fbullettinfo() const;
  inline ::logic2logsvr::FishBulletInfo* mutable_fbullettinfo();
  inline ::logic2logsvr::FishBulletInfo* release_fbullettinfo();
  inline void set_allocated_fbullettinfo(::logic2logsvr::FishBulletInfo* fbullettinfo);

  // optional int32 Commission = 4;
  inline bool has_commission() const;
  inline void clear_commission();
  static const int kCommissionFieldNumber = 4;
  inline ::google::protobuf::int32 commission() const;
  inline void set_commission(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:logic2logsvr.FishFireInfo)
 private:
  inline void set_has_goldfirebefore();
  inline void clear_has_goldfirebefore();
  inline void set_has_goldfireafter();
  inline void clear_has_goldfireafter();
  inline void set_has_fbullettinfo();
  inline void clear_has_fbullettinfo();
  inline void set_has_commission();
  inline void clear_has_commission();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 goldfirebefore_;
  ::google::protobuf::int64 goldfireafter_;
  ::logic2logsvr::FishBulletInfo* fbullettinfo_;
  ::google::protobuf::int32 commission_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_AssignDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_ShutdownFile_logic2logsvr_5fmsg_5ftype_2eproto();

  void InitAsDefaultInstance();
  static FishFireInfo* default_instance_;
};
// -------------------------------------------------------------------

class FishHitInfo : public ::google::protobuf::Message {
 public:
  FishHitInfo();
  virtual ~FishHitInfo();

  FishHitInfo(const FishHitInfo& from);

  inline FishHitInfo& operator=(const FishHitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishHitInfo& default_instance();

  void Swap(FishHitInfo* other);

  // implements Message ----------------------------------------------

  FishHitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishHitInfo& from);
  void MergeFrom(const FishHitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TurretPowerType = 1;
  inline bool has_turretpowertype() const;
  inline void clear_turretpowertype();
  static const int kTurretPowerTypeFieldNumber = 1;
  inline ::google::protobuf::int32 turretpowertype() const;
  inline void set_turretpowertype(::google::protobuf::int32 value);

  // optional int32 FishID = 2;
  inline bool has_fishid() const;
  inline void clear_fishid();
  static const int kFishIDFieldNumber = 2;
  inline ::google::protobuf::int32 fishid() const;
  inline void set_fishid(::google::protobuf::int32 value);

  // optional int32 IsHited = 3;
  inline bool has_ishited() const;
  inline void clear_ishited();
  static const int kIsHitedFieldNumber = 3;
  inline ::google::protobuf::int32 ishited() const;
  inline void set_ishited(::google::protobuf::int32 value);

  // optional int32 FishProb = 4;
  inline bool has_fishprob() const;
  inline void clear_fishprob();
  static const int kFishProbFieldNumber = 4;
  inline ::google::protobuf::int32 fishprob() const;
  inline void set_fishprob(::google::protobuf::int32 value);

  // optional int32 NatureProb = 5;
  inline bool has_natureprob() const;
  inline void clear_natureprob();
  static const int kNatureProbFieldNumber = 5;
  inline ::google::protobuf::int32 natureprob() const;
  inline void set_natureprob(::google::protobuf::int32 value);

  // repeated int32 DeadFishID = 6;
  inline int deadfishid_size() const;
  inline void clear_deadfishid();
  static const int kDeadFishIDFieldNumber = 6;
  inline ::google::protobuf::int32 deadfishid(int index) const;
  inline void set_deadfishid(int index, ::google::protobuf::int32 value);
  inline void add_deadfishid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      deadfishid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_deadfishid();

  // optional int64 DeadFishMoney = 7;
  inline bool has_deadfishmoney() const;
  inline void clear_deadfishmoney();
  static const int kDeadFishMoneyFieldNumber = 7;
  inline ::google::protobuf::int64 deadfishmoney() const;
  inline void set_deadfishmoney(::google::protobuf::int64 value);

  // optional .logic2logsvr.FishBulletInfo FishHitBInfo = 8;
  inline bool has_fishhitbinfo() const;
  inline void clear_fishhitbinfo();
  static const int kFishHitBInfoFieldNumber = 8;
  inline const ::logic2logsvr::FishBulletInfo& fishhitbinfo() const;
  inline ::logic2logsvr::FishBulletInfo* mutable_fishhitbinfo();
  inline ::logic2logsvr::FishBulletInfo* release_fishhitbinfo();
  inline void set_allocated_fishhitbinfo(::logic2logsvr::FishBulletInfo* fishhitbinfo);

  // optional int64 HitTime = 9;
  inline bool has_hittime() const;
  inline void clear_hittime();
  static const int kHitTimeFieldNumber = 9;
  inline ::google::protobuf::int64 hittime() const;
  inline void set_hittime(::google::protobuf::int64 value);

  // optional int32 LockFishID = 10;
  inline bool has_lockfishid() const;
  inline void clear_lockfishid();
  static const int kLockFishIDFieldNumber = 10;
  inline ::google::protobuf::int32 lockfishid() const;
  inline void set_lockfishid(::google::protobuf::int32 value);

  // optional int32 TurretRate = 11;
  inline bool has_turretrate() const;
  inline void clear_turretrate();
  static const int kTurretRateFieldNumber = 11;
  inline ::google::protobuf::int32 turretrate() const;
  inline void set_turretrate(::google::protobuf::int32 value);

  // optional int32 FishIDIndex = 12;
  inline bool has_fishidindex() const;
  inline void clear_fishidindex();
  static const int kFishIDIndexFieldNumber = 12;
  inline ::google::protobuf::int32 fishidindex() const;
  inline void set_fishidindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:logic2logsvr.FishHitInfo)
 private:
  inline void set_has_turretpowertype();
  inline void clear_has_turretpowertype();
  inline void set_has_fishid();
  inline void clear_has_fishid();
  inline void set_has_ishited();
  inline void clear_has_ishited();
  inline void set_has_fishprob();
  inline void clear_has_fishprob();
  inline void set_has_natureprob();
  inline void clear_has_natureprob();
  inline void set_has_deadfishmoney();
  inline void clear_has_deadfishmoney();
  inline void set_has_fishhitbinfo();
  inline void clear_has_fishhitbinfo();
  inline void set_has_hittime();
  inline void clear_has_hittime();
  inline void set_has_lockfishid();
  inline void clear_has_lockfishid();
  inline void set_has_turretrate();
  inline void clear_has_turretrate();
  inline void set_has_fishidindex();
  inline void clear_has_fishidindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 turretpowertype_;
  ::google::protobuf::int32 fishid_;
  ::google::protobuf::int32 ishited_;
  ::google::protobuf::int32 fishprob_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > deadfishid_;
  ::google::protobuf::int64 deadfishmoney_;
  ::google::protobuf::int32 natureprob_;
  ::google::protobuf::int32 lockfishid_;
  ::logic2logsvr::FishBulletInfo* fishhitbinfo_;
  ::google::protobuf::int64 hittime_;
  ::google::protobuf::int32 turretrate_;
  ::google::protobuf::int32 fishidindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_AssignDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_ShutdownFile_logic2logsvr_5fmsg_5ftype_2eproto();

  void InitAsDefaultInstance();
  static FishHitInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfoFish : public ::google::protobuf::Message {
 public:
  PlayerInfoFish();
  virtual ~PlayerInfoFish();

  PlayerInfoFish(const PlayerInfoFish& from);

  inline PlayerInfoFish& operator=(const PlayerInfoFish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfoFish& default_instance();

  void Swap(PlayerInfoFish* other);

  // implements Message ----------------------------------------------

  PlayerInfoFish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfoFish& from);
  void MergeFrom(const PlayerInfoFish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PID = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPIDFieldNumber = 1;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // optional int64 GoldBegin = 2;
  inline bool has_goldbegin() const;
  inline void clear_goldbegin();
  static const int kGoldBeginFieldNumber = 2;
  inline ::google::protobuf::int64 goldbegin() const;
  inline void set_goldbegin(::google::protobuf::int64 value);

  // optional int64 GoldEnd = 3;
  inline bool has_goldend() const;
  inline void clear_goldend();
  static const int kGoldEndFieldNumber = 3;
  inline ::google::protobuf::int64 goldend() const;
  inline void set_goldend(::google::protobuf::int64 value);

  // optional .logic2logsvr.PlayerFlags PFlags = 4;
  inline bool has_pflags() const;
  inline void clear_pflags();
  static const int kPFlagsFieldNumber = 4;
  inline const ::logic2logsvr::PlayerFlags& pflags() const;
  inline ::logic2logsvr::PlayerFlags* mutable_pflags();
  inline ::logic2logsvr::PlayerFlags* release_pflags();
  inline void set_allocated_pflags(::logic2logsvr::PlayerFlags* pflags);

  // optional int32 LuckValue = 5;
  inline bool has_luckvalue() const;
  inline void clear_luckvalue();
  static const int kLuckValueFieldNumber = 5;
  inline ::google::protobuf::int32 luckvalue() const;
  inline void set_luckvalue(::google::protobuf::int32 value);

  // optional bool IsRobot = 6;
  inline bool has_isrobot() const;
  inline void clear_isrobot();
  static const int kIsRobotFieldNumber = 6;
  inline bool isrobot() const;
  inline void set_isrobot(bool value);

  // @@protoc_insertion_point(class_scope:logic2logsvr.PlayerInfoFish)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_goldbegin();
  inline void clear_has_goldbegin();
  inline void set_has_goldend();
  inline void clear_has_goldend();
  inline void set_has_pflags();
  inline void clear_has_pflags();
  inline void set_has_luckvalue();
  inline void clear_has_luckvalue();
  inline void set_has_isrobot();
  inline void clear_has_isrobot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 goldbegin_;
  ::google::protobuf::int64 goldend_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 luckvalue_;
  ::logic2logsvr::PlayerFlags* pflags_;
  bool isrobot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_AssignDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_ShutdownFile_logic2logsvr_5fmsg_5ftype_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfoFish* default_instance_;
};
// -------------------------------------------------------------------

class FishGameLog : public ::google::protobuf::Message {
 public:
  FishGameLog();
  virtual ~FishGameLog();

  FishGameLog(const FishGameLog& from);

  inline FishGameLog& operator=(const FishGameLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishGameLog& default_instance();

  void Swap(FishGameLog* other);

  // implements Message ----------------------------------------------

  FishGameLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishGameLog& from);
  void MergeFrom(const FishGameLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GameRoundIndex = 1;
  inline bool has_gameroundindex() const;
  inline void clear_gameroundindex();
  static const int kGameRoundIndexFieldNumber = 1;
  inline const ::std::string& gameroundindex() const;
  inline void set_gameroundindex(const ::std::string& value);
  inline void set_gameroundindex(const char* value);
  inline void set_gameroundindex(const char* value, size_t size);
  inline ::std::string* mutable_gameroundindex();
  inline ::std::string* release_gameroundindex();
  inline void set_allocated_gameroundindex(::std::string* gameroundindex);

  // optional .logic2logsvr.PlayerInfoFish PInfo = 2;
  inline bool has_pinfo() const;
  inline void clear_pinfo();
  static const int kPInfoFieldNumber = 2;
  inline const ::logic2logsvr::PlayerInfoFish& pinfo() const;
  inline ::logic2logsvr::PlayerInfoFish* mutable_pinfo();
  inline ::logic2logsvr::PlayerInfoFish* release_pinfo();
  inline void set_allocated_pinfo(::logic2logsvr::PlayerInfoFish* pinfo);

  // optional .logic2logsvr.GameInfo GInfo = 3;
  inline bool has_ginfo() const;
  inline void clear_ginfo();
  static const int kGInfoFieldNumber = 3;
  inline const ::logic2logsvr::GameInfo& ginfo() const;
  inline ::logic2logsvr::GameInfo* mutable_ginfo();
  inline ::logic2logsvr::GameInfo* release_ginfo();
  inline void set_allocated_ginfo(::logic2logsvr::GameInfo* ginfo);

  // repeated .logic2logsvr.FishFireInfo FireInfo = 4;
  inline int fireinfo_size() const;
  inline void clear_fireinfo();
  static const int kFireInfoFieldNumber = 4;
  inline const ::logic2logsvr::FishFireInfo& fireinfo(int index) const;
  inline ::logic2logsvr::FishFireInfo* mutable_fireinfo(int index);
  inline ::logic2logsvr::FishFireInfo* add_fireinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::logic2logsvr::FishFireInfo >&
      fireinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::logic2logsvr::FishFireInfo >*
      mutable_fireinfo();

  // repeated .logic2logsvr.FishHitInfo HitInfo = 5;
  inline int hitinfo_size() const;
  inline void clear_hitinfo();
  static const int kHitInfoFieldNumber = 5;
  inline const ::logic2logsvr::FishHitInfo& hitinfo(int index) const;
  inline ::logic2logsvr::FishHitInfo* mutable_hitinfo(int index);
  inline ::logic2logsvr::FishHitInfo* add_hitinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::logic2logsvr::FishHitInfo >&
      hitinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::logic2logsvr::FishHitInfo >*
      mutable_hitinfo();

  // optional int64 BeginTime = 6;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 6;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 EndTime = 7;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 7;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int64 VarTime = 8;
  inline bool has_vartime() const;
  inline void clear_vartime();
  static const int kVarTimeFieldNumber = 8;
  inline ::google::protobuf::int64 vartime() const;
  inline void set_vartime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:logic2logsvr.FishGameLog)
 private:
  inline void set_has_gameroundindex();
  inline void clear_has_gameroundindex();
  inline void set_has_pinfo();
  inline void clear_has_pinfo();
  inline void set_has_ginfo();
  inline void clear_has_ginfo();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_vartime();
  inline void clear_has_vartime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gameroundindex_;
  ::logic2logsvr::PlayerInfoFish* pinfo_;
  ::logic2logsvr::GameInfo* ginfo_;
  ::google::protobuf::RepeatedPtrField< ::logic2logsvr::FishFireInfo > fireinfo_;
  ::google::protobuf::RepeatedPtrField< ::logic2logsvr::FishHitInfo > hitinfo_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int64 vartime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_AssignDesc_logic2logsvr_5fmsg_5ftype_2eproto();
  friend void protobuf_ShutdownFile_logic2logsvr_5fmsg_5ftype_2eproto();

  void InitAsDefaultInstance();
  static FishGameLog* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerFlags

// optional int32 Flags = 1;
inline bool PlayerFlags::has_flags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerFlags::set_has_flags() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerFlags::clear_has_flags() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerFlags::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
inline ::google::protobuf::int32 PlayerFlags::flags() const {
  return flags_;
}
inline void PlayerFlags::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
}

// optional float WinP = 2;
inline bool PlayerFlags::has_winp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerFlags::set_has_winp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerFlags::clear_has_winp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerFlags::clear_winp() {
  winp_ = 0;
  clear_has_winp();
}
inline float PlayerFlags::winp() const {
  return winp_;
}
inline void PlayerFlags::set_winp(float value) {
  set_has_winp();
  winp_ = value;
}

// optional bool FlagsS = 3;
inline bool PlayerFlags::has_flagss() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerFlags::set_has_flagss() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerFlags::clear_has_flagss() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerFlags::clear_flagss() {
  flagss_ = false;
  clear_has_flagss();
}
inline bool PlayerFlags::flagss() const {
  return flagss_;
}
inline void PlayerFlags::set_flagss(bool value) {
  set_has_flagss();
  flagss_ = value;
}

// optional float opCoeff = 4;
inline bool PlayerFlags::has_opcoeff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerFlags::set_has_opcoeff() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerFlags::clear_has_opcoeff() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerFlags::clear_opcoeff() {
  opcoeff_ = 0;
  clear_has_opcoeff();
}
inline float PlayerFlags::opcoeff() const {
  return opcoeff_;
}
inline void PlayerFlags::set_opcoeff(float value) {
  set_has_opcoeff();
  opcoeff_ = value;
}

// optional int64 flagsMoneyLit = 5;
inline bool PlayerFlags::has_flagsmoneylit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerFlags::set_has_flagsmoneylit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerFlags::clear_has_flagsmoneylit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerFlags::clear_flagsmoneylit() {
  flagsmoneylit_ = GOOGLE_LONGLONG(0);
  clear_has_flagsmoneylit();
}
inline ::google::protobuf::int64 PlayerFlags::flagsmoneylit() const {
  return flagsmoneylit_;
}
inline void PlayerFlags::set_flagsmoneylit(::google::protobuf::int64 value) {
  set_has_flagsmoneylit();
  flagsmoneylit_ = value;
}

// optional int64 CurMoneyGet = 6;
inline bool PlayerFlags::has_curmoneyget() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerFlags::set_has_curmoneyget() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerFlags::clear_has_curmoneyget() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerFlags::clear_curmoneyget() {
  curmoneyget_ = GOOGLE_LONGLONG(0);
  clear_has_curmoneyget();
}
inline ::google::protobuf::int64 PlayerFlags::curmoneyget() const {
  return curmoneyget_;
}
inline void PlayerFlags::set_curmoneyget(::google::protobuf::int64 value) {
  set_has_curmoneyget();
  curmoneyget_ = value;
}

// optional int32 GmOpFlags = 7;
inline bool PlayerFlags::has_gmopflags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerFlags::set_has_gmopflags() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerFlags::clear_has_gmopflags() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerFlags::clear_gmopflags() {
  gmopflags_ = 0;
  clear_has_gmopflags();
}
inline ::google::protobuf::int32 PlayerFlags::gmopflags() const {
  return gmopflags_;
}
inline void PlayerFlags::set_gmopflags(::google::protobuf::int32 value) {
  set_has_gmopflags();
  gmopflags_ = value;
}

// optional int64 SendCoinCnt = 8;
inline bool PlayerFlags::has_sendcoincnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerFlags::set_has_sendcoincnt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerFlags::clear_has_sendcoincnt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerFlags::clear_sendcoincnt() {
  sendcoincnt_ = GOOGLE_LONGLONG(0);
  clear_has_sendcoincnt();
}
inline ::google::protobuf::int64 PlayerFlags::sendcoincnt() const {
  return sendcoincnt_;
}
inline void PlayerFlags::set_sendcoincnt(::google::protobuf::int64 value) {
  set_has_sendcoincnt();
  sendcoincnt_ = value;
}

// optional int64 RecvCoinCnt = 9;
inline bool PlayerFlags::has_recvcoincnt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerFlags::set_has_recvcoincnt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerFlags::clear_has_recvcoincnt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerFlags::clear_recvcoincnt() {
  recvcoincnt_ = GOOGLE_LONGLONG(0);
  clear_has_recvcoincnt();
}
inline ::google::protobuf::int64 PlayerFlags::recvcoincnt() const {
  return recvcoincnt_;
}
inline void PlayerFlags::set_recvcoincnt(::google::protobuf::int64 value) {
  set_has_recvcoincnt();
  recvcoincnt_ = value;
}

// optional int64 RechargeCnt = 10;
inline bool PlayerFlags::has_rechargecnt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerFlags::set_has_rechargecnt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerFlags::clear_has_rechargecnt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerFlags::clear_rechargecnt() {
  rechargecnt_ = GOOGLE_LONGLONG(0);
  clear_has_rechargecnt();
}
inline ::google::protobuf::int64 PlayerFlags::rechargecnt() const {
  return rechargecnt_;
}
inline void PlayerFlags::set_rechargecnt(::google::protobuf::int64 value) {
  set_has_rechargecnt();
  rechargecnt_ = value;
}

// optional int64 WithDrawCnt = 11;
inline bool PlayerFlags::has_withdrawcnt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerFlags::set_has_withdrawcnt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerFlags::clear_has_withdrawcnt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerFlags::clear_withdrawcnt() {
  withdrawcnt_ = GOOGLE_LONGLONG(0);
  clear_has_withdrawcnt();
}
inline ::google::protobuf::int64 PlayerFlags::withdrawcnt() const {
  return withdrawcnt_;
}
inline void PlayerFlags::set_withdrawcnt(::google::protobuf::int64 value) {
  set_has_withdrawcnt();
  withdrawcnt_ = value;
}

// optional int32 FlagsY = 12;
inline bool PlayerFlags::has_flagsy() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerFlags::set_has_flagsy() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerFlags::clear_has_flagsy() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerFlags::clear_flagsy() {
  flagsy_ = 0;
  clear_has_flagsy();
}
inline ::google::protobuf::int32 PlayerFlags::flagsy() const {
  return flagsy_;
}
inline void PlayerFlags::set_flagsy(::google::protobuf::int32 value) {
  set_has_flagsy();
  flagsy_ = value;
}

// optional int64 FlagsX = 13;
inline bool PlayerFlags::has_flagsx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerFlags::set_has_flagsx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerFlags::clear_has_flagsx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerFlags::clear_flagsx() {
  flagsx_ = GOOGLE_LONGLONG(0);
  clear_has_flagsx();
}
inline ::google::protobuf::int64 PlayerFlags::flagsx() const {
  return flagsx_;
}
inline void PlayerFlags::set_flagsx(::google::protobuf::int64 value) {
  set_has_flagsx();
  flagsx_ = value;
}

// optional int64 SafeBag = 14;
inline bool PlayerFlags::has_safebag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerFlags::set_has_safebag() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerFlags::clear_has_safebag() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerFlags::clear_safebag() {
  safebag_ = GOOGLE_LONGLONG(0);
  clear_has_safebag();
}
inline ::google::protobuf::int64 PlayerFlags::safebag() const {
  return safebag_;
}
inline void PlayerFlags::set_safebag(::google::protobuf::int64 value) {
  set_has_safebag();
  safebag_ = value;
}

// -------------------------------------------------------------------

// OptInfo

// optional int32 VarGold = 1;
inline bool OptInfo::has_vargold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptInfo::set_has_vargold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptInfo::clear_has_vargold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptInfo::clear_vargold() {
  vargold_ = 0;
  clear_has_vargold();
}
inline ::google::protobuf::int32 OptInfo::vargold() const {
  return vargold_;
}
inline void OptInfo::set_vargold(::google::protobuf::int32 value) {
  set_has_vargold();
  vargold_ = value;
}

// optional int32 Opt = 2;
inline bool OptInfo::has_opt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptInfo::set_has_opt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptInfo::clear_has_opt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptInfo::clear_opt() {
  opt_ = 0;
  clear_has_opt();
}
inline ::google::protobuf::int32 OptInfo::opt() const {
  return opt_;
}
inline void OptInfo::set_opt(::google::protobuf::int32 value) {
  set_has_opt();
  opt_ = value;
}

// optional bytes CardOut = 3;
inline bool OptInfo::has_cardout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptInfo::set_has_cardout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptInfo::clear_has_cardout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptInfo::clear_cardout() {
  if (cardout_ != &::google::protobuf::internal::kEmptyString) {
    cardout_->clear();
  }
  clear_has_cardout();
}
inline const ::std::string& OptInfo::cardout() const {
  return *cardout_;
}
inline void OptInfo::set_cardout(const ::std::string& value) {
  set_has_cardout();
  if (cardout_ == &::google::protobuf::internal::kEmptyString) {
    cardout_ = new ::std::string;
  }
  cardout_->assign(value);
}
inline void OptInfo::set_cardout(const char* value) {
  set_has_cardout();
  if (cardout_ == &::google::protobuf::internal::kEmptyString) {
    cardout_ = new ::std::string;
  }
  cardout_->assign(value);
}
inline void OptInfo::set_cardout(const void* value, size_t size) {
  set_has_cardout();
  if (cardout_ == &::google::protobuf::internal::kEmptyString) {
    cardout_ = new ::std::string;
  }
  cardout_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OptInfo::mutable_cardout() {
  set_has_cardout();
  if (cardout_ == &::google::protobuf::internal::kEmptyString) {
    cardout_ = new ::std::string;
  }
  return cardout_;
}
inline ::std::string* OptInfo::release_cardout() {
  clear_has_cardout();
  if (cardout_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardout_;
    cardout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OptInfo::set_allocated_cardout(::std::string* cardout) {
  if (cardout_ != &::google::protobuf::internal::kEmptyString) {
    delete cardout_;
  }
  if (cardout) {
    set_has_cardout();
    cardout_ = cardout;
  } else {
    clear_has_cardout();
    cardout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 CurGameStage = 4;
inline bool OptInfo::has_curgamestage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptInfo::set_has_curgamestage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptInfo::clear_has_curgamestage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptInfo::clear_curgamestage() {
  curgamestage_ = 0;
  clear_has_curgamestage();
}
inline ::google::protobuf::int32 OptInfo::curgamestage() const {
  return curgamestage_;
}
inline void OptInfo::set_curgamestage(::google::protobuf::int32 value) {
  set_has_curgamestage();
  curgamestage_ = value;
}

// -------------------------------------------------------------------

// PlayerInfoZJH

// optional int32 PID = 1;
inline bool PlayerInfoZJH::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfoZJH::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfoZJH::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfoZJH::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 PlayerInfoZJH::pid() const {
  return pid_;
}
inline void PlayerInfoZJH::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
}

// optional int32 GoldBegin = 2;
inline bool PlayerInfoZJH::has_goldbegin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfoZJH::set_has_goldbegin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfoZJH::clear_has_goldbegin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfoZJH::clear_goldbegin() {
  goldbegin_ = 0;
  clear_has_goldbegin();
}
inline ::google::protobuf::int32 PlayerInfoZJH::goldbegin() const {
  return goldbegin_;
}
inline void PlayerInfoZJH::set_goldbegin(::google::protobuf::int32 value) {
  set_has_goldbegin();
  goldbegin_ = value;
}

// optional int32 GoldEnd = 3;
inline bool PlayerInfoZJH::has_goldend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInfoZJH::set_has_goldend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInfoZJH::clear_has_goldend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInfoZJH::clear_goldend() {
  goldend_ = 0;
  clear_has_goldend();
}
inline ::google::protobuf::int32 PlayerInfoZJH::goldend() const {
  return goldend_;
}
inline void PlayerInfoZJH::set_goldend(::google::protobuf::int32 value) {
  set_has_goldend();
  goldend_ = value;
}

// optional int32 Commission = 4;
inline bool PlayerInfoZJH::has_commission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInfoZJH::set_has_commission() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInfoZJH::clear_has_commission() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInfoZJH::clear_commission() {
  commission_ = 0;
  clear_has_commission();
}
inline ::google::protobuf::int32 PlayerInfoZJH::commission() const {
  return commission_;
}
inline void PlayerInfoZJH::set_commission(::google::protobuf::int32 value) {
  set_has_commission();
  commission_ = value;
}

// optional bytes CardHand = 5;
inline bool PlayerInfoZJH::has_cardhand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInfoZJH::set_has_cardhand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInfoZJH::clear_has_cardhand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInfoZJH::clear_cardhand() {
  if (cardhand_ != &::google::protobuf::internal::kEmptyString) {
    cardhand_->clear();
  }
  clear_has_cardhand();
}
inline const ::std::string& PlayerInfoZJH::cardhand() const {
  return *cardhand_;
}
inline void PlayerInfoZJH::set_cardhand(const ::std::string& value) {
  set_has_cardhand();
  if (cardhand_ == &::google::protobuf::internal::kEmptyString) {
    cardhand_ = new ::std::string;
  }
  cardhand_->assign(value);
}
inline void PlayerInfoZJH::set_cardhand(const char* value) {
  set_has_cardhand();
  if (cardhand_ == &::google::protobuf::internal::kEmptyString) {
    cardhand_ = new ::std::string;
  }
  cardhand_->assign(value);
}
inline void PlayerInfoZJH::set_cardhand(const void* value, size_t size) {
  set_has_cardhand();
  if (cardhand_ == &::google::protobuf::internal::kEmptyString) {
    cardhand_ = new ::std::string;
  }
  cardhand_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfoZJH::mutable_cardhand() {
  set_has_cardhand();
  if (cardhand_ == &::google::protobuf::internal::kEmptyString) {
    cardhand_ = new ::std::string;
  }
  return cardhand_;
}
inline ::std::string* PlayerInfoZJH::release_cardhand() {
  clear_has_cardhand();
  if (cardhand_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardhand_;
    cardhand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerInfoZJH::set_allocated_cardhand(::std::string* cardhand) {
  if (cardhand_ != &::google::protobuf::internal::kEmptyString) {
    delete cardhand_;
  }
  if (cardhand) {
    set_has_cardhand();
    cardhand_ = cardhand;
  } else {
    clear_has_cardhand();
    cardhand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .logic2logsvr.OptInfo OptArray = 6;
inline int PlayerInfoZJH::optarray_size() const {
  return optarray_.size();
}
inline void PlayerInfoZJH::clear_optarray() {
  optarray_.Clear();
}
inline const ::logic2logsvr::OptInfo& PlayerInfoZJH::optarray(int index) const {
  return optarray_.Get(index);
}
inline ::logic2logsvr::OptInfo* PlayerInfoZJH::mutable_optarray(int index) {
  return optarray_.Mutable(index);
}
inline ::logic2logsvr::OptInfo* PlayerInfoZJH::add_optarray() {
  return optarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logic2logsvr::OptInfo >&
PlayerInfoZJH::optarray() const {
  return optarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::logic2logsvr::OptInfo >*
PlayerInfoZJH::mutable_optarray() {
  return &optarray_;
}

// optional int32 SeatID = 7;
inline bool PlayerInfoZJH::has_seatid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerInfoZJH::set_has_seatid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerInfoZJH::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerInfoZJH::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 PlayerInfoZJH::seatid() const {
  return seatid_;
}
inline void PlayerInfoZJH::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional .logic2logsvr.PlayerFlags PFlags = 8;
inline bool PlayerInfoZJH::has_pflags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerInfoZJH::set_has_pflags() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerInfoZJH::clear_has_pflags() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerInfoZJH::clear_pflags() {
  if (pflags_ != NULL) pflags_->::logic2logsvr::PlayerFlags::Clear();
  clear_has_pflags();
}
inline const ::logic2logsvr::PlayerFlags& PlayerInfoZJH::pflags() const {
  return pflags_ != NULL ? *pflags_ : *default_instance_->pflags_;
}
inline ::logic2logsvr::PlayerFlags* PlayerInfoZJH::mutable_pflags() {
  set_has_pflags();
  if (pflags_ == NULL) pflags_ = new ::logic2logsvr::PlayerFlags;
  return pflags_;
}
inline ::logic2logsvr::PlayerFlags* PlayerInfoZJH::release_pflags() {
  clear_has_pflags();
  ::logic2logsvr::PlayerFlags* temp = pflags_;
  pflags_ = NULL;
  return temp;
}
inline void PlayerInfoZJH::set_allocated_pflags(::logic2logsvr::PlayerFlags* pflags) {
  delete pflags_;
  pflags_ = pflags;
  if (pflags) {
    set_has_pflags();
  } else {
    clear_has_pflags();
  }
}

// optional bool IsRobot = 9;
inline bool PlayerInfoZJH::has_isrobot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerInfoZJH::set_has_isrobot() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerInfoZJH::clear_has_isrobot() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerInfoZJH::clear_isrobot() {
  isrobot_ = false;
  clear_has_isrobot();
}
inline bool PlayerInfoZJH::isrobot() const {
  return isrobot_;
}
inline void PlayerInfoZJH::set_isrobot(bool value) {
  set_has_isrobot();
  isrobot_ = value;
}

// optional int32 VarGold = 10;
inline bool PlayerInfoZJH::has_vargold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerInfoZJH::set_has_vargold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerInfoZJH::clear_has_vargold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerInfoZJH::clear_vargold() {
  vargold_ = 0;
  clear_has_vargold();
}
inline ::google::protobuf::int32 PlayerInfoZJH::vargold() const {
  return vargold_;
}
inline void PlayerInfoZJH::set_vargold(::google::protobuf::int32 value) {
  set_has_vargold();
  vargold_ = value;
}

// optional int64 BeginTime = 11;
inline bool PlayerInfoZJH::has_begintime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerInfoZJH::set_has_begintime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerInfoZJH::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerInfoZJH::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 PlayerInfoZJH::begintime() const {
  return begintime_;
}
inline void PlayerInfoZJH::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int64 EndTime = 12;
inline bool PlayerInfoZJH::has_endtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerInfoZJH::set_has_endtime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerInfoZJH::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerInfoZJH::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 PlayerInfoZJH::endtime() const {
  return endtime_;
}
inline void PlayerInfoZJH::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional int64 VarTime = 13;
inline bool PlayerInfoZJH::has_vartime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerInfoZJH::set_has_vartime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerInfoZJH::clear_has_vartime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerInfoZJH::clear_vartime() {
  vartime_ = GOOGLE_LONGLONG(0);
  clear_has_vartime();
}
inline ::google::protobuf::int64 PlayerInfoZJH::vartime() const {
  return vartime_;
}
inline void PlayerInfoZJH::set_vartime(::google::protobuf::int64 value) {
  set_has_vartime();
  vartime_ = value;
}

// -------------------------------------------------------------------

// GameInfo

// optional int32 GameID = 1;
inline bool GameInfo::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInfo::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInfo::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInfo::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 GameInfo::gameid() const {
  return gameid_;
}
inline void GameInfo::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional int32 RoomID = 2;
inline bool GameInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInfo::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 GameInfo::roomid() const {
  return roomid_;
}
inline void GameInfo::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int32 TableID = 3;
inline bool GameInfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameInfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameInfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameInfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 GameInfo::tableid() const {
  return tableid_;
}
inline void GameInfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 SeatID = 4;
inline bool GameInfo::has_seatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameInfo::set_has_seatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameInfo::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameInfo::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 GameInfo::seatid() const {
  return seatid_;
}
inline void GameInfo::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// -------------------------------------------------------------------

// ZJHGameLog

// optional string GameRoundIndex = 1;
inline bool ZJHGameLog::has_gameroundindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZJHGameLog::set_has_gameroundindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZJHGameLog::clear_has_gameroundindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZJHGameLog::clear_gameroundindex() {
  if (gameroundindex_ != &::google::protobuf::internal::kEmptyString) {
    gameroundindex_->clear();
  }
  clear_has_gameroundindex();
}
inline const ::std::string& ZJHGameLog::gameroundindex() const {
  return *gameroundindex_;
}
inline void ZJHGameLog::set_gameroundindex(const ::std::string& value) {
  set_has_gameroundindex();
  if (gameroundindex_ == &::google::protobuf::internal::kEmptyString) {
    gameroundindex_ = new ::std::string;
  }
  gameroundindex_->assign(value);
}
inline void ZJHGameLog::set_gameroundindex(const char* value) {
  set_has_gameroundindex();
  if (gameroundindex_ == &::google::protobuf::internal::kEmptyString) {
    gameroundindex_ = new ::std::string;
  }
  gameroundindex_->assign(value);
}
inline void ZJHGameLog::set_gameroundindex(const char* value, size_t size) {
  set_has_gameroundindex();
  if (gameroundindex_ == &::google::protobuf::internal::kEmptyString) {
    gameroundindex_ = new ::std::string;
  }
  gameroundindex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZJHGameLog::mutable_gameroundindex() {
  set_has_gameroundindex();
  if (gameroundindex_ == &::google::protobuf::internal::kEmptyString) {
    gameroundindex_ = new ::std::string;
  }
  return gameroundindex_;
}
inline ::std::string* ZJHGameLog::release_gameroundindex() {
  clear_has_gameroundindex();
  if (gameroundindex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameroundindex_;
    gameroundindex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZJHGameLog::set_allocated_gameroundindex(::std::string* gameroundindex) {
  if (gameroundindex_ != &::google::protobuf::internal::kEmptyString) {
    delete gameroundindex_;
  }
  if (gameroundindex) {
    set_has_gameroundindex();
    gameroundindex_ = gameroundindex;
  } else {
    clear_has_gameroundindex();
    gameroundindex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .logic2logsvr.PlayerInfoZJH PInfo = 2;
inline int ZJHGameLog::pinfo_size() const {
  return pinfo_.size();
}
inline void ZJHGameLog::clear_pinfo() {
  pinfo_.Clear();
}
inline const ::logic2logsvr::PlayerInfoZJH& ZJHGameLog::pinfo(int index) const {
  return pinfo_.Get(index);
}
inline ::logic2logsvr::PlayerInfoZJH* ZJHGameLog::mutable_pinfo(int index) {
  return pinfo_.Mutable(index);
}
inline ::logic2logsvr::PlayerInfoZJH* ZJHGameLog::add_pinfo() {
  return pinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logic2logsvr::PlayerInfoZJH >&
ZJHGameLog::pinfo() const {
  return pinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::logic2logsvr::PlayerInfoZJH >*
ZJHGameLog::mutable_pinfo() {
  return &pinfo_;
}

// optional .logic2logsvr.GameInfo GInfo = 3;
inline bool ZJHGameLog::has_ginfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZJHGameLog::set_has_ginfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZJHGameLog::clear_has_ginfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZJHGameLog::clear_ginfo() {
  if (ginfo_ != NULL) ginfo_->::logic2logsvr::GameInfo::Clear();
  clear_has_ginfo();
}
inline const ::logic2logsvr::GameInfo& ZJHGameLog::ginfo() const {
  return ginfo_ != NULL ? *ginfo_ : *default_instance_->ginfo_;
}
inline ::logic2logsvr::GameInfo* ZJHGameLog::mutable_ginfo() {
  set_has_ginfo();
  if (ginfo_ == NULL) ginfo_ = new ::logic2logsvr::GameInfo;
  return ginfo_;
}
inline ::logic2logsvr::GameInfo* ZJHGameLog::release_ginfo() {
  clear_has_ginfo();
  ::logic2logsvr::GameInfo* temp = ginfo_;
  ginfo_ = NULL;
  return temp;
}
inline void ZJHGameLog::set_allocated_ginfo(::logic2logsvr::GameInfo* ginfo) {
  delete ginfo_;
  ginfo_ = ginfo;
  if (ginfo) {
    set_has_ginfo();
  } else {
    clear_has_ginfo();
  }
}

// optional int64 BeginTime = 4;
inline bool ZJHGameLog::has_begintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZJHGameLog::set_has_begintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZJHGameLog::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZJHGameLog::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 ZJHGameLog::begintime() const {
  return begintime_;
}
inline void ZJHGameLog::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int64 EndTime = 5;
inline bool ZJHGameLog::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZJHGameLog::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZJHGameLog::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZJHGameLog::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 ZJHGameLog::endtime() const {
  return endtime_;
}
inline void ZJHGameLog::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional int64 VarTime = 6;
inline bool ZJHGameLog::has_vartime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ZJHGameLog::set_has_vartime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ZJHGameLog::clear_has_vartime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ZJHGameLog::clear_vartime() {
  vartime_ = GOOGLE_LONGLONG(0);
  clear_has_vartime();
}
inline ::google::protobuf::int64 ZJHGameLog::vartime() const {
  return vartime_;
}
inline void ZJHGameLog::set_vartime(::google::protobuf::int64 value) {
  set_has_vartime();
  vartime_ = value;
}

// -------------------------------------------------------------------

// FishBulletInfo

// optional int32 BulletID = 1;
inline bool FishBulletInfo::has_bulletid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishBulletInfo::set_has_bulletid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishBulletInfo::clear_has_bulletid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishBulletInfo::clear_bulletid() {
  bulletid_ = 0;
  clear_has_bulletid();
}
inline ::google::protobuf::int32 FishBulletInfo::bulletid() const {
  return bulletid_;
}
inline void FishBulletInfo::set_bulletid(::google::protobuf::int32 value) {
  set_has_bulletid();
  bulletid_ = value;
}

// optional int32 BulletType = 2;
inline bool FishBulletInfo::has_bullettype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishBulletInfo::set_has_bullettype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishBulletInfo::clear_has_bullettype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishBulletInfo::clear_bullettype() {
  bullettype_ = 0;
  clear_has_bullettype();
}
inline ::google::protobuf::int32 FishBulletInfo::bullettype() const {
  return bullettype_;
}
inline void FishBulletInfo::set_bullettype(::google::protobuf::int32 value) {
  set_has_bullettype();
  bullettype_ = value;
}

// optional int32 BulletRate = 3;
inline bool FishBulletInfo::has_bulletrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FishBulletInfo::set_has_bulletrate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FishBulletInfo::clear_has_bulletrate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FishBulletInfo::clear_bulletrate() {
  bulletrate_ = 0;
  clear_has_bulletrate();
}
inline ::google::protobuf::int32 FishBulletInfo::bulletrate() const {
  return bulletrate_;
}
inline void FishBulletInfo::set_bulletrate(::google::protobuf::int32 value) {
  set_has_bulletrate();
  bulletrate_ = value;
}

// optional double BulletLeftTime = 4;
inline bool FishBulletInfo::has_bulletlefttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FishBulletInfo::set_has_bulletlefttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FishBulletInfo::clear_has_bulletlefttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FishBulletInfo::clear_bulletlefttime() {
  bulletlefttime_ = 0;
  clear_has_bulletlefttime();
}
inline double FishBulletInfo::bulletlefttime() const {
  return bulletlefttime_;
}
inline void FishBulletInfo::set_bulletlefttime(double value) {
  set_has_bulletlefttime();
  bulletlefttime_ = value;
}

// optional int32 BulletHitCnt = 5;
inline bool FishBulletInfo::has_bullethitcnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FishBulletInfo::set_has_bullethitcnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FishBulletInfo::clear_has_bullethitcnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FishBulletInfo::clear_bullethitcnt() {
  bullethitcnt_ = 0;
  clear_has_bullethitcnt();
}
inline ::google::protobuf::int32 FishBulletInfo::bullethitcnt() const {
  return bullethitcnt_;
}
inline void FishBulletInfo::set_bullethitcnt(::google::protobuf::int32 value) {
  set_has_bullethitcnt();
  bullethitcnt_ = value;
}

// optional int64 FireTime = 6;
inline bool FishBulletInfo::has_firetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FishBulletInfo::set_has_firetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FishBulletInfo::clear_has_firetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FishBulletInfo::clear_firetime() {
  firetime_ = GOOGLE_LONGLONG(0);
  clear_has_firetime();
}
inline ::google::protobuf::int64 FishBulletInfo::firetime() const {
  return firetime_;
}
inline void FishBulletInfo::set_firetime(::google::protobuf::int64 value) {
  set_has_firetime();
  firetime_ = value;
}

// -------------------------------------------------------------------

// FishFireInfo

// optional int64 GoldFireBefore = 1;
inline bool FishFireInfo::has_goldfirebefore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishFireInfo::set_has_goldfirebefore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishFireInfo::clear_has_goldfirebefore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishFireInfo::clear_goldfirebefore() {
  goldfirebefore_ = GOOGLE_LONGLONG(0);
  clear_has_goldfirebefore();
}
inline ::google::protobuf::int64 FishFireInfo::goldfirebefore() const {
  return goldfirebefore_;
}
inline void FishFireInfo::set_goldfirebefore(::google::protobuf::int64 value) {
  set_has_goldfirebefore();
  goldfirebefore_ = value;
}

// optional int64 GoldFireAfter = 2;
inline bool FishFireInfo::has_goldfireafter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishFireInfo::set_has_goldfireafter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishFireInfo::clear_has_goldfireafter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishFireInfo::clear_goldfireafter() {
  goldfireafter_ = GOOGLE_LONGLONG(0);
  clear_has_goldfireafter();
}
inline ::google::protobuf::int64 FishFireInfo::goldfireafter() const {
  return goldfireafter_;
}
inline void FishFireInfo::set_goldfireafter(::google::protobuf::int64 value) {
  set_has_goldfireafter();
  goldfireafter_ = value;
}

// optional .logic2logsvr.FishBulletInfo FBullettInfo = 3;
inline bool FishFireInfo::has_fbullettinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FishFireInfo::set_has_fbullettinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FishFireInfo::clear_has_fbullettinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FishFireInfo::clear_fbullettinfo() {
  if (fbullettinfo_ != NULL) fbullettinfo_->::logic2logsvr::FishBulletInfo::Clear();
  clear_has_fbullettinfo();
}
inline const ::logic2logsvr::FishBulletInfo& FishFireInfo::fbullettinfo() const {
  return fbullettinfo_ != NULL ? *fbullettinfo_ : *default_instance_->fbullettinfo_;
}
inline ::logic2logsvr::FishBulletInfo* FishFireInfo::mutable_fbullettinfo() {
  set_has_fbullettinfo();
  if (fbullettinfo_ == NULL) fbullettinfo_ = new ::logic2logsvr::FishBulletInfo;
  return fbullettinfo_;
}
inline ::logic2logsvr::FishBulletInfo* FishFireInfo::release_fbullettinfo() {
  clear_has_fbullettinfo();
  ::logic2logsvr::FishBulletInfo* temp = fbullettinfo_;
  fbullettinfo_ = NULL;
  return temp;
}
inline void FishFireInfo::set_allocated_fbullettinfo(::logic2logsvr::FishBulletInfo* fbullettinfo) {
  delete fbullettinfo_;
  fbullettinfo_ = fbullettinfo;
  if (fbullettinfo) {
    set_has_fbullettinfo();
  } else {
    clear_has_fbullettinfo();
  }
}

// optional int32 Commission = 4;
inline bool FishFireInfo::has_commission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FishFireInfo::set_has_commission() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FishFireInfo::clear_has_commission() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FishFireInfo::clear_commission() {
  commission_ = 0;
  clear_has_commission();
}
inline ::google::protobuf::int32 FishFireInfo::commission() const {
  return commission_;
}
inline void FishFireInfo::set_commission(::google::protobuf::int32 value) {
  set_has_commission();
  commission_ = value;
}

// -------------------------------------------------------------------

// FishHitInfo

// optional int32 TurretPowerType = 1;
inline bool FishHitInfo::has_turretpowertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishHitInfo::set_has_turretpowertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishHitInfo::clear_has_turretpowertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishHitInfo::clear_turretpowertype() {
  turretpowertype_ = 0;
  clear_has_turretpowertype();
}
inline ::google::protobuf::int32 FishHitInfo::turretpowertype() const {
  return turretpowertype_;
}
inline void FishHitInfo::set_turretpowertype(::google::protobuf::int32 value) {
  set_has_turretpowertype();
  turretpowertype_ = value;
}

// optional int32 FishID = 2;
inline bool FishHitInfo::has_fishid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishHitInfo::set_has_fishid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishHitInfo::clear_has_fishid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishHitInfo::clear_fishid() {
  fishid_ = 0;
  clear_has_fishid();
}
inline ::google::protobuf::int32 FishHitInfo::fishid() const {
  return fishid_;
}
inline void FishHitInfo::set_fishid(::google::protobuf::int32 value) {
  set_has_fishid();
  fishid_ = value;
}

// optional int32 IsHited = 3;
inline bool FishHitInfo::has_ishited() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FishHitInfo::set_has_ishited() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FishHitInfo::clear_has_ishited() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FishHitInfo::clear_ishited() {
  ishited_ = 0;
  clear_has_ishited();
}
inline ::google::protobuf::int32 FishHitInfo::ishited() const {
  return ishited_;
}
inline void FishHitInfo::set_ishited(::google::protobuf::int32 value) {
  set_has_ishited();
  ishited_ = value;
}

// optional int32 FishProb = 4;
inline bool FishHitInfo::has_fishprob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FishHitInfo::set_has_fishprob() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FishHitInfo::clear_has_fishprob() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FishHitInfo::clear_fishprob() {
  fishprob_ = 0;
  clear_has_fishprob();
}
inline ::google::protobuf::int32 FishHitInfo::fishprob() const {
  return fishprob_;
}
inline void FishHitInfo::set_fishprob(::google::protobuf::int32 value) {
  set_has_fishprob();
  fishprob_ = value;
}

// optional int32 NatureProb = 5;
inline bool FishHitInfo::has_natureprob() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FishHitInfo::set_has_natureprob() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FishHitInfo::clear_has_natureprob() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FishHitInfo::clear_natureprob() {
  natureprob_ = 0;
  clear_has_natureprob();
}
inline ::google::protobuf::int32 FishHitInfo::natureprob() const {
  return natureprob_;
}
inline void FishHitInfo::set_natureprob(::google::protobuf::int32 value) {
  set_has_natureprob();
  natureprob_ = value;
}

// repeated int32 DeadFishID = 6;
inline int FishHitInfo::deadfishid_size() const {
  return deadfishid_.size();
}
inline void FishHitInfo::clear_deadfishid() {
  deadfishid_.Clear();
}
inline ::google::protobuf::int32 FishHitInfo::deadfishid(int index) const {
  return deadfishid_.Get(index);
}
inline void FishHitInfo::set_deadfishid(int index, ::google::protobuf::int32 value) {
  deadfishid_.Set(index, value);
}
inline void FishHitInfo::add_deadfishid(::google::protobuf::int32 value) {
  deadfishid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FishHitInfo::deadfishid() const {
  return deadfishid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FishHitInfo::mutable_deadfishid() {
  return &deadfishid_;
}

// optional int64 DeadFishMoney = 7;
inline bool FishHitInfo::has_deadfishmoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FishHitInfo::set_has_deadfishmoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FishHitInfo::clear_has_deadfishmoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FishHitInfo::clear_deadfishmoney() {
  deadfishmoney_ = GOOGLE_LONGLONG(0);
  clear_has_deadfishmoney();
}
inline ::google::protobuf::int64 FishHitInfo::deadfishmoney() const {
  return deadfishmoney_;
}
inline void FishHitInfo::set_deadfishmoney(::google::protobuf::int64 value) {
  set_has_deadfishmoney();
  deadfishmoney_ = value;
}

// optional .logic2logsvr.FishBulletInfo FishHitBInfo = 8;
inline bool FishHitInfo::has_fishhitbinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FishHitInfo::set_has_fishhitbinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FishHitInfo::clear_has_fishhitbinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FishHitInfo::clear_fishhitbinfo() {
  if (fishhitbinfo_ != NULL) fishhitbinfo_->::logic2logsvr::FishBulletInfo::Clear();
  clear_has_fishhitbinfo();
}
inline const ::logic2logsvr::FishBulletInfo& FishHitInfo::fishhitbinfo() const {
  return fishhitbinfo_ != NULL ? *fishhitbinfo_ : *default_instance_->fishhitbinfo_;
}
inline ::logic2logsvr::FishBulletInfo* FishHitInfo::mutable_fishhitbinfo() {
  set_has_fishhitbinfo();
  if (fishhitbinfo_ == NULL) fishhitbinfo_ = new ::logic2logsvr::FishBulletInfo;
  return fishhitbinfo_;
}
inline ::logic2logsvr::FishBulletInfo* FishHitInfo::release_fishhitbinfo() {
  clear_has_fishhitbinfo();
  ::logic2logsvr::FishBulletInfo* temp = fishhitbinfo_;
  fishhitbinfo_ = NULL;
  return temp;
}
inline void FishHitInfo::set_allocated_fishhitbinfo(::logic2logsvr::FishBulletInfo* fishhitbinfo) {
  delete fishhitbinfo_;
  fishhitbinfo_ = fishhitbinfo;
  if (fishhitbinfo) {
    set_has_fishhitbinfo();
  } else {
    clear_has_fishhitbinfo();
  }
}

// optional int64 HitTime = 9;
inline bool FishHitInfo::has_hittime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FishHitInfo::set_has_hittime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FishHitInfo::clear_has_hittime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FishHitInfo::clear_hittime() {
  hittime_ = GOOGLE_LONGLONG(0);
  clear_has_hittime();
}
inline ::google::protobuf::int64 FishHitInfo::hittime() const {
  return hittime_;
}
inline void FishHitInfo::set_hittime(::google::protobuf::int64 value) {
  set_has_hittime();
  hittime_ = value;
}

// optional int32 LockFishID = 10;
inline bool FishHitInfo::has_lockfishid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FishHitInfo::set_has_lockfishid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FishHitInfo::clear_has_lockfishid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FishHitInfo::clear_lockfishid() {
  lockfishid_ = 0;
  clear_has_lockfishid();
}
inline ::google::protobuf::int32 FishHitInfo::lockfishid() const {
  return lockfishid_;
}
inline void FishHitInfo::set_lockfishid(::google::protobuf::int32 value) {
  set_has_lockfishid();
  lockfishid_ = value;
}

// optional int32 TurretRate = 11;
inline bool FishHitInfo::has_turretrate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FishHitInfo::set_has_turretrate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FishHitInfo::clear_has_turretrate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FishHitInfo::clear_turretrate() {
  turretrate_ = 0;
  clear_has_turretrate();
}
inline ::google::protobuf::int32 FishHitInfo::turretrate() const {
  return turretrate_;
}
inline void FishHitInfo::set_turretrate(::google::protobuf::int32 value) {
  set_has_turretrate();
  turretrate_ = value;
}

// optional int32 FishIDIndex = 12;
inline bool FishHitInfo::has_fishidindex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FishHitInfo::set_has_fishidindex() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FishHitInfo::clear_has_fishidindex() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FishHitInfo::clear_fishidindex() {
  fishidindex_ = 0;
  clear_has_fishidindex();
}
inline ::google::protobuf::int32 FishHitInfo::fishidindex() const {
  return fishidindex_;
}
inline void FishHitInfo::set_fishidindex(::google::protobuf::int32 value) {
  set_has_fishidindex();
  fishidindex_ = value;
}

// -------------------------------------------------------------------

// PlayerInfoFish

// optional int32 PID = 1;
inline bool PlayerInfoFish::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfoFish::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfoFish::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfoFish::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 PlayerInfoFish::pid() const {
  return pid_;
}
inline void PlayerInfoFish::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
}

// optional int64 GoldBegin = 2;
inline bool PlayerInfoFish::has_goldbegin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfoFish::set_has_goldbegin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfoFish::clear_has_goldbegin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfoFish::clear_goldbegin() {
  goldbegin_ = GOOGLE_LONGLONG(0);
  clear_has_goldbegin();
}
inline ::google::protobuf::int64 PlayerInfoFish::goldbegin() const {
  return goldbegin_;
}
inline void PlayerInfoFish::set_goldbegin(::google::protobuf::int64 value) {
  set_has_goldbegin();
  goldbegin_ = value;
}

// optional int64 GoldEnd = 3;
inline bool PlayerInfoFish::has_goldend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInfoFish::set_has_goldend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInfoFish::clear_has_goldend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInfoFish::clear_goldend() {
  goldend_ = GOOGLE_LONGLONG(0);
  clear_has_goldend();
}
inline ::google::protobuf::int64 PlayerInfoFish::goldend() const {
  return goldend_;
}
inline void PlayerInfoFish::set_goldend(::google::protobuf::int64 value) {
  set_has_goldend();
  goldend_ = value;
}

// optional .logic2logsvr.PlayerFlags PFlags = 4;
inline bool PlayerInfoFish::has_pflags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInfoFish::set_has_pflags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInfoFish::clear_has_pflags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInfoFish::clear_pflags() {
  if (pflags_ != NULL) pflags_->::logic2logsvr::PlayerFlags::Clear();
  clear_has_pflags();
}
inline const ::logic2logsvr::PlayerFlags& PlayerInfoFish::pflags() const {
  return pflags_ != NULL ? *pflags_ : *default_instance_->pflags_;
}
inline ::logic2logsvr::PlayerFlags* PlayerInfoFish::mutable_pflags() {
  set_has_pflags();
  if (pflags_ == NULL) pflags_ = new ::logic2logsvr::PlayerFlags;
  return pflags_;
}
inline ::logic2logsvr::PlayerFlags* PlayerInfoFish::release_pflags() {
  clear_has_pflags();
  ::logic2logsvr::PlayerFlags* temp = pflags_;
  pflags_ = NULL;
  return temp;
}
inline void PlayerInfoFish::set_allocated_pflags(::logic2logsvr::PlayerFlags* pflags) {
  delete pflags_;
  pflags_ = pflags;
  if (pflags) {
    set_has_pflags();
  } else {
    clear_has_pflags();
  }
}

// optional int32 LuckValue = 5;
inline bool PlayerInfoFish::has_luckvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInfoFish::set_has_luckvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInfoFish::clear_has_luckvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInfoFish::clear_luckvalue() {
  luckvalue_ = 0;
  clear_has_luckvalue();
}
inline ::google::protobuf::int32 PlayerInfoFish::luckvalue() const {
  return luckvalue_;
}
inline void PlayerInfoFish::set_luckvalue(::google::protobuf::int32 value) {
  set_has_luckvalue();
  luckvalue_ = value;
}

// optional bool IsRobot = 6;
inline bool PlayerInfoFish::has_isrobot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerInfoFish::set_has_isrobot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerInfoFish::clear_has_isrobot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerInfoFish::clear_isrobot() {
  isrobot_ = false;
  clear_has_isrobot();
}
inline bool PlayerInfoFish::isrobot() const {
  return isrobot_;
}
inline void PlayerInfoFish::set_isrobot(bool value) {
  set_has_isrobot();
  isrobot_ = value;
}

// -------------------------------------------------------------------

// FishGameLog

// optional string GameRoundIndex = 1;
inline bool FishGameLog::has_gameroundindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishGameLog::set_has_gameroundindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishGameLog::clear_has_gameroundindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishGameLog::clear_gameroundindex() {
  if (gameroundindex_ != &::google::protobuf::internal::kEmptyString) {
    gameroundindex_->clear();
  }
  clear_has_gameroundindex();
}
inline const ::std::string& FishGameLog::gameroundindex() const {
  return *gameroundindex_;
}
inline void FishGameLog::set_gameroundindex(const ::std::string& value) {
  set_has_gameroundindex();
  if (gameroundindex_ == &::google::protobuf::internal::kEmptyString) {
    gameroundindex_ = new ::std::string;
  }
  gameroundindex_->assign(value);
}
inline void FishGameLog::set_gameroundindex(const char* value) {
  set_has_gameroundindex();
  if (gameroundindex_ == &::google::protobuf::internal::kEmptyString) {
    gameroundindex_ = new ::std::string;
  }
  gameroundindex_->assign(value);
}
inline void FishGameLog::set_gameroundindex(const char* value, size_t size) {
  set_has_gameroundindex();
  if (gameroundindex_ == &::google::protobuf::internal::kEmptyString) {
    gameroundindex_ = new ::std::string;
  }
  gameroundindex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishGameLog::mutable_gameroundindex() {
  set_has_gameroundindex();
  if (gameroundindex_ == &::google::protobuf::internal::kEmptyString) {
    gameroundindex_ = new ::std::string;
  }
  return gameroundindex_;
}
inline ::std::string* FishGameLog::release_gameroundindex() {
  clear_has_gameroundindex();
  if (gameroundindex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameroundindex_;
    gameroundindex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishGameLog::set_allocated_gameroundindex(::std::string* gameroundindex) {
  if (gameroundindex_ != &::google::protobuf::internal::kEmptyString) {
    delete gameroundindex_;
  }
  if (gameroundindex) {
    set_has_gameroundindex();
    gameroundindex_ = gameroundindex;
  } else {
    clear_has_gameroundindex();
    gameroundindex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .logic2logsvr.PlayerInfoFish PInfo = 2;
inline bool FishGameLog::has_pinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishGameLog::set_has_pinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishGameLog::clear_has_pinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishGameLog::clear_pinfo() {
  if (pinfo_ != NULL) pinfo_->::logic2logsvr::PlayerInfoFish::Clear();
  clear_has_pinfo();
}
inline const ::logic2logsvr::PlayerInfoFish& FishGameLog::pinfo() const {
  return pinfo_ != NULL ? *pinfo_ : *default_instance_->pinfo_;
}
inline ::logic2logsvr::PlayerInfoFish* FishGameLog::mutable_pinfo() {
  set_has_pinfo();
  if (pinfo_ == NULL) pinfo_ = new ::logic2logsvr::PlayerInfoFish;
  return pinfo_;
}
inline ::logic2logsvr::PlayerInfoFish* FishGameLog::release_pinfo() {
  clear_has_pinfo();
  ::logic2logsvr::PlayerInfoFish* temp = pinfo_;
  pinfo_ = NULL;
  return temp;
}
inline void FishGameLog::set_allocated_pinfo(::logic2logsvr::PlayerInfoFish* pinfo) {
  delete pinfo_;
  pinfo_ = pinfo;
  if (pinfo) {
    set_has_pinfo();
  } else {
    clear_has_pinfo();
  }
}

// optional .logic2logsvr.GameInfo GInfo = 3;
inline bool FishGameLog::has_ginfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FishGameLog::set_has_ginfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FishGameLog::clear_has_ginfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FishGameLog::clear_ginfo() {
  if (ginfo_ != NULL) ginfo_->::logic2logsvr::GameInfo::Clear();
  clear_has_ginfo();
}
inline const ::logic2logsvr::GameInfo& FishGameLog::ginfo() const {
  return ginfo_ != NULL ? *ginfo_ : *default_instance_->ginfo_;
}
inline ::logic2logsvr::GameInfo* FishGameLog::mutable_ginfo() {
  set_has_ginfo();
  if (ginfo_ == NULL) ginfo_ = new ::logic2logsvr::GameInfo;
  return ginfo_;
}
inline ::logic2logsvr::GameInfo* FishGameLog::release_ginfo() {
  clear_has_ginfo();
  ::logic2logsvr::GameInfo* temp = ginfo_;
  ginfo_ = NULL;
  return temp;
}
inline void FishGameLog::set_allocated_ginfo(::logic2logsvr::GameInfo* ginfo) {
  delete ginfo_;
  ginfo_ = ginfo;
  if (ginfo) {
    set_has_ginfo();
  } else {
    clear_has_ginfo();
  }
}

// repeated .logic2logsvr.FishFireInfo FireInfo = 4;
inline int FishGameLog::fireinfo_size() const {
  return fireinfo_.size();
}
inline void FishGameLog::clear_fireinfo() {
  fireinfo_.Clear();
}
inline const ::logic2logsvr::FishFireInfo& FishGameLog::fireinfo(int index) const {
  return fireinfo_.Get(index);
}
inline ::logic2logsvr::FishFireInfo* FishGameLog::mutable_fireinfo(int index) {
  return fireinfo_.Mutable(index);
}
inline ::logic2logsvr::FishFireInfo* FishGameLog::add_fireinfo() {
  return fireinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logic2logsvr::FishFireInfo >&
FishGameLog::fireinfo() const {
  return fireinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::logic2logsvr::FishFireInfo >*
FishGameLog::mutable_fireinfo() {
  return &fireinfo_;
}

// repeated .logic2logsvr.FishHitInfo HitInfo = 5;
inline int FishGameLog::hitinfo_size() const {
  return hitinfo_.size();
}
inline void FishGameLog::clear_hitinfo() {
  hitinfo_.Clear();
}
inline const ::logic2logsvr::FishHitInfo& FishGameLog::hitinfo(int index) const {
  return hitinfo_.Get(index);
}
inline ::logic2logsvr::FishHitInfo* FishGameLog::mutable_hitinfo(int index) {
  return hitinfo_.Mutable(index);
}
inline ::logic2logsvr::FishHitInfo* FishGameLog::add_hitinfo() {
  return hitinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logic2logsvr::FishHitInfo >&
FishGameLog::hitinfo() const {
  return hitinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::logic2logsvr::FishHitInfo >*
FishGameLog::mutable_hitinfo() {
  return &hitinfo_;
}

// optional int64 BeginTime = 6;
inline bool FishGameLog::has_begintime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FishGameLog::set_has_begintime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FishGameLog::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FishGameLog::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 FishGameLog::begintime() const {
  return begintime_;
}
inline void FishGameLog::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int64 EndTime = 7;
inline bool FishGameLog::has_endtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FishGameLog::set_has_endtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FishGameLog::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FishGameLog::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 FishGameLog::endtime() const {
  return endtime_;
}
inline void FishGameLog::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional int64 VarTime = 8;
inline bool FishGameLog::has_vartime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FishGameLog::set_has_vartime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FishGameLog::clear_has_vartime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FishGameLog::clear_vartime() {
  vartime_ = GOOGLE_LONGLONG(0);
  clear_has_vartime();
}
inline ::google::protobuf::int64 FishGameLog::vartime() const {
  return vartime_;
}
inline void FishGameLog::set_vartime(::google::protobuf::int64 value) {
  set_has_vartime();
  vartime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace logic2logsvr

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logic2logsvr_5fmsg_5ftype_2eproto__INCLUDED
