// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login2chk_msg_type.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "login2chk_msg_type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace login2chk {

namespace {

const ::google::protobuf::Descriptor* C2LHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CHeartBeatRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CHeartBeatRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSMSCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSMSCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* Req2WebSMSRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Req2WebSMSRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPhoneBinding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPhoneBinding_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAliPayBinding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAliPayBinding_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetrievePwd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetrievePwd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BindingRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BindingRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ch2LBindingRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ch2LBindingRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWorldToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWorldToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWorldTokenRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWorldTokenRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestChargeOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestChargeOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckChargeRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckChargeRet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_login2chk_5fmsg_5ftype_2eproto() {
  protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "login2chk_msg_type.proto");
  GOOGLE_CHECK(file != NULL);
  C2LHeartBeat_descriptor_ = file->message_type(0);
  static const int C2LHeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LHeartBeat, packet_id_),
  };
  C2LHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LHeartBeat_descriptor_,
      C2LHeartBeat::default_instance_,
      C2LHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LHeartBeat));
  L2CHeartBeatRet_descriptor_ = file->message_type(1);
  static const int L2CHeartBeatRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CHeartBeatRet, packet_id_),
  };
  L2CHeartBeatRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CHeartBeatRet_descriptor_,
      L2CHeartBeatRet::default_instance_,
      L2CHeartBeatRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CHeartBeatRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CHeartBeatRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CHeartBeatRet));
  UserLogin_descriptor_ = file->message_type(2);
  static const int UserLogin_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin, devicenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin, platfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin, referral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin, logintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin, thirdex_),
  };
  UserLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLogin_descriptor_,
      UserLogin::default_instance_,
      UserLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLogin));
  RoomInfo_descriptor_ = file->message_type(3);
  static const int RoomInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, gamegenre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roomaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, onlinecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, gateaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, svrlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, gamever_),
  };
  RoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomInfo_descriptor_,
      RoomInfo::default_instance_,
      RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInfo));
  UserLoginRet_descriptor_ = file->message_type(4);
  static const int UserLoginRet_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, isrelogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, original_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, regionarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, istourist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, phonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, alipayacc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, realname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, bindingreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, defaultgate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, errormsg_),
  };
  UserLoginRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginRet_descriptor_,
      UserLoginRet::default_instance_,
      UserLoginRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginRet));
  RequestSMSCode_descriptor_ = file->message_type(5);
  static const int RequestSMSCode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSMSCode, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSMSCode, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSMSCode, phonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSMSCode, smstype_),
  };
  RequestSMSCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSMSCode_descriptor_,
      RequestSMSCode::default_instance_,
      RequestSMSCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSMSCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSMSCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSMSCode));
  Req2WebSMSRet_descriptor_ = file->message_type(6);
  static const int Req2WebSMSRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req2WebSMSRet, reqsmscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req2WebSMSRet, info_),
  };
  Req2WebSMSRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Req2WebSMSRet_descriptor_,
      Req2WebSMSRet::default_instance_,
      Req2WebSMSRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req2WebSMSRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Req2WebSMSRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Req2WebSMSRet));
  UserPhoneBinding_descriptor_ = file->message_type(7);
  static const int UserPhoneBinding_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPhoneBinding, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPhoneBinding, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPhoneBinding, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPhoneBinding, devicenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPhoneBinding, phonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPhoneBinding, smscode_),
  };
  UserPhoneBinding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPhoneBinding_descriptor_,
      UserPhoneBinding::default_instance_,
      UserPhoneBinding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPhoneBinding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPhoneBinding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPhoneBinding));
  UserAliPayBinding_descriptor_ = file->message_type(8);
  static const int UserAliPayBinding_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAliPayBinding, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAliPayBinding, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAliPayBinding, alipayacc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAliPayBinding, realname_),
  };
  UserAliPayBinding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAliPayBinding_descriptor_,
      UserAliPayBinding::default_instance_,
      UserAliPayBinding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAliPayBinding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAliPayBinding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAliPayBinding));
  RetrievePwd_descriptor_ = file->message_type(9);
  static const int RetrievePwd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrievePwd, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrievePwd, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrievePwd, phonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrievePwd, smsnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrievePwd, newpwd_),
  };
  RetrievePwd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetrievePwd_descriptor_,
      RetrievePwd::default_instance_,
      RetrievePwd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrievePwd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetrievePwd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetrievePwd));
  BindingRet_descriptor_ = file->message_type(10);
  static const int BindingRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindingRet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindingRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindingRet, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindingRet, errornum_),
  };
  BindingRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BindingRet_descriptor_,
      BindingRet::default_instance_,
      BindingRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindingRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindingRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BindingRet));
  Ch2LBindingRet_descriptor_ = file->message_type(11);
  static const int Ch2LBindingRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch2LBindingRet, upbinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch2LBindingRet, brinfo_),
  };
  Ch2LBindingRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ch2LBindingRet_descriptor_,
      Ch2LBindingRet::default_instance_,
      Ch2LBindingRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch2LBindingRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ch2LBindingRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ch2LBindingRet));
  ReqWorldToken_descriptor_ = file->message_type(12);
  static const int ReqWorldToken_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldToken, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldToken, acc_),
  };
  ReqWorldToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWorldToken_descriptor_,
      ReqWorldToken::default_instance_,
      ReqWorldToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWorldToken));
  ReqWorldTokenRet_descriptor_ = file->message_type(13);
  static const int ReqWorldTokenRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldTokenRet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldTokenRet, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldTokenRet, token_),
  };
  ReqWorldTokenRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWorldTokenRet_descriptor_,
      ReqWorldTokenRet::default_instance_,
      ReqWorldTokenRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldTokenRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldTokenRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWorldTokenRet));
  RequestChargeOrder_descriptor_ = file->message_type(14);
  static const int RequestChargeOrder_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChargeOrder, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChargeOrder, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChargeOrder, channelid_),
  };
  RequestChargeOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestChargeOrder_descriptor_,
      RequestChargeOrder::default_instance_,
      RequestChargeOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChargeOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChargeOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestChargeOrder));
  ChargeRet_descriptor_ = file->message_type(15);
  static const int ChargeRet_offsets_[1] = {
  };
  ChargeRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeRet_descriptor_,
      ChargeRet::default_instance_,
      ChargeRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeRet));
  CheckChargeRet_descriptor_ = file->message_type(16);
  static const int CheckChargeRet_offsets_[1] = {
  };
  CheckChargeRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckChargeRet_descriptor_,
      CheckChargeRet::default_instance_,
      CheckChargeRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChargeRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChargeRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckChargeRet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_login2chk_5fmsg_5ftype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LHeartBeat_descriptor_, &C2LHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CHeartBeatRet_descriptor_, &L2CHeartBeatRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLogin_descriptor_, &UserLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInfo_descriptor_, &RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginRet_descriptor_, &UserLoginRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSMSCode_descriptor_, &RequestSMSCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Req2WebSMSRet_descriptor_, &Req2WebSMSRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPhoneBinding_descriptor_, &UserPhoneBinding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAliPayBinding_descriptor_, &UserAliPayBinding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetrievePwd_descriptor_, &RetrievePwd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BindingRet_descriptor_, &BindingRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ch2LBindingRet_descriptor_, &Ch2LBindingRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWorldToken_descriptor_, &ReqWorldToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWorldTokenRet_descriptor_, &ReqWorldTokenRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestChargeOrder_descriptor_, &RequestChargeOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeRet_descriptor_, &ChargeRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckChargeRet_descriptor_, &CheckChargeRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_login2chk_5fmsg_5ftype_2eproto() {
  delete C2LHeartBeat::default_instance_;
  delete C2LHeartBeat_reflection_;
  delete L2CHeartBeatRet::default_instance_;
  delete L2CHeartBeatRet_reflection_;
  delete UserLogin::default_instance_;
  delete UserLogin_reflection_;
  delete RoomInfo::default_instance_;
  delete RoomInfo_reflection_;
  delete UserLoginRet::default_instance_;
  delete UserLoginRet_reflection_;
  delete RequestSMSCode::default_instance_;
  delete RequestSMSCode_reflection_;
  delete Req2WebSMSRet::default_instance_;
  delete Req2WebSMSRet_reflection_;
  delete UserPhoneBinding::default_instance_;
  delete UserPhoneBinding_reflection_;
  delete UserAliPayBinding::default_instance_;
  delete UserAliPayBinding_reflection_;
  delete RetrievePwd::default_instance_;
  delete RetrievePwd_reflection_;
  delete BindingRet::default_instance_;
  delete BindingRet_reflection_;
  delete Ch2LBindingRet::default_instance_;
  delete Ch2LBindingRet_reflection_;
  delete ReqWorldToken::default_instance_;
  delete ReqWorldToken_reflection_;
  delete ReqWorldTokenRet::default_instance_;
  delete ReqWorldTokenRet_reflection_;
  delete RequestChargeOrder::default_instance_;
  delete RequestChargeOrder_reflection_;
  delete ChargeRet::default_instance_;
  delete ChargeRet_reflection_;
  delete CheckChargeRet::default_instance_;
  delete CheckChargeRet_reflection_;
}

void protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030login2chk_msg_type.proto\022\tlogin2chk\"$\n"
    "\014C2LHeartBeat\022\024\n\tpacket_id\030\001 \001(\005:\0018\"\'\n\017L"
    "2CHeartBeatRet\022\024\n\tpacket_id\030\001 \001(\005:\0019\"\254\001\n"
    "\tUserLogin\022\027\n\tpacket_id\030\001 \001(\005:\0041003\022\013\n\003a"
    "cc\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\022\021\n\tchannelID\030\004 \001(\005"
    "\022\021\n\tdeviceNum\030\005 \002(\t\022\020\n\010platfrom\030\006 \001(\005\022\020\n"
    "\010referral\030\007 \001(\005\022\021\n\tloginType\030\010 \001(\005\022\017\n\007th"
    "irdEx\030\t \001(\t\"\253\001\n\010RoomInfo\022\021\n\tgameGenre\030\001 "
    "\001(\005\022\020\n\010gameType\030\002 \002(\005\022\020\n\010roomAddr\030\003 \001(\t\022"
    "\020\n\010roomType\030\004 \001(\005\022\016\n\006roomID\030\005 \001(\005\022\021\n\tonl"
    "ineCnt\030\006 \001(\005\022\020\n\010gateAddr\030\007 \002(\t\022\020\n\010svrLev"
    "el\030\010 \001(\005\022\017\n\007gameVer\030\t \001(\005\"\272\002\n\014UserLoginR"
    "et\022\027\n\tpacket_id\030\001 \001(\005:\0041004\022\016\n\006result\030\002 "
    "\001(\005\022\013\n\003acc\030\003 \001(\t\022\r\n\005token\030\004 \001(\t\022\021\n\tisrel"
    "ogin\030\005 \002(\010\022$\n\007content\030\006 \003(\0132\023.login2chk."
    "RoomInfo\022\020\n\010original\030\007 \001(\014\022\022\n\nregionArea"
    "\030\010 \001(\t\022\021\n\tisTourist\030\t \001(\010\022\020\n\010phoneNum\030\n "
    "\001(\t\022\021\n\talipayAcc\030\013 \001(\t\022\020\n\010realName\030\014 \001(\t"
    "\022\025\n\rbindingReward\030\r \001(\003\022\023\n\013defaultGate\030\016"
    " \001(\t\022\020\n\010errorMsg\030\017 \001(\t\"Y\n\016RequestSMSCode"
    "\022\027\n\tpacket_id\030\001 \001(\005:\0041007\022\013\n\003acc\030\002 \002(\t\022\020"
    "\n\010phoneNum\030\003 \002(\t\022\017\n\007smsType\030\004 \001(\005\"1\n\rReq"
    "2WebSMSRet\022\022\n\nreqSMSCode\030\001 \002(\005\022\014\n\004info\030\002"
    " \002(\014\"{\n\020UserPhoneBinding\022\027\n\tpacket_id\030\001 "
    "\001(\005:\0041009\022\013\n\003acc\030\002 \002(\t\022\013\n\003pwd\030\003 \001(\t\022\021\n\td"
    "eviceNum\030\004 \002(\t\022\020\n\010phoneNum\030\005 \001(\t\022\017\n\007smsC"
    "ode\030\006 \002(\005\"^\n\021UserAliPayBinding\022\027\n\tpacket"
    "_id\030\001 \001(\005:\0041011\022\013\n\003acc\030\002 \002(\t\022\021\n\talipayAc"
    "c\030\003 \001(\t\022\020\n\010realName\030\004 \001(\t\"e\n\013RetrievePwd"
    "\022\027\n\tpacket_id\030\001 \001(\005:\0041013\022\013\n\003acc\030\002 \002(\t\022\020"
    "\n\010phoneNum\030\003 \002(\t\022\016\n\006smsNum\030\004 \002(\005\022\016\n\006newP"
    "wd\030\005 \002(\t\"W\n\nBindingRet\022\027\n\tpacket_id\030\001 \001("
    "\005:\0041012\022\016\n\006result\030\002 \001(\005\022\016\n\006optype\030\003 \001(\005\022"
    "\020\n\010errorNum\030\004 \002(\005\"1\n\016Ch2LBindingRet\022\017\n\007u"
    "pbInfo\030\001 \002(\014\022\016\n\006brInfo\030\002 \002(\014\"5\n\rReqWorld"
    "Token\022\027\n\tpacket_id\030\001 \001(\005:\0041019\022\013\n\003acc\030\002 "
    "\001(\t\"G\n\020ReqWorldTokenRet\022\027\n\tpacket_id\030\001 \001"
    "(\005:\0041020\022\013\n\003acc\030\002 \001(\t\022\r\n\005token\030\003 \001(\t\"M\n\022"
    "RequestChargeOrder\022\027\n\tpacket_id\030\001 \001(\005:\0041"
    "018\022\013\n\003acc\030\002 \002(\t\022\021\n\tchannelID\030\003 \001(\005\"\013\n\tC"
    "hargeRet\"\020\n\016CheckChargeRet", 1626);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "login2chk_msg_type.proto", &protobuf_RegisterTypes);
  C2LHeartBeat::default_instance_ = new C2LHeartBeat();
  L2CHeartBeatRet::default_instance_ = new L2CHeartBeatRet();
  UserLogin::default_instance_ = new UserLogin();
  RoomInfo::default_instance_ = new RoomInfo();
  UserLoginRet::default_instance_ = new UserLoginRet();
  RequestSMSCode::default_instance_ = new RequestSMSCode();
  Req2WebSMSRet::default_instance_ = new Req2WebSMSRet();
  UserPhoneBinding::default_instance_ = new UserPhoneBinding();
  UserAliPayBinding::default_instance_ = new UserAliPayBinding();
  RetrievePwd::default_instance_ = new RetrievePwd();
  BindingRet::default_instance_ = new BindingRet();
  Ch2LBindingRet::default_instance_ = new Ch2LBindingRet();
  ReqWorldToken::default_instance_ = new ReqWorldToken();
  ReqWorldTokenRet::default_instance_ = new ReqWorldTokenRet();
  RequestChargeOrder::default_instance_ = new RequestChargeOrder();
  ChargeRet::default_instance_ = new ChargeRet();
  CheckChargeRet::default_instance_ = new CheckChargeRet();
  C2LHeartBeat::default_instance_->InitAsDefaultInstance();
  L2CHeartBeatRet::default_instance_->InitAsDefaultInstance();
  UserLogin::default_instance_->InitAsDefaultInstance();
  RoomInfo::default_instance_->InitAsDefaultInstance();
  UserLoginRet::default_instance_->InitAsDefaultInstance();
  RequestSMSCode::default_instance_->InitAsDefaultInstance();
  Req2WebSMSRet::default_instance_->InitAsDefaultInstance();
  UserPhoneBinding::default_instance_->InitAsDefaultInstance();
  UserAliPayBinding::default_instance_->InitAsDefaultInstance();
  RetrievePwd::default_instance_->InitAsDefaultInstance();
  BindingRet::default_instance_->InitAsDefaultInstance();
  Ch2LBindingRet::default_instance_->InitAsDefaultInstance();
  ReqWorldToken::default_instance_->InitAsDefaultInstance();
  ReqWorldTokenRet::default_instance_->InitAsDefaultInstance();
  RequestChargeOrder::default_instance_->InitAsDefaultInstance();
  ChargeRet::default_instance_->InitAsDefaultInstance();
  CheckChargeRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_login2chk_5fmsg_5ftype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_login2chk_5fmsg_5ftype_2eproto {
  StaticDescriptorInitializer_login2chk_5fmsg_5ftype_2eproto() {
    protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  }
} static_descriptor_initializer_login2chk_5fmsg_5ftype_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int C2LHeartBeat::kPacketIdFieldNumber;
#endif  // !_MSC_VER

C2LHeartBeat::C2LHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LHeartBeat::InitAsDefaultInstance() {
}

C2LHeartBeat::C2LHeartBeat(const C2LHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 8;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LHeartBeat::~C2LHeartBeat() {
  SharedDtor();
}

void C2LHeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LHeartBeat_descriptor_;
}

const C2LHeartBeat& C2LHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

C2LHeartBeat* C2LHeartBeat::default_instance_ = NULL;

C2LHeartBeat* C2LHeartBeat::New() const {
  return new C2LHeartBeat;
}

void C2LHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 8;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1 [default = 8];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packet_id = 1 [default = 8];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packet_id = 1 [default = 8];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LHeartBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packet_id = 1 [default = 8];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LHeartBeat::MergeFrom(const C2LHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LHeartBeat::CopyFrom(const C2LHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LHeartBeat::IsInitialized() const {

  return true;
}

void C2LHeartBeat::Swap(C2LHeartBeat* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LHeartBeat_descriptor_;
  metadata.reflection = C2LHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CHeartBeatRet::kPacketIdFieldNumber;
#endif  // !_MSC_VER

L2CHeartBeatRet::L2CHeartBeatRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CHeartBeatRet::InitAsDefaultInstance() {
}

L2CHeartBeatRet::L2CHeartBeatRet(const L2CHeartBeatRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CHeartBeatRet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 9;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CHeartBeatRet::~L2CHeartBeatRet() {
  SharedDtor();
}

void L2CHeartBeatRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CHeartBeatRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CHeartBeatRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CHeartBeatRet_descriptor_;
}

const L2CHeartBeatRet& L2CHeartBeatRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

L2CHeartBeatRet* L2CHeartBeatRet::default_instance_ = NULL;

L2CHeartBeatRet* L2CHeartBeatRet::New() const {
  return new L2CHeartBeatRet;
}

void L2CHeartBeatRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 9;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CHeartBeatRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1 [default = 9];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CHeartBeatRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packet_id = 1 [default = 9];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CHeartBeatRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packet_id = 1 [default = 9];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CHeartBeatRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packet_id = 1 [default = 9];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CHeartBeatRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CHeartBeatRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CHeartBeatRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CHeartBeatRet::MergeFrom(const L2CHeartBeatRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CHeartBeatRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CHeartBeatRet::CopyFrom(const L2CHeartBeatRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CHeartBeatRet::IsInitialized() const {

  return true;
}

void L2CHeartBeatRet::Swap(L2CHeartBeatRet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CHeartBeatRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CHeartBeatRet_descriptor_;
  metadata.reflection = L2CHeartBeatRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLogin::kPacketIdFieldNumber;
const int UserLogin::kAccFieldNumber;
const int UserLogin::kPwdFieldNumber;
const int UserLogin::kChannelIDFieldNumber;
const int UserLogin::kDeviceNumFieldNumber;
const int UserLogin::kPlatfromFieldNumber;
const int UserLogin::kReferralFieldNumber;
const int UserLogin::kLoginTypeFieldNumber;
const int UserLogin::kThirdExFieldNumber;
#endif  // !_MSC_VER

UserLogin::UserLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLogin::InitAsDefaultInstance() {
}

UserLogin::UserLogin(const UserLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLogin::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 1003;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = 0;
  devicenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platfrom_ = 0;
  referral_ = 0;
  logintype_ = 0;
  thirdex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogin::~UserLogin() {
  SharedDtor();
}

void UserLogin::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (devicenum_ != &::google::protobuf::internal::kEmptyString) {
    delete devicenum_;
  }
  if (thirdex_ != &::google::protobuf::internal::kEmptyString) {
    delete thirdex_;
  }
  if (this != default_instance_) {
  }
}

void UserLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogin_descriptor_;
}

const UserLogin& UserLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

UserLogin* UserLogin::default_instance_ = NULL;

UserLogin* UserLogin::New() const {
  return new UserLogin;
}

void UserLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 1003;
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    channelid_ = 0;
    if (has_devicenum()) {
      if (devicenum_ != &::google::protobuf::internal::kEmptyString) {
        devicenum_->clear();
      }
    }
    platfrom_ = 0;
    referral_ = 0;
    logintype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_thirdex()) {
      if (thirdex_ != &::google::protobuf::internal::kEmptyString) {
        thirdex_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1 [default = 1003];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acc;
        break;
      }

      // optional string acc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }

      // optional string pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channelID;
        break;
      }

      // optional int32 channelID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deviceNum;
        break;
      }

      // required string deviceNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicenum().data(), this->devicenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_platfrom;
        break;
      }

      // optional int32 platfrom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platfrom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platfrom_)));
          set_has_platfrom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_referral;
        break;
      }

      // optional int32 referral = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &referral_)));
          set_has_referral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_loginType;
        break;
      }

      // optional int32 loginType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logintype_)));
          set_has_logintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_thirdEx;
        break;
      }

      // optional string thirdEx = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thirdEx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thirdex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->thirdex().data(), this->thirdex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packet_id = 1 [default = 1003];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  // optional string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acc(), output);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwd(), output);
  }

  // optional int32 channelID = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->channelid(), output);
  }

  // required string deviceNum = 5;
  if (has_devicenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicenum().data(), this->devicenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->devicenum(), output);
  }

  // optional int32 platfrom = 6;
  if (has_platfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->platfrom(), output);
  }

  // optional int32 referral = 7;
  if (has_referral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->referral(), output);
  }

  // optional int32 loginType = 8;
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->logintype(), output);
  }

  // optional string thirdEx = 9;
  if (has_thirdex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thirdex().data(), this->thirdex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->thirdex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packet_id = 1 [default = 1003];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packet_id(), target);
  }

  // optional string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acc(), target);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // optional int32 channelID = 4;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->channelid(), target);
  }

  // required string deviceNum = 5;
  if (has_devicenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicenum().data(), this->devicenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->devicenum(), target);
  }

  // optional int32 platfrom = 6;
  if (has_platfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->platfrom(), target);
  }

  // optional int32 referral = 7;
  if (has_referral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->referral(), target);
  }

  // optional int32 loginType = 8;
  if (has_logintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->logintype(), target);
  }

  // optional string thirdEx = 9;
  if (has_thirdex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thirdex().data(), this->thirdex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->thirdex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packet_id = 1 [default = 1003];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

    // optional string acc = 2;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional int32 channelID = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelid());
    }

    // required string deviceNum = 5;
    if (has_devicenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicenum());
    }

    // optional int32 platfrom = 6;
    if (has_platfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platfrom());
    }

    // optional int32 referral = 7;
    if (has_referral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->referral());
    }

    // optional int32 loginType = 8;
    if (has_logintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logintype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string thirdEx = 9;
    if (has_thirdex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thirdex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLogin::MergeFrom(const UserLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_devicenum()) {
      set_devicenum(from.devicenum());
    }
    if (from.has_platfrom()) {
      set_platfrom(from.platfrom());
    }
    if (from.has_referral()) {
      set_referral(from.referral());
    }
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_thirdex()) {
      set_thirdex(from.thirdex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogin::CopyFrom(const UserLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void UserLogin::Swap(UserLogin* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(acc_, other->acc_);
    std::swap(pwd_, other->pwd_);
    std::swap(channelid_, other->channelid_);
    std::swap(devicenum_, other->devicenum_);
    std::swap(platfrom_, other->platfrom_);
    std::swap(referral_, other->referral_);
    std::swap(logintype_, other->logintype_);
    std::swap(thirdex_, other->thirdex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLogin_descriptor_;
  metadata.reflection = UserLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInfo::kGameGenreFieldNumber;
const int RoomInfo::kGameTypeFieldNumber;
const int RoomInfo::kRoomAddrFieldNumber;
const int RoomInfo::kRoomTypeFieldNumber;
const int RoomInfo::kRoomIDFieldNumber;
const int RoomInfo::kOnlineCntFieldNumber;
const int RoomInfo::kGateAddrFieldNumber;
const int RoomInfo::kSvrLevelFieldNumber;
const int RoomInfo::kGameVerFieldNumber;
#endif  // !_MSC_VER

RoomInfo::RoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomInfo::InitAsDefaultInstance() {
}

RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomInfo::SharedCtor() {
  _cached_size_ = 0;
  gamegenre_ = 0;
  gametype_ = 0;
  roomaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomtype_ = 0;
  roomid_ = 0;
  onlinecnt_ = 0;
  gateaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svrlevel_ = 0;
  gamever_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInfo::~RoomInfo() {
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  if (roomaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete roomaddr_;
  }
  if (gateaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete gateaddr_;
  }
  if (this != default_instance_) {
  }
}

void RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInfo_descriptor_;
}

const RoomInfo& RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

RoomInfo* RoomInfo::default_instance_ = NULL;

RoomInfo* RoomInfo::New() const {
  return new RoomInfo;
}

void RoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamegenre_ = 0;
    gametype_ = 0;
    if (has_roomaddr()) {
      if (roomaddr_ != &::google::protobuf::internal::kEmptyString) {
        roomaddr_->clear();
      }
    }
    roomtype_ = 0;
    roomid_ = 0;
    onlinecnt_ = 0;
    if (has_gateaddr()) {
      if (gateaddr_ != &::google::protobuf::internal::kEmptyString) {
        gateaddr_->clear();
      }
    }
    svrlevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gamever_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameGenre = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamegenre_)));
          set_has_gamegenre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameType;
        break;
      }

      // required int32 gameType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roomAddr;
        break;
      }

      // optional string roomAddr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomaddr().data(), this->roomaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roomType;
        break;
      }

      // optional int32 roomType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roomID;
        break;
      }

      // optional int32 roomID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_onlineCnt;
        break;
      }

      // optional int32 onlineCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinecnt_)));
          set_has_onlinecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gateAddr;
        break;
      }

      // required string gateAddr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gateaddr().data(), this->gateaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_svrLevel;
        break;
      }

      // optional int32 svrLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svrlevel_)));
          set_has_svrlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gameVer;
        break;
      }

      // optional int32 gameVer = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameVer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamever_)));
          set_has_gamever();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameGenre = 1;
  if (has_gamegenre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gamegenre(), output);
  }

  // required int32 gameType = 2;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gametype(), output);
  }

  // optional string roomAddr = 3;
  if (has_roomaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomaddr().data(), this->roomaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->roomaddr(), output);
  }

  // optional int32 roomType = 4;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roomtype(), output);
  }

  // optional int32 roomID = 5;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roomid(), output);
  }

  // optional int32 onlineCnt = 6;
  if (has_onlinecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->onlinecnt(), output);
  }

  // required string gateAddr = 7;
  if (has_gateaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateaddr().data(), this->gateaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->gateaddr(), output);
  }

  // optional int32 svrLevel = 8;
  if (has_svrlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->svrlevel(), output);
  }

  // optional int32 gameVer = 9;
  if (has_gamever()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gamever(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gameGenre = 1;
  if (has_gamegenre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gamegenre(), target);
  }

  // required int32 gameType = 2;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gametype(), target);
  }

  // optional string roomAddr = 3;
  if (has_roomaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomaddr().data(), this->roomaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomaddr(), target);
  }

  // optional int32 roomType = 4;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roomtype(), target);
  }

  // optional int32 roomID = 5;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roomid(), target);
  }

  // optional int32 onlineCnt = 6;
  if (has_onlinecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->onlinecnt(), target);
  }

  // required string gateAddr = 7;
  if (has_gateaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateaddr().data(), this->gateaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->gateaddr(), target);
  }

  // optional int32 svrLevel = 8;
  if (has_svrlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->svrlevel(), target);
  }

  // optional int32 gameVer = 9;
  if (has_gamever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gamever(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameGenre = 1;
    if (has_gamegenre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamegenre());
    }

    // required int32 gameType = 2;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }

    // optional string roomAddr = 3;
    if (has_roomaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomaddr());
    }

    // optional int32 roomType = 4;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // optional int32 roomID = 5;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 onlineCnt = 6;
    if (has_onlinecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinecnt());
    }

    // required string gateAddr = 7;
    if (has_gateaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateaddr());
    }

    // optional int32 svrLevel = 8;
    if (has_svrlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svrlevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 gameVer = 9;
    if (has_gamever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamever());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamegenre()) {
      set_gamegenre(from.gamegenre());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomaddr()) {
      set_roomaddr(from.roomaddr());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_onlinecnt()) {
      set_onlinecnt(from.onlinecnt());
    }
    if (from.has_gateaddr()) {
      set_gateaddr(from.gateaddr());
    }
    if (from.has_svrlevel()) {
      set_svrlevel(from.svrlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gamever()) {
      set_gamever(from.gamever());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000042) != 0x00000042) return false;

  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other != this) {
    std::swap(gamegenre_, other->gamegenre_);
    std::swap(gametype_, other->gametype_);
    std::swap(roomaddr_, other->roomaddr_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(roomid_, other->roomid_);
    std::swap(onlinecnt_, other->onlinecnt_);
    std::swap(gateaddr_, other->gateaddr_);
    std::swap(svrlevel_, other->svrlevel_);
    std::swap(gamever_, other->gamever_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomInfo_descriptor_;
  metadata.reflection = RoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginRet::kPacketIdFieldNumber;
const int UserLoginRet::kResultFieldNumber;
const int UserLoginRet::kAccFieldNumber;
const int UserLoginRet::kTokenFieldNumber;
const int UserLoginRet::kIsreloginFieldNumber;
const int UserLoginRet::kContentFieldNumber;
const int UserLoginRet::kOriginalFieldNumber;
const int UserLoginRet::kRegionAreaFieldNumber;
const int UserLoginRet::kIsTouristFieldNumber;
const int UserLoginRet::kPhoneNumFieldNumber;
const int UserLoginRet::kAlipayAccFieldNumber;
const int UserLoginRet::kRealNameFieldNumber;
const int UserLoginRet::kBindingRewardFieldNumber;
const int UserLoginRet::kDefaultGateFieldNumber;
const int UserLoginRet::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

UserLoginRet::UserLoginRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginRet::InitAsDefaultInstance() {
}

UserLoginRet::UserLoginRet(const UserLoginRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginRet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 1004;
  result_ = 0;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isrelogin_ = false;
  original_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  regionarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  istourist_ = false;
  phonenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alipayacc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bindingreward_ = GOOGLE_LONGLONG(0);
  defaultgate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginRet::~UserLoginRet() {
  SharedDtor();
}

void UserLoginRet::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (original_ != &::google::protobuf::internal::kEmptyString) {
    delete original_;
  }
  if (regionarea_ != &::google::protobuf::internal::kEmptyString) {
    delete regionarea_;
  }
  if (phonenum_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenum_;
  }
  if (alipayacc_ != &::google::protobuf::internal::kEmptyString) {
    delete alipayacc_;
  }
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    delete realname_;
  }
  if (defaultgate_ != &::google::protobuf::internal::kEmptyString) {
    delete defaultgate_;
  }
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginRet_descriptor_;
}

const UserLoginRet& UserLoginRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

UserLoginRet* UserLoginRet::default_instance_ = NULL;

UserLoginRet* UserLoginRet::New() const {
  return new UserLoginRet;
}

void UserLoginRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 1004;
    result_ = 0;
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    isrelogin_ = false;
    if (has_original()) {
      if (original_ != &::google::protobuf::internal::kEmptyString) {
        original_->clear();
      }
    }
    if (has_regionarea()) {
      if (regionarea_ != &::google::protobuf::internal::kEmptyString) {
        regionarea_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    istourist_ = false;
    if (has_phonenum()) {
      if (phonenum_ != &::google::protobuf::internal::kEmptyString) {
        phonenum_->clear();
      }
    }
    if (has_alipayacc()) {
      if (alipayacc_ != &::google::protobuf::internal::kEmptyString) {
        alipayacc_->clear();
      }
    }
    if (has_realname()) {
      if (realname_ != &::google::protobuf::internal::kEmptyString) {
        realname_->clear();
      }
    }
    bindingreward_ = GOOGLE_LONGLONG(0);
    if (has_defaultgate()) {
      if (defaultgate_ != &::google::protobuf::internal::kEmptyString) {
        defaultgate_->clear();
      }
    }
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1 [default = 1004];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_acc;
        break;
      }

      // optional string acc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // optional string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isrelogin;
        break;
      }

      // required bool isrelogin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isrelogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrelogin_)));
          set_has_isrelogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // repeated .login2chk.RoomInfo content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        if (input->ExpectTag(58)) goto parse_original;
        break;
      }

      // optional bytes original = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_regionArea;
        break;
      }

      // optional string regionArea = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regionArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regionarea()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regionarea().data(), this->regionarea().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isTourist;
        break;
      }

      // optional bool isTourist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTourist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istourist_)));
          set_has_istourist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_phoneNum;
        break;
      }

      // optional string phoneNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoneNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phonenum().data(), this->phonenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_alipayAcc;
        break;
      }

      // optional string alipayAcc = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alipayAcc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alipayacc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alipayacc().data(), this->alipayacc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_realName;
        break;
      }

      // optional string realName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->realname().data(), this->realname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bindingReward;
        break;
      }

      // optional int64 bindingReward = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindingReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bindingreward_)));
          set_has_bindingreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_defaultGate;
        break;
      }

      // optional string defaultGate = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defaultGate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defaultgate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defaultgate().data(), this->defaultgate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_errorMsg;
        break;
      }

      // optional string errorMsg = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packet_id = 1 [default = 1004];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string acc = 3;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->acc(), output);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  // required bool isrelogin = 5;
  if (has_isrelogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isrelogin(), output);
  }

  // repeated .login2chk.RoomInfo content = 6;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->content(i), output);
  }

  // optional bytes original = 7;
  if (has_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->original(), output);
  }

  // optional string regionArea = 8;
  if (has_regionarea()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regionarea().data(), this->regionarea().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->regionarea(), output);
  }

  // optional bool isTourist = 9;
  if (has_istourist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->istourist(), output);
  }

  // optional string phoneNum = 10;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenum().data(), this->phonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->phonenum(), output);
  }

  // optional string alipayAcc = 11;
  if (has_alipayacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipayacc().data(), this->alipayacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->alipayacc(), output);
  }

  // optional string realName = 12;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->realname(), output);
  }

  // optional int64 bindingReward = 13;
  if (has_bindingreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->bindingreward(), output);
  }

  // optional string defaultGate = 14;
  if (has_defaultgate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defaultgate().data(), this->defaultgate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->defaultgate(), output);
  }

  // optional string errorMsg = 15;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->errormsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packet_id = 1 [default = 1004];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string acc = 3;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->acc(), target);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // required bool isrelogin = 5;
  if (has_isrelogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isrelogin(), target);
  }

  // repeated .login2chk.RoomInfo content = 6;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->content(i), target);
  }

  // optional bytes original = 7;
  if (has_original()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->original(), target);
  }

  // optional string regionArea = 8;
  if (has_regionarea()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regionarea().data(), this->regionarea().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->regionarea(), target);
  }

  // optional bool isTourist = 9;
  if (has_istourist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->istourist(), target);
  }

  // optional string phoneNum = 10;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenum().data(), this->phonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->phonenum(), target);
  }

  // optional string alipayAcc = 11;
  if (has_alipayacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipayacc().data(), this->alipayacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->alipayacc(), target);
  }

  // optional string realName = 12;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->realname(), target);
  }

  // optional int64 bindingReward = 13;
  if (has_bindingreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->bindingreward(), target);
  }

  // optional string defaultGate = 14;
  if (has_defaultgate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defaultgate().data(), this->defaultgate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->defaultgate(), target);
  }

  // optional string errorMsg = 15;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->errormsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packet_id = 1 [default = 1004];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string acc = 3;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // optional string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required bool isrelogin = 5;
    if (has_isrelogin()) {
      total_size += 1 + 1;
    }

    // optional bytes original = 7;
    if (has_original()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original());
    }

    // optional string regionArea = 8;
    if (has_regionarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regionarea());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isTourist = 9;
    if (has_istourist()) {
      total_size += 1 + 1;
    }

    // optional string phoneNum = 10;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenum());
    }

    // optional string alipayAcc = 11;
    if (has_alipayacc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alipayacc());
    }

    // optional string realName = 12;
    if (has_realname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realname());
    }

    // optional int64 bindingReward = 13;
    if (has_bindingreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bindingreward());
    }

    // optional string defaultGate = 14;
    if (has_defaultgate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defaultgate());
    }

    // optional string errorMsg = 15;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }

  }
  // repeated .login2chk.RoomInfo content = 6;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginRet::MergeFrom(const UserLoginRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_isrelogin()) {
      set_isrelogin(from.isrelogin());
    }
    if (from.has_original()) {
      set_original(from.original());
    }
    if (from.has_regionarea()) {
      set_regionarea(from.regionarea());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_istourist()) {
      set_istourist(from.istourist());
    }
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
    if (from.has_alipayacc()) {
      set_alipayacc(from.alipayacc());
    }
    if (from.has_realname()) {
      set_realname(from.realname());
    }
    if (from.has_bindingreward()) {
      set_bindingreward(from.bindingreward());
    }
    if (from.has_defaultgate()) {
      set_defaultgate(from.defaultgate());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginRet::CopyFrom(const UserLoginRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  for (int i = 0; i < content_size(); i++) {
    if (!this->content(i).IsInitialized()) return false;
  }
  return true;
}

void UserLoginRet::Swap(UserLoginRet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(acc_, other->acc_);
    std::swap(token_, other->token_);
    std::swap(isrelogin_, other->isrelogin_);
    content_.Swap(&other->content_);
    std::swap(original_, other->original_);
    std::swap(regionarea_, other->regionarea_);
    std::swap(istourist_, other->istourist_);
    std::swap(phonenum_, other->phonenum_);
    std::swap(alipayacc_, other->alipayacc_);
    std::swap(realname_, other->realname_);
    std::swap(bindingreward_, other->bindingreward_);
    std::swap(defaultgate_, other->defaultgate_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginRet_descriptor_;
  metadata.reflection = UserLoginRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSMSCode::kPacketIdFieldNumber;
const int RequestSMSCode::kAccFieldNumber;
const int RequestSMSCode::kPhoneNumFieldNumber;
const int RequestSMSCode::kSmsTypeFieldNumber;
#endif  // !_MSC_VER

RequestSMSCode::RequestSMSCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestSMSCode::InitAsDefaultInstance() {
}

RequestSMSCode::RequestSMSCode(const RequestSMSCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestSMSCode::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 1007;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phonenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  smstype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSMSCode::~RequestSMSCode() {
  SharedDtor();
}

void RequestSMSCode::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (phonenum_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenum_;
  }
  if (this != default_instance_) {
  }
}

void RequestSMSCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSMSCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSMSCode_descriptor_;
}

const RequestSMSCode& RequestSMSCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

RequestSMSCode* RequestSMSCode::default_instance_ = NULL;

RequestSMSCode* RequestSMSCode::New() const {
  return new RequestSMSCode;
}

void RequestSMSCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 1007;
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
    if (has_phonenum()) {
      if (phonenum_ != &::google::protobuf::internal::kEmptyString) {
        phonenum_->clear();
      }
    }
    smstype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSMSCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1 [default = 1007];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acc;
        break;
      }

      // required string acc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phoneNum;
        break;
      }

      // required string phoneNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoneNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phonenum().data(), this->phonenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_smsType;
        break;
      }

      // optional int32 smsType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smsType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smstype_)));
          set_has_smstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestSMSCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packet_id = 1 [default = 1007];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  // required string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acc(), output);
  }

  // required string phoneNum = 3;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenum().data(), this->phonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phonenum(), output);
  }

  // optional int32 smsType = 4;
  if (has_smstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->smstype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestSMSCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packet_id = 1 [default = 1007];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packet_id(), target);
  }

  // required string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acc(), target);
  }

  // required string phoneNum = 3;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenum().data(), this->phonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phonenum(), target);
  }

  // optional int32 smsType = 4;
  if (has_smstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->smstype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestSMSCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packet_id = 1 [default = 1007];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

    // required string acc = 2;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // required string phoneNum = 3;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenum());
    }

    // optional int32 smsType = 4;
    if (has_smstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smstype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSMSCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSMSCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSMSCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSMSCode::MergeFrom(const RequestSMSCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
    if (from.has_smstype()) {
      set_smstype(from.smstype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSMSCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSMSCode::CopyFrom(const RequestSMSCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSMSCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void RequestSMSCode::Swap(RequestSMSCode* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(acc_, other->acc_);
    std::swap(phonenum_, other->phonenum_);
    std::swap(smstype_, other->smstype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSMSCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSMSCode_descriptor_;
  metadata.reflection = RequestSMSCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Req2WebSMSRet::kReqSMSCodeFieldNumber;
const int Req2WebSMSRet::kInfoFieldNumber;
#endif  // !_MSC_VER

Req2WebSMSRet::Req2WebSMSRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Req2WebSMSRet::InitAsDefaultInstance() {
}

Req2WebSMSRet::Req2WebSMSRet(const Req2WebSMSRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Req2WebSMSRet::SharedCtor() {
  _cached_size_ = 0;
  reqsmscode_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Req2WebSMSRet::~Req2WebSMSRet() {
  SharedDtor();
}

void Req2WebSMSRet::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void Req2WebSMSRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Req2WebSMSRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Req2WebSMSRet_descriptor_;
}

const Req2WebSMSRet& Req2WebSMSRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

Req2WebSMSRet* Req2WebSMSRet::default_instance_ = NULL;

Req2WebSMSRet* Req2WebSMSRet::New() const {
  return new Req2WebSMSRet;
}

void Req2WebSMSRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqsmscode_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Req2WebSMSRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reqSMSCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqsmscode_)));
          set_has_reqsmscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required bytes info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Req2WebSMSRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 reqSMSCode = 1;
  if (has_reqsmscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reqsmscode(), output);
  }

  // required bytes info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Req2WebSMSRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 reqSMSCode = 1;
  if (has_reqsmscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reqsmscode(), target);
  }

  // required bytes info = 2;
  if (has_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Req2WebSMSRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reqSMSCode = 1;
    if (has_reqsmscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqsmscode());
    }

    // required bytes info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Req2WebSMSRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Req2WebSMSRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Req2WebSMSRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Req2WebSMSRet::MergeFrom(const Req2WebSMSRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqsmscode()) {
      set_reqsmscode(from.reqsmscode());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Req2WebSMSRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req2WebSMSRet::CopyFrom(const Req2WebSMSRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req2WebSMSRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Req2WebSMSRet::Swap(Req2WebSMSRet* other) {
  if (other != this) {
    std::swap(reqsmscode_, other->reqsmscode_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Req2WebSMSRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Req2WebSMSRet_descriptor_;
  metadata.reflection = Req2WebSMSRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserPhoneBinding::kPacketIdFieldNumber;
const int UserPhoneBinding::kAccFieldNumber;
const int UserPhoneBinding::kPwdFieldNumber;
const int UserPhoneBinding::kDeviceNumFieldNumber;
const int UserPhoneBinding::kPhoneNumFieldNumber;
const int UserPhoneBinding::kSmsCodeFieldNumber;
#endif  // !_MSC_VER

UserPhoneBinding::UserPhoneBinding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserPhoneBinding::InitAsDefaultInstance() {
}

UserPhoneBinding::UserPhoneBinding(const UserPhoneBinding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserPhoneBinding::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 1009;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phonenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  smscode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPhoneBinding::~UserPhoneBinding() {
  SharedDtor();
}

void UserPhoneBinding::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (devicenum_ != &::google::protobuf::internal::kEmptyString) {
    delete devicenum_;
  }
  if (phonenum_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenum_;
  }
  if (this != default_instance_) {
  }
}

void UserPhoneBinding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPhoneBinding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPhoneBinding_descriptor_;
}

const UserPhoneBinding& UserPhoneBinding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

UserPhoneBinding* UserPhoneBinding::default_instance_ = NULL;

UserPhoneBinding* UserPhoneBinding::New() const {
  return new UserPhoneBinding;
}

void UserPhoneBinding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 1009;
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    if (has_devicenum()) {
      if (devicenum_ != &::google::protobuf::internal::kEmptyString) {
        devicenum_->clear();
      }
    }
    if (has_phonenum()) {
      if (phonenum_ != &::google::protobuf::internal::kEmptyString) {
        phonenum_->clear();
      }
    }
    smscode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPhoneBinding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1 [default = 1009];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acc;
        break;
      }

      // required string acc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }

      // optional string pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deviceNum;
        break;
      }

      // required string deviceNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicenum().data(), this->devicenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_phoneNum;
        break;
      }

      // optional string phoneNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoneNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phonenum().data(), this->phonenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_smsCode;
        break;
      }

      // required int32 smsCode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smsCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smscode_)));
          set_has_smscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserPhoneBinding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packet_id = 1 [default = 1009];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  // required string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acc(), output);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwd(), output);
  }

  // required string deviceNum = 4;
  if (has_devicenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicenum().data(), this->devicenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->devicenum(), output);
  }

  // optional string phoneNum = 5;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenum().data(), this->phonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->phonenum(), output);
  }

  // required int32 smsCode = 6;
  if (has_smscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->smscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserPhoneBinding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packet_id = 1 [default = 1009];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packet_id(), target);
  }

  // required string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acc(), target);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // required string deviceNum = 4;
  if (has_devicenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicenum().data(), this->devicenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->devicenum(), target);
  }

  // optional string phoneNum = 5;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenum().data(), this->phonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phonenum(), target);
  }

  // required int32 smsCode = 6;
  if (has_smscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->smscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserPhoneBinding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packet_id = 1 [default = 1009];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

    // required string acc = 2;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // required string deviceNum = 4;
    if (has_devicenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicenum());
    }

    // optional string phoneNum = 5;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenum());
    }

    // required int32 smsCode = 6;
    if (has_smscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPhoneBinding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPhoneBinding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPhoneBinding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPhoneBinding::MergeFrom(const UserPhoneBinding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_devicenum()) {
      set_devicenum(from.devicenum());
    }
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
    if (from.has_smscode()) {
      set_smscode(from.smscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPhoneBinding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPhoneBinding::CopyFrom(const UserPhoneBinding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPhoneBinding::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002a) != 0x0000002a) return false;

  return true;
}

void UserPhoneBinding::Swap(UserPhoneBinding* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(acc_, other->acc_);
    std::swap(pwd_, other->pwd_);
    std::swap(devicenum_, other->devicenum_);
    std::swap(phonenum_, other->phonenum_);
    std::swap(smscode_, other->smscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPhoneBinding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPhoneBinding_descriptor_;
  metadata.reflection = UserPhoneBinding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAliPayBinding::kPacketIdFieldNumber;
const int UserAliPayBinding::kAccFieldNumber;
const int UserAliPayBinding::kAlipayAccFieldNumber;
const int UserAliPayBinding::kRealNameFieldNumber;
#endif  // !_MSC_VER

UserAliPayBinding::UserAliPayBinding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserAliPayBinding::InitAsDefaultInstance() {
}

UserAliPayBinding::UserAliPayBinding(const UserAliPayBinding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserAliPayBinding::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 1011;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alipayacc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAliPayBinding::~UserAliPayBinding() {
  SharedDtor();
}

void UserAliPayBinding::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (alipayacc_ != &::google::protobuf::internal::kEmptyString) {
    delete alipayacc_;
  }
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    delete realname_;
  }
  if (this != default_instance_) {
  }
}

void UserAliPayBinding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAliPayBinding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAliPayBinding_descriptor_;
}

const UserAliPayBinding& UserAliPayBinding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

UserAliPayBinding* UserAliPayBinding::default_instance_ = NULL;

UserAliPayBinding* UserAliPayBinding::New() const {
  return new UserAliPayBinding;
}

void UserAliPayBinding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 1011;
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
    if (has_alipayacc()) {
      if (alipayacc_ != &::google::protobuf::internal::kEmptyString) {
        alipayacc_->clear();
      }
    }
    if (has_realname()) {
      if (realname_ != &::google::protobuf::internal::kEmptyString) {
        realname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAliPayBinding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1 [default = 1011];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acc;
        break;
      }

      // required string acc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_alipayAcc;
        break;
      }

      // optional string alipayAcc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alipayAcc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alipayacc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alipayacc().data(), this->alipayacc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_realName;
        break;
      }

      // optional string realName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->realname().data(), this->realname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserAliPayBinding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packet_id = 1 [default = 1011];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  // required string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acc(), output);
  }

  // optional string alipayAcc = 3;
  if (has_alipayacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipayacc().data(), this->alipayacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->alipayacc(), output);
  }

  // optional string realName = 4;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->realname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserAliPayBinding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packet_id = 1 [default = 1011];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packet_id(), target);
  }

  // required string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acc(), target);
  }

  // optional string alipayAcc = 3;
  if (has_alipayacc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipayacc().data(), this->alipayacc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->alipayacc(), target);
  }

  // optional string realName = 4;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->realname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserAliPayBinding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packet_id = 1 [default = 1011];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

    // required string acc = 2;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // optional string alipayAcc = 3;
    if (has_alipayacc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alipayacc());
    }

    // optional string realName = 4;
    if (has_realname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAliPayBinding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAliPayBinding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAliPayBinding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAliPayBinding::MergeFrom(const UserAliPayBinding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_alipayacc()) {
      set_alipayacc(from.alipayacc());
    }
    if (from.has_realname()) {
      set_realname(from.realname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAliPayBinding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAliPayBinding::CopyFrom(const UserAliPayBinding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAliPayBinding::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void UserAliPayBinding::Swap(UserAliPayBinding* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(acc_, other->acc_);
    std::swap(alipayacc_, other->alipayacc_);
    std::swap(realname_, other->realname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAliPayBinding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAliPayBinding_descriptor_;
  metadata.reflection = UserAliPayBinding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetrievePwd::kPacketIdFieldNumber;
const int RetrievePwd::kAccFieldNumber;
const int RetrievePwd::kPhoneNumFieldNumber;
const int RetrievePwd::kSmsNumFieldNumber;
const int RetrievePwd::kNewPwdFieldNumber;
#endif  // !_MSC_VER

RetrievePwd::RetrievePwd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetrievePwd::InitAsDefaultInstance() {
}

RetrievePwd::RetrievePwd(const RetrievePwd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetrievePwd::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 1013;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phonenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  smsnum_ = 0;
  newpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetrievePwd::~RetrievePwd() {
  SharedDtor();
}

void RetrievePwd::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (phonenum_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenum_;
  }
  if (newpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete newpwd_;
  }
  if (this != default_instance_) {
  }
}

void RetrievePwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetrievePwd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetrievePwd_descriptor_;
}

const RetrievePwd& RetrievePwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

RetrievePwd* RetrievePwd::default_instance_ = NULL;

RetrievePwd* RetrievePwd::New() const {
  return new RetrievePwd;
}

void RetrievePwd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 1013;
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
    if (has_phonenum()) {
      if (phonenum_ != &::google::protobuf::internal::kEmptyString) {
        phonenum_->clear();
      }
    }
    smsnum_ = 0;
    if (has_newpwd()) {
      if (newpwd_ != &::google::protobuf::internal::kEmptyString) {
        newpwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetrievePwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1 [default = 1013];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acc;
        break;
      }

      // required string acc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phoneNum;
        break;
      }

      // required string phoneNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoneNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phonenum().data(), this->phonenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_smsNum;
        break;
      }

      // required int32 smsNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smsnum_)));
          set_has_smsnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_newPwd;
        break;
      }

      // required string newPwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newpwd().data(), this->newpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetrievePwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packet_id = 1 [default = 1013];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  // required string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acc(), output);
  }

  // required string phoneNum = 3;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenum().data(), this->phonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phonenum(), output);
  }

  // required int32 smsNum = 4;
  if (has_smsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->smsnum(), output);
  }

  // required string newPwd = 5;
  if (has_newpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newpwd().data(), this->newpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->newpwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetrievePwd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packet_id = 1 [default = 1013];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packet_id(), target);
  }

  // required string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acc(), target);
  }

  // required string phoneNum = 3;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonenum().data(), this->phonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phonenum(), target);
  }

  // required int32 smsNum = 4;
  if (has_smsnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->smsnum(), target);
  }

  // required string newPwd = 5;
  if (has_newpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newpwd().data(), this->newpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->newpwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetrievePwd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packet_id = 1 [default = 1013];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

    // required string acc = 2;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // required string phoneNum = 3;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenum());
    }

    // required int32 smsNum = 4;
    if (has_smsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smsnum());
    }

    // required string newPwd = 5;
    if (has_newpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newpwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetrievePwd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetrievePwd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetrievePwd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetrievePwd::MergeFrom(const RetrievePwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
    if (from.has_smsnum()) {
      set_smsnum(from.smsnum());
    }
    if (from.has_newpwd()) {
      set_newpwd(from.newpwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetrievePwd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetrievePwd::CopyFrom(const RetrievePwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrievePwd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void RetrievePwd::Swap(RetrievePwd* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(acc_, other->acc_);
    std::swap(phonenum_, other->phonenum_);
    std::swap(smsnum_, other->smsnum_);
    std::swap(newpwd_, other->newpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetrievePwd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetrievePwd_descriptor_;
  metadata.reflection = RetrievePwd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BindingRet::kPacketIdFieldNumber;
const int BindingRet::kResultFieldNumber;
const int BindingRet::kOptypeFieldNumber;
const int BindingRet::kErrorNumFieldNumber;
#endif  // !_MSC_VER

BindingRet::BindingRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BindingRet::InitAsDefaultInstance() {
}

BindingRet::BindingRet(const BindingRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BindingRet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 1012;
  result_ = 0;
  optype_ = 0;
  errornum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindingRet::~BindingRet() {
  SharedDtor();
}

void BindingRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BindingRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindingRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BindingRet_descriptor_;
}

const BindingRet& BindingRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

BindingRet* BindingRet::default_instance_ = NULL;

BindingRet* BindingRet::New() const {
  return new BindingRet;
}

void BindingRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 1012;
    result_ = 0;
    optype_ = 0;
    errornum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BindingRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1 [default = 1012];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_optype;
        break;
      }

      // optional int32 optype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_errorNum;
        break;
      }

      // required int32 errorNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errornum_)));
          set_has_errornum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BindingRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packet_id = 1 [default = 1012];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 optype = 3;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->optype(), output);
  }

  // required int32 errorNum = 4;
  if (has_errornum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->errornum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BindingRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packet_id = 1 [default = 1012];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 optype = 3;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->optype(), target);
  }

  // required int32 errorNum = 4;
  if (has_errornum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->errornum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BindingRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packet_id = 1 [default = 1012];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 optype = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // required int32 errorNum = 4;
    if (has_errornum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errornum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindingRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BindingRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BindingRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BindingRet::MergeFrom(const BindingRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_errornum()) {
      set_errornum(from.errornum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BindingRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindingRet::CopyFrom(const BindingRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindingRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void BindingRet::Swap(BindingRet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(optype_, other->optype_);
    std::swap(errornum_, other->errornum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BindingRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BindingRet_descriptor_;
  metadata.reflection = BindingRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ch2LBindingRet::kUpbInfoFieldNumber;
const int Ch2LBindingRet::kBrInfoFieldNumber;
#endif  // !_MSC_VER

Ch2LBindingRet::Ch2LBindingRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ch2LBindingRet::InitAsDefaultInstance() {
}

Ch2LBindingRet::Ch2LBindingRet(const Ch2LBindingRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ch2LBindingRet::SharedCtor() {
  _cached_size_ = 0;
  upbinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ch2LBindingRet::~Ch2LBindingRet() {
  SharedDtor();
}

void Ch2LBindingRet::SharedDtor() {
  if (upbinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete upbinfo_;
  }
  if (brinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete brinfo_;
  }
  if (this != default_instance_) {
  }
}

void Ch2LBindingRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ch2LBindingRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ch2LBindingRet_descriptor_;
}

const Ch2LBindingRet& Ch2LBindingRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

Ch2LBindingRet* Ch2LBindingRet::default_instance_ = NULL;

Ch2LBindingRet* Ch2LBindingRet::New() const {
  return new Ch2LBindingRet;
}

void Ch2LBindingRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_upbinfo()) {
      if (upbinfo_ != &::google::protobuf::internal::kEmptyString) {
        upbinfo_->clear();
      }
    }
    if (has_brinfo()) {
      if (brinfo_ != &::google::protobuf::internal::kEmptyString) {
        brinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ch2LBindingRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes upbInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_upbinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_brInfo;
        break;
      }

      // required bytes brInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_brinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ch2LBindingRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes upbInfo = 1;
  if (has_upbinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->upbinfo(), output);
  }

  // required bytes brInfo = 2;
  if (has_brinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->brinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ch2LBindingRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes upbInfo = 1;
  if (has_upbinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->upbinfo(), target);
  }

  // required bytes brInfo = 2;
  if (has_brinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->brinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ch2LBindingRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes upbInfo = 1;
    if (has_upbinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->upbinfo());
    }

    // required bytes brInfo = 2;
    if (has_brinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->brinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ch2LBindingRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ch2LBindingRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ch2LBindingRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ch2LBindingRet::MergeFrom(const Ch2LBindingRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upbinfo()) {
      set_upbinfo(from.upbinfo());
    }
    if (from.has_brinfo()) {
      set_brinfo(from.brinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ch2LBindingRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ch2LBindingRet::CopyFrom(const Ch2LBindingRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ch2LBindingRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Ch2LBindingRet::Swap(Ch2LBindingRet* other) {
  if (other != this) {
    std::swap(upbinfo_, other->upbinfo_);
    std::swap(brinfo_, other->brinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ch2LBindingRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ch2LBindingRet_descriptor_;
  metadata.reflection = Ch2LBindingRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqWorldToken::kPacketIdFieldNumber;
const int ReqWorldToken::kAccFieldNumber;
#endif  // !_MSC_VER

ReqWorldToken::ReqWorldToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqWorldToken::InitAsDefaultInstance() {
}

ReqWorldToken::ReqWorldToken(const ReqWorldToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqWorldToken::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 1019;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWorldToken::~ReqWorldToken() {
  SharedDtor();
}

void ReqWorldToken::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (this != default_instance_) {
  }
}

void ReqWorldToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWorldToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWorldToken_descriptor_;
}

const ReqWorldToken& ReqWorldToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

ReqWorldToken* ReqWorldToken::default_instance_ = NULL;

ReqWorldToken* ReqWorldToken::New() const {
  return new ReqWorldToken;
}

void ReqWorldToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 1019;
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWorldToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1 [default = 1019];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acc;
        break;
      }

      // optional string acc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqWorldToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packet_id = 1 [default = 1019];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  // optional string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqWorldToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packet_id = 1 [default = 1019];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packet_id(), target);
  }

  // optional string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqWorldToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packet_id = 1 [default = 1019];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

    // optional string acc = 2;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWorldToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWorldToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWorldToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWorldToken::MergeFrom(const ReqWorldToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWorldToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWorldToken::CopyFrom(const ReqWorldToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWorldToken::IsInitialized() const {

  return true;
}

void ReqWorldToken::Swap(ReqWorldToken* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(acc_, other->acc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWorldToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWorldToken_descriptor_;
  metadata.reflection = ReqWorldToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqWorldTokenRet::kPacketIdFieldNumber;
const int ReqWorldTokenRet::kAccFieldNumber;
const int ReqWorldTokenRet::kTokenFieldNumber;
#endif  // !_MSC_VER

ReqWorldTokenRet::ReqWorldTokenRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqWorldTokenRet::InitAsDefaultInstance() {
}

ReqWorldTokenRet::ReqWorldTokenRet(const ReqWorldTokenRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqWorldTokenRet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 1020;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWorldTokenRet::~ReqWorldTokenRet() {
  SharedDtor();
}

void ReqWorldTokenRet::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ReqWorldTokenRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWorldTokenRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWorldTokenRet_descriptor_;
}

const ReqWorldTokenRet& ReqWorldTokenRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

ReqWorldTokenRet* ReqWorldTokenRet::default_instance_ = NULL;

ReqWorldTokenRet* ReqWorldTokenRet::New() const {
  return new ReqWorldTokenRet;
}

void ReqWorldTokenRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 1020;
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWorldTokenRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1 [default = 1020];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acc;
        break;
      }

      // optional string acc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqWorldTokenRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packet_id = 1 [default = 1020];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  // optional string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acc(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqWorldTokenRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packet_id = 1 [default = 1020];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packet_id(), target);
  }

  // optional string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acc(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqWorldTokenRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packet_id = 1 [default = 1020];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

    // optional string acc = 2;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWorldTokenRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWorldTokenRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWorldTokenRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWorldTokenRet::MergeFrom(const ReqWorldTokenRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWorldTokenRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWorldTokenRet::CopyFrom(const ReqWorldTokenRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWorldTokenRet::IsInitialized() const {

  return true;
}

void ReqWorldTokenRet::Swap(ReqWorldTokenRet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(acc_, other->acc_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWorldTokenRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWorldTokenRet_descriptor_;
  metadata.reflection = ReqWorldTokenRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestChargeOrder::kPacketIdFieldNumber;
const int RequestChargeOrder::kAccFieldNumber;
const int RequestChargeOrder::kChannelIDFieldNumber;
#endif  // !_MSC_VER

RequestChargeOrder::RequestChargeOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestChargeOrder::InitAsDefaultInstance() {
}

RequestChargeOrder::RequestChargeOrder(const RequestChargeOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestChargeOrder::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 1018;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestChargeOrder::~RequestChargeOrder() {
  SharedDtor();
}

void RequestChargeOrder::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (this != default_instance_) {
  }
}

void RequestChargeOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestChargeOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestChargeOrder_descriptor_;
}

const RequestChargeOrder& RequestChargeOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

RequestChargeOrder* RequestChargeOrder::default_instance_ = NULL;

RequestChargeOrder* RequestChargeOrder::New() const {
  return new RequestChargeOrder;
}

void RequestChargeOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_id_ = 1018;
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
    channelid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestChargeOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1 [default = 1018];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
          set_has_packet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acc;
        break;
      }

      // required string acc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channelID;
        break;
      }

      // optional int32 channelID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestChargeOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packet_id = 1 [default = 1018];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  // required string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acc(), output);
  }

  // optional int32 channelID = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestChargeOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packet_id = 1 [default = 1018];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packet_id(), target);
  }

  // required string acc = 2;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acc(), target);
  }

  // optional int32 channelID = 3;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestChargeOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packet_id = 1 [default = 1018];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

    // required string acc = 2;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // optional int32 channelID = 3;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestChargeOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestChargeOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestChargeOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestChargeOrder::MergeFrom(const RequestChargeOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestChargeOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestChargeOrder::CopyFrom(const RequestChargeOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChargeOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void RequestChargeOrder::Swap(RequestChargeOrder* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(acc_, other->acc_);
    std::swap(channelid_, other->channelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestChargeOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestChargeOrder_descriptor_;
  metadata.reflection = RequestChargeOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ChargeRet::ChargeRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargeRet::InitAsDefaultInstance() {
}

ChargeRet::ChargeRet(const ChargeRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargeRet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeRet::~ChargeRet() {
  SharedDtor();
}

void ChargeRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeRet_descriptor_;
}

const ChargeRet& ChargeRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

ChargeRet* ChargeRet::default_instance_ = NULL;

ChargeRet* ChargeRet::New() const {
  return new ChargeRet;
}

void ChargeRet::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ChargeRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargeRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargeRet::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeRet::MergeFrom(const ChargeRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeRet::CopyFrom(const ChargeRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeRet::IsInitialized() const {

  return true;
}

void ChargeRet::Swap(ChargeRet* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeRet_descriptor_;
  metadata.reflection = ChargeRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CheckChargeRet::CheckChargeRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckChargeRet::InitAsDefaultInstance() {
}

CheckChargeRet::CheckChargeRet(const CheckChargeRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckChargeRet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckChargeRet::~CheckChargeRet() {
  SharedDtor();
}

void CheckChargeRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckChargeRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckChargeRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckChargeRet_descriptor_;
}

const CheckChargeRet& CheckChargeRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login2chk_5fmsg_5ftype_2eproto();
  return *default_instance_;
}

CheckChargeRet* CheckChargeRet::default_instance_ = NULL;

CheckChargeRet* CheckChargeRet::New() const {
  return new CheckChargeRet;
}

void CheckChargeRet::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckChargeRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CheckChargeRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckChargeRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckChargeRet::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckChargeRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckChargeRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckChargeRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckChargeRet::MergeFrom(const CheckChargeRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckChargeRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckChargeRet::CopyFrom(const CheckChargeRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckChargeRet::IsInitialized() const {

  return true;
}

void CheckChargeRet::Swap(CheckChargeRet* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckChargeRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckChargeRet_descriptor_;
  metadata.reflection = CheckChargeRet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace login2chk

// @@protoc_insertion_point(global_scope)
